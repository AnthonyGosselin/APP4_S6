
c:/_Projects/APP4_S6/target/2.1.0/photon/APP4_S6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002050  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2070  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  080a2074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000534  2000007c  2000007c  0003007c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a20f0  080a20f0  000220f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2118  080a2118  00022118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e1a39  00000000  00000000  0002211c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001173d  00000000  00000000  00103b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001457f  00000000  00000000  00115292  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001c48  00000000  00000000  00129811  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004420  00000000  00000000  0012b459  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024403  00000000  00000000  0012f879  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025e8e  00000000  00000000  00153c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ace26  00000000  00000000  00179b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004738  00000000  00000000  00226930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f001 fe63 	bl	80a1cfc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f001 fe6b 	bl	80a1d18 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a2074 	.word	0x080a2074
 80a0050:	2000007c 	.word	0x2000007c
 80a0054:	2000007c 	.word	0x2000007c
 80a0058:	200005b0 	.word	0x200005b0
 80a005c:	200005b0 	.word	0x200005b0

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f000 fe53 	bl	80a0d0c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a2050 	.word	0x080a2050
 80a0084:	080a2070 	.word	0x080a2070

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b900 	b.w	80a028c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f97b 	bl	80a0388 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f000 bdfb 	b.w	80a0c90 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f000 bca5 	b.w	80a09e8 <malloc>

080a009e <_Znaj>:
 80a009e:	f000 bca3 	b.w	80a09e8 <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f000 bca9 	b.w	80a09f8 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00b6:	6803      	ldr	r3, [r0, #0]
 80a00b8:	4718      	bx	r3

080a00ba <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
 80a00ba:	2a01      	cmp	r2, #1
 80a00bc:	d003      	beq.n	80a00c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
 80a00be:	2a02      	cmp	r2, #2
 80a00c0:	d003      	beq.n	80a00ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
 80a00c2:	2000      	movs	r0, #0
 80a00c4:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00c6:	6001      	str	r1, [r0, #0]
	      break;
 80a00c8:	e7fb      	b.n	80a00c2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00ca:	680b      	ldr	r3, [r1, #0]
 80a00cc:	6003      	str	r3, [r0, #0]
	}
 80a00ce:	e7f8      	b.n	80a00c2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

080a00d0 <_ZN6Thread3runEPv>:

private:

    static os_thread_return_t run(void* param) {
        Data* th = (Data*)param;
        th->started = true;
 80a00d0:	2301      	movs	r3, #1
    static os_thread_return_t run(void* param) {
 80a00d2:	b510      	push	{r4, lr}
        th->started = true;
 80a00d4:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 80a00d6:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
 80a00d8:	4604      	mov	r4, r0
        if (th->func) {
 80a00da:	b143      	cbz	r3, 80a00ee <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
 80a00dc:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a00de:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
 80a00e0:	2301      	movs	r3, #1
        os_thread_exit(nullptr);
 80a00e2:	2000      	movs	r0, #0
        th->exited = true;
 80a00e4:	7463      	strb	r3, [r4, #17]
    }
 80a00e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
 80a00ea:	f000 bb0f 	b.w	80a070c <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80a00ee:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 80a00f0:	2800      	cmp	r0, #0
 80a00f2:	d0f5      	beq.n	80a00e0 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
 80a00f4:	6883      	ldr	r3, [r0, #8]
 80a00f6:	b90b      	cbnz	r3, 80a00fc <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
 80a00f8:	f001 f9f9 	bl	80a14ee <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a00fc:	68c3      	ldr	r3, [r0, #12]
 80a00fe:	e7ee      	b.n	80a00de <_ZN6Thread3runEPv+0xe>

080a0100 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 80a0100:	b40e      	push	{r1, r2, r3}
 80a0102:	b503      	push	{r0, r1, lr}
 80a0104:	ab03      	add	r3, sp, #12
 80a0106:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 80a010a:	2101      	movs	r1, #1
        va_start(args, format);
 80a010c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 80a010e:	f000 fd2b 	bl	80a0b68 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 80a0112:	b002      	add	sp, #8
 80a0114:	f85d eb04 	ldr.w	lr, [sp], #4
 80a0118:	b003      	add	sp, #12
 80a011a:	4770      	bx	lr

080a011c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a011c:	b510      	push	{r4, lr}
      if (_M_manager)
 80a011e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0120:	4604      	mov	r4, r0
      if (_M_manager)
 80a0122:	b113      	cbz	r3, 80a012a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0124:	2203      	movs	r2, #3
 80a0126:	4601      	mov	r1, r0
 80a0128:	4798      	blx	r3
    }
 80a012a:	4620      	mov	r0, r4
 80a012c:	bd10      	pop	{r4, pc}

080a012e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
 80a012e:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 80a0130:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
 80a0132:	4604      	mov	r4, r0
	if (__ptr != nullptr)
 80a0134:	b135      	cbz	r5, 80a0144 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
 80a0136:	4628      	mov	r0, r5
 80a0138:	f7ff fff0 	bl	80a011c <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
 80a013c:	2110      	movs	r1, #16
 80a013e:	4628      	mov	r0, r5
 80a0140:	f001 f9cf 	bl	80a14e2 <_ZdlPvj>
 80a0144:	4620      	mov	r0, r4
      }
 80a0146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
 80a014a:	2114      	movs	r1, #20
 80a014c:	f001 b9c9 	b.w	80a14e2 <_ZdlPvj>

080a0150 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
 80a0150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0154:	4607      	mov	r7, r0
 80a0156:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
 80a0158:	2014      	movs	r0, #20
 80a015a:	492a      	ldr	r1, [pc, #168]	; (80a0204 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
    Thread(const char *name, wiring_thread_fn_t function,
 80a015c:	b085      	sub	sp, #20
 80a015e:	4616      	mov	r6, r2
 80a0160:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
 80a0162:	f001 f9c0 	bl	80a14e6 <_ZnwjRKSt9nothrow_t>
 80a0166:	4604      	mov	r4, r0
 80a0168:	b130      	cbz	r0, 80a0178 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x28>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 80a016a:	2200      	movs	r2, #0
            exited(false) {
 80a016c:	e9c0 2200 	strd	r2, r2, [r0]
 80a0170:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80a0174:	7402      	strb	r2, [r0, #16]
 80a0176:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80a0178:	603c      	str	r4, [r7, #0]
        if (!d_) {
 80a017a:	2c00      	cmp	r4, #0
 80a017c:	d038      	beq.n	80a01f0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
 80a017e:	2010      	movs	r0, #16
 80a0180:	4920      	ldr	r1, [pc, #128]	; (80a0204 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
 80a0182:	f001 f9b0 	bl	80a14e6 <_ZnwjRKSt9nothrow_t>
 80a0186:	4605      	mov	r5, r0
 80a0188:	b1a0      	cbz	r0, 80a01b4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x64>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a018a:	e896 0003 	ldmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a018e:	2200      	movs	r2, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0190:	ab02      	add	r3, sp, #8
 80a0192:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0196:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a019a:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a019e:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a01a2:	68b3      	ldr	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a01a4:	e885 0003 	stmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a01a8:	60b2      	str	r2, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a01aa:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a01ac:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a01ae:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a01b0:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a01b2:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a01b4:	6826      	ldr	r6, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a01b6:	6025      	str	r5, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
 80a01b8:	b136      	cbz	r6, 80a01c8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x78>
 80a01ba:	4630      	mov	r0, r6
 80a01bc:	f7ff ffae 	bl	80a011c <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
 80a01c0:	2110      	movs	r1, #16
 80a01c2:	4630      	mov	r0, r6
 80a01c4:	f001 f98d 	bl	80a14e2 <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80a01c8:	6838      	ldr	r0, [r7, #0]
        if (!d_->wrapper) {
 80a01ca:	6803      	ldr	r3, [r0, #0]
 80a01cc:	b183      	cbz	r3, 80a01f0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a01ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a01d0:	464a      	mov	r2, r9
 80a01d2:	e9cd 0300 	strd	r0, r3, [sp]
 80a01d6:	4641      	mov	r1, r8
 80a01d8:	4b0b      	ldr	r3, [pc, #44]	; (80a0208 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb8>)
 80a01da:	3004      	adds	r0, #4
 80a01dc:	f000 fa5e 	bl	80a069c <os_thread_create>
 80a01e0:	b930      	cbnz	r0, 80a01f0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
 80a01e2:	683b      	ldr	r3, [r7, #0]
        while (!d_->started) {
 80a01e4:	7c1b      	ldrb	r3, [r3, #16]
 80a01e6:	b94b      	cbnz	r3, 80a01fc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
            HAL_Delay_Milliseconds(1);
 80a01e8:	2001      	movs	r0, #1
 80a01ea:	f000 fa3f 	bl	80a066c <HAL_Delay_Milliseconds>
        while (!d_->started) {
 80a01ee:	e7f8      	b.n	80a01e2 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x92>
 80a01f0:	2300      	movs	r3, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a01f2:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a01f4:	603b      	str	r3, [r7, #0]
	if (__p != pointer())
 80a01f6:	b108      	cbz	r0, 80a01fc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
      operator()(_Tp* __ptr) const
 80a01f8:	f7ff ff99 	bl	80a012e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
 80a01fc:	4638      	mov	r0, r7
 80a01fe:	b005      	add	sp, #20
 80a0200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0204:	080a204c 	.word	0x080a204c
 80a0208:	080a00d1 	.word	0x080a00d1

080a020c <_ZN6ThreadD1Ev>:
    ~Thread()
 80a020c:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80a020e:	6803      	ldr	r3, [r0, #0]
 80a0210:	4604      	mov	r4, r0
        if (!isValid())
 80a0212:	b19b      	cbz	r3, 80a023c <_ZN6ThreadD1Ev+0x30>
        return isValid() && os_thread_is_current(d_->handle);
 80a0214:	6858      	ldr	r0, [r3, #4]
 80a0216:	f000 fa49 	bl	80a06ac <os_thread_is_current>
 80a021a:	b978      	cbnz	r0, 80a023c <_ZN6ThreadD1Ev+0x30>
 80a021c:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
 80a021e:	7c5a      	ldrb	r2, [r3, #17]
 80a0220:	b912      	cbnz	r2, 80a0228 <_ZN6ThreadD1Ev+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
 80a0222:	6858      	ldr	r0, [r3, #4]
 80a0224:	f000 fa4a 	bl	80a06bc <os_thread_join>
        os_thread_cleanup(d_->handle);
 80a0228:	6823      	ldr	r3, [r4, #0]
 80a022a:	6858      	ldr	r0, [r3, #4]
 80a022c:	f000 fa4e 	bl	80a06cc <os_thread_cleanup>
 80a0230:	2300      	movs	r3, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0232:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0234:	6023      	str	r3, [r4, #0]
	if (__p != pointer())
 80a0236:	b108      	cbz	r0, 80a023c <_ZN6ThreadD1Ev+0x30>
      operator()(_Tp* __ptr) const
 80a0238:	f7ff ff79 	bl	80a012e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
	if (__ptr != nullptr)
 80a023c:	6820      	ldr	r0, [r4, #0]
 80a023e:	b108      	cbz	r0, 80a0244 <_ZN6ThreadD1Ev+0x38>
      operator()(_Tp* __ptr) const
 80a0240:	f7ff ff75 	bl	80a012e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
 80a0244:	4620      	mov	r0, r4
 80a0246:	bd10      	pop	{r4, pc}

080a0248 <_ZN14MessageManagerC1Ev>:
#include "FrameManager.cpp"

class MessageManager {
 80a0248:	b510      	push	{r4, lr}
 80a024a:	2244      	movs	r2, #68	; 0x44
 80a024c:	2100      	movs	r1, #0
 80a024e:	4604      	mov	r4, r0
 80a0250:	f001 fd62 	bl	80a1d18 <memset>
    uint8_t* message;
    uint8_t crc16[2];
    bool crcCorrect = false;
};

class FrameManager {
 80a0254:	f44f 7380 	mov.w	r3, #256	; 0x100
struct frame {
 80a0258:	f647 6255 	movw	r2, #32341	; 0x7e55
class FrameManager {
 80a025c:	8023      	strh	r3, [r4, #0]
 80a025e:	2300      	movs	r3, #0
struct frame {
 80a0260:	61e2      	str	r2, [r4, #28]
 80a0262:	62a2      	str	r2, [r4, #40]	; 0x28
class FrameManager {
 80a0264:	4a08      	ldr	r2, [pc, #32]	; (80a0288 <_ZN14MessageManagerC1Ev+0x40>)
 80a0266:	7623      	strb	r3, [r4, #24]
struct frame {
 80a0268:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 80a026c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
class FrameManager {
 80a0270:	86a3      	strh	r3, [r4, #52]	; 0x34
 80a0272:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80a0276:	ca07      	ldmia	r2, {r0, r1, r2}
 80a0278:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a027c:	2301      	movs	r3, #1
 80a027e:	4620      	mov	r0, r4
 80a0280:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 80a0284:	bd10      	pop	{r4, pc}
 80a0286:	bf00      	nop
 80a0288:	080a1f0c 	.word	0x080a1f0c

080a028c <setup>:
int outputClockPeriod = 500;

system_tick_t lastThreadTime = 0;
system_tick_t lastMessageTime = 0;

void setup() {
 80a028c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	Serial.begin(9600);

    pinMode(outputPin, OUTPUT);
 80a0290:	4c33      	ldr	r4, [pc, #204]	; (80a0360 <setup+0xd4>)
void setup() {
 80a0292:	b097      	sub	sp, #92	; 0x5c
	Serial.begin(9600);
 80a0294:	f000 fe3e 	bl	80a0f14 <_Z16_fetch_usbserialv>
    pinMode(inputPin, INPUT);
 80a0298:	4d32      	ldr	r5, [pc, #200]	; (80a0364 <setup+0xd8>)
	Serial.begin(9600);
 80a029a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a029e:	f000 fe1b 	bl	80a0ed8 <_ZN9USBSerial5beginEl>
    pinMode(outputPin, OUTPUT);
 80a02a2:	8820      	ldrh	r0, [r4, #0]
 80a02a4:	2101      	movs	r1, #1
 80a02a6:	f001 f895 	bl	80a13d4 <pinMode>
    pinMode(inputPin, INPUT);
 80a02aa:	8828      	ldrh	r0, [r5, #0]
 80a02ac:	2100      	movs	r1, #0
 80a02ae:	f001 f891 	bl	80a13d4 <pinMode>

    digitalWrite(outputPin, LOW);
 80a02b2:	8820      	ldrh	r0, [r4, #0]

    attachInterrupt(inputPin, inputEvent, CHANGE);
 80a02b4:	2400      	movs	r4, #0
    digitalWrite(outputPin, LOW);
 80a02b6:	2100      	movs	r1, #0
 80a02b8:	f001 f89d 	bl	80a13f6 <digitalWrite>
    attachInterrupt(inputPin, inputEvent, CHANGE);
 80a02bc:	9400      	str	r4, [sp, #0]
 80a02be:	f04f 33ff 	mov.w	r3, #4294967295
 80a02c2:	4622      	mov	r2, r4
 80a02c4:	4928      	ldr	r1, [pc, #160]	; (80a0368 <setup+0xdc>)
 80a02c6:	8828      	ldrh	r0, [r5, #0]
 80a02c8:	f000 fe8c 	bl	80a0fe4 <_Z15attachInterrupttPFvvE13InterruptModeah>
    CurrentInputState = initial;
 80a02cc:	4b27      	ldr	r3, [pc, #156]	; (80a036c <setup+0xe0>)

    msgManager = MessageManager();
 80a02ce:	224c      	movs	r2, #76	; 0x4c
 80a02d0:	4621      	mov	r1, r4
 80a02d2:	a803      	add	r0, sp, #12
    CurrentInputState = initial;
 80a02d4:	701c      	strb	r4, [r3, #0]
    msgManager = MessageManager();
 80a02d6:	f001 fd1f 	bl	80a1d18 <memset>
 80a02da:	a803      	add	r0, sp, #12
 80a02dc:	f7ff ffb4 	bl	80a0248 <_ZN14MessageManagerC1Ev>
 80a02e0:	2249      	movs	r2, #73	; 0x49
 80a02e2:	a903      	add	r1, sp, #12
 80a02e4:	4822      	ldr	r0, [pc, #136]	; (80a0370 <setup+0xe4>)
 80a02e6:	f001 fd09 	bl	80a1cfc <memcpy>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a02ea:	4620      	mov	r0, r4
 80a02ec:	f000 f9ce 	bl	80a068c <hal_timer_millis>
        while (_while() && !_condition()) {
 80a02f0:	f247 582f 	movw	r8, #29999	; 0x752f
        return hal_timer_millis(nullptr);
 80a02f4:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
 80a02f6:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
 80a02fa:	2000      	movs	r0, #0
 80a02fc:	f000 f9c6 	bl	80a068c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80a0300:	1b46      	subs	r6, r0, r5
 80a0302:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
 80a0306:	45b9      	cmp	r9, r7
 80a0308:	bf08      	it	eq
 80a030a:	45b0      	cmpeq	r8, r6
 80a030c:	d307      	bcc.n	80a031e <setup+0x92>

    waitFor(Serial.isConnected, 30000);
 80a030e:	f000 fe01 	bl	80a0f14 <_Z16_fetch_usbserialv>
 80a0312:	f000 fde5 	bl	80a0ee0 <_ZN9USBSerial11isConnectedEv>
 80a0316:	b910      	cbnz	r0, 80a031e <setup+0x92>
            spark_process();
 80a0318:	f000 fb56 	bl	80a09c8 <spark_process>
        while (_while() && !_condition()) {
 80a031c:	e7ed      	b.n	80a02fa <setup+0x6e>
 80a031e:	f000 fdf9 	bl	80a0f14 <_Z16_fetch_usbserialv>
 80a0322:	f000 fddd 	bl	80a0ee0 <_ZN9USBSerial11isConnectedEv>
    Serial.println("Serial connected: starting");
 80a0326:	f000 fdf5 	bl	80a0f14 <_Z16_fetch_usbserialv>
 80a032a:	4912      	ldr	r1, [pc, #72]	; (80a0374 <setup+0xe8>)
 80a032c:	f000 fbf5 	bl	80a0b1a <_ZN5Print7printlnEPKc>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80a0330:	4b11      	ldr	r3, [pc, #68]	; (80a0378 <setup+0xec>)
    Thread thread("outputThread", outputThread);
 80a0332:	4912      	ldr	r1, [pc, #72]	; (80a037c <setup+0xf0>)
 80a0334:	9303      	str	r3, [sp, #12]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0336:	4b12      	ldr	r3, [pc, #72]	; (80a0380 <setup+0xf4>)
 80a0338:	aa03      	add	r2, sp, #12
 80a033a:	9306      	str	r3, [sp, #24]
	    _M_manager = &_My_handler::_M_manager;
 80a033c:	4b11      	ldr	r3, [pc, #68]	; (80a0384 <setup+0xf8>)
 80a033e:	a802      	add	r0, sp, #8
 80a0340:	9305      	str	r3, [sp, #20]
 80a0342:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80a0346:	9300      	str	r3, [sp, #0]
 80a0348:	2302      	movs	r3, #2
 80a034a:	f7ff ff01 	bl	80a0150 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
    class function<_Res(_ArgTypes...)>
 80a034e:	a803      	add	r0, sp, #12
 80a0350:	f7ff fee4 	bl	80a011c <_ZNSt14_Function_baseD1Ev>
 80a0354:	a802      	add	r0, sp, #8
 80a0356:	f7ff ff59 	bl	80a020c <_ZN6ThreadD1Ev>
}
 80a035a:	b017      	add	sp, #92	; 0x5c
 80a035c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0360:	20000010 	.word	0x20000010
 80a0364:	20000008 	.word	0x20000008
 80a0368:	080a03c1 	.word	0x080a03c1
 80a036c:	20000081 	.word	0x20000081
 80a0370:	2000008c 	.word	0x2000008c
 80a0374:	080a1d94 	.word	0x080a1d94
 80a0378:	080a058d 	.word	0x080a058d
 80a037c:	080a1daf 	.word	0x080a1daf
 80a0380:	080a00b7 	.word	0x080a00b7
 80a0384:	080a00bb 	.word	0x080a00bb

080a0388 <loop>:

    // Call messages to send here, split by long delays?
    // char* message1 = [H, e, l, l, o, , W, o, r, l, d, !];
    // ex. msgManager.sendMessage(message1);
    // delay(10000); OR os_thread_delay_until(&lastMessageTime, 10000)
}
 80a0388:	4770      	bx	lr
	...

080a038c <_Z16changeInputState10InputState>:
    }
};

// Function used to change state and perform necessary actions right away (like outputing)
void changeInputState(InputState newInputState) {
    switch (newInputState) {
 80a038c:	2801      	cmp	r0, #1
void changeInputState(InputState newInputState) {
 80a038e:	b510      	push	{r4, lr}
 80a0390:	4604      	mov	r4, r0
    switch (newInputState) {
 80a0392:	d004      	beq.n	80a039e <_Z16changeInputState10InputState+0x12>
 80a0394:	2803      	cmp	r0, #3
 80a0396:	d008      	beq.n	80a03aa <_Z16changeInputState10InputState+0x1e>
            // Register that a 1 has been read
            Serial.println("READ: 1");
            //msgManager.frameManager.receiveBit(0b1);
            break;
    }
    CurrentInputState = newInputState; // Change to new state for next event
 80a0398:	4b06      	ldr	r3, [pc, #24]	; (80a03b4 <_Z16changeInputState10InputState+0x28>)
 80a039a:	701c      	strb	r4, [r3, #0]
}
 80a039c:	bd10      	pop	{r4, pc}
            Serial.println("READ: 0");
 80a039e:	f000 fdb9 	bl	80a0f14 <_Z16_fetch_usbserialv>
 80a03a2:	4905      	ldr	r1, [pc, #20]	; (80a03b8 <_Z16changeInputState10InputState+0x2c>)
            Serial.println("READ: 1");
 80a03a4:	f000 fbb9 	bl	80a0b1a <_ZN5Print7printlnEPKc>
            break;
 80a03a8:	e7f6      	b.n	80a0398 <_Z16changeInputState10InputState+0xc>
            Serial.println("READ: 1");
 80a03aa:	f000 fdb3 	bl	80a0f14 <_Z16_fetch_usbserialv>
 80a03ae:	4903      	ldr	r1, [pc, #12]	; (80a03bc <_Z16changeInputState10InputState+0x30>)
 80a03b0:	e7f8      	b.n	80a03a4 <_Z16changeInputState10InputState+0x18>
 80a03b2:	bf00      	nop
 80a03b4:	20000081 	.word	0x20000081
 80a03b8:	080a1dbc 	.word	0x080a1dbc
 80a03bc:	080a1dc4 	.word	0x080a1dc4

080a03c0 <_Z10inputEventv>:

void inputEvent() {
 80a03c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a03c4:	f000 f95a 	bl	80a067c <HAL_Timer_Get_Milli_Seconds>
    //     }
    //     return;
    // }
    //----------

    int duration = millis() - lastChangeTime;
 80a03c8:	4e4d      	ldr	r6, [pc, #308]	; (80a0500 <_Z10inputEventv+0x140>)
void inputEvent() {
 80a03ca:	2400      	movs	r4, #0
    int duration = millis() - lastChangeTime;
 80a03cc:	6833      	ldr	r3, [r6, #0]
 80a03ce:	1ac5      	subs	r5, r0, r3
 80a03d0:	f000 f954 	bl	80a067c <HAL_Timer_Get_Milli_Seconds>
    lastChangeTime = millis();

    // If 80% higher than one clock period: must be two periods (AKA: long period)
    int longPeriodMin = inputClockPeriod * 1.8;
 80a03d4:	4b4b      	ldr	r3, [pc, #300]	; (80a0504 <_Z10inputEventv+0x144>)
    lastChangeTime = millis();
 80a03d6:	6030      	str	r0, [r6, #0]
    int longPeriodMin = inputClockPeriod * 1.8;
 80a03d8:	6818      	ldr	r0, [r3, #0]
 80a03da:	f001 f9dd 	bl	80a1798 <__aeabi_i2d>
    int longPeriodMax = inputClockPeriod * 2.2;
    int shortPeriodMin = inputClockPeriod * 0.8;
 80a03de:	a342      	add	r3, pc, #264	; (adr r3, 80a04e8 <_Z10inputEventv+0x128>)
 80a03e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    int longPeriodMin = inputClockPeriod * 1.8;
 80a03e4:	4680      	mov	r8, r0
 80a03e6:	4689      	mov	r9, r1
    int shortPeriodMin = inputClockPeriod * 0.8;
 80a03e8:	f001 fa40 	bl	80a186c <__aeabi_dmul>
 80a03ec:	f001 fc50 	bl	80a1c90 <__aeabi_d2iz>

    if (duration < shortPeriodMin) {
 80a03f0:	4285      	cmp	r5, r0
 80a03f2:	db54      	blt.n	80a049e <_Z10inputEventv+0xde>
    int longPeriodMax = inputClockPeriod * 2.2;
 80a03f4:	a33e      	add	r3, pc, #248	; (adr r3, 80a04f0 <_Z10inputEventv+0x130>)
 80a03f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a03fa:	4640      	mov	r0, r8
 80a03fc:	4649      	mov	r1, r9
 80a03fe:	f001 fa35 	bl	80a186c <__aeabi_dmul>
 80a0402:	f001 fc45 	bl	80a1c90 <__aeabi_d2iz>
        return;
    }

    // Determine newStateDuration (time since last change event)
    StateDuration newStateDuration;
    if (duration > longPeriodMax) {
 80a0406:	4285      	cmp	r5, r0
    int longPeriodMax = inputClockPeriod * 2.2;
 80a0408:	4607      	mov	r7, r0
    if (duration > longPeriodMax) {
 80a040a:	4e3f      	ldr	r6, [pc, #252]	; (80a0508 <_Z10inputEventv+0x148>)
 80a040c:	dd24      	ble.n	80a0458 <_Z10inputEventv+0x98>
        newStateDuration = veryLongPeriod;

        Serial.println("Setting CurrentInputState to 'initial' because long period detected");
 80a040e:	f000 fd81 	bl	80a0f14 <_Z16_fetch_usbserialv>
 80a0412:	493e      	ldr	r1, [pc, #248]	; (80a050c <_Z10inputEventv+0x14c>)
 80a0414:	f000 fb81 	bl	80a0b1a <_ZN5Print7printlnEPKc>
        CurrentInputState = initial;
 80a0418:	7034      	strb	r4, [r6, #0]
        newStateDuration = veryLongPeriod;
 80a041a:	2402      	movs	r4, #2
    else if (duration >= shortPeriod && duration < longPeriodMin) {
        newStateDuration = shortPeriod;
    }
    
    // Printing (debug)
    Serial.printlnf("Read %s impulse duration: %d ms -> #%d (CurrentInputState: %d)", inputCurrentStateHigh ? "HIGH" : "LOW", duration, newStateDuration, CurrentInputState);
 80a041c:	4f3c      	ldr	r7, [pc, #240]	; (80a0510 <_Z10inputEventv+0x150>)
 80a041e:	f000 fd79 	bl	80a0f14 <_Z16_fetch_usbserialv>
 80a0422:	f897 c000 	ldrb.w	ip, [r7]
 80a0426:	7833      	ldrb	r3, [r6, #0]
 80a0428:	493a      	ldr	r1, [pc, #232]	; (80a0514 <_Z10inputEventv+0x154>)
 80a042a:	4a3b      	ldr	r2, [pc, #236]	; (80a0518 <_Z10inputEventv+0x158>)
 80a042c:	e9cd 4300 	strd	r4, r3, [sp]
 80a0430:	f1bc 0f00 	cmp.w	ip, #0
 80a0434:	bf08      	it	eq
 80a0436:	460a      	moveq	r2, r1
 80a0438:	462b      	mov	r3, r5
 80a043a:	4938      	ldr	r1, [pc, #224]	; (80a051c <_Z10inputEventv+0x15c>)
 80a043c:	f7ff fe60 	bl	80a0100 <_ZN5Print8printlnfEPKcz>
    inputCurrentStateHigh = !inputCurrentStateHigh;
 80a0440:	783b      	ldrb	r3, [r7, #0]
 80a0442:	f083 0301 	eor.w	r3, r3, #1
 80a0446:	703b      	strb	r3, [r7, #0]

    // STATE MACHINE: Decode Manchester
    switch (CurrentInputState) {
 80a0448:	7833      	ldrb	r3, [r6, #0]
 80a044a:	2b04      	cmp	r3, #4
 80a044c:	d827      	bhi.n	80a049e <_Z10inputEventv+0xde>
 80a044e:	e8df f003 	tbb	[pc, r3]
 80a0452:	2312      	.short	0x2312
 80a0454:	362d      	.short	0x362d
 80a0456:	3f          	.byte	0x3f
 80a0457:	00          	.byte	0x00
    int longPeriodMin = inputClockPeriod * 1.8;
 80a0458:	a327      	add	r3, pc, #156	; (adr r3, 80a04f8 <_Z10inputEventv+0x138>)
 80a045a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a045e:	4640      	mov	r0, r8
 80a0460:	4649      	mov	r1, r9
 80a0462:	f001 fa03 	bl	80a186c <__aeabi_dmul>
 80a0466:	f001 fc13 	bl	80a1c90 <__aeabi_d2iz>
    else if (duration >= longPeriodMin && duration < longPeriodMax) {
 80a046a:	4285      	cmp	r5, r0
 80a046c:	dbd6      	blt.n	80a041c <_Z10inputEventv+0x5c>
        newStateDuration = longPeriod;
 80a046e:	42bd      	cmp	r5, r7
 80a0470:	bfb8      	it	lt
 80a0472:	2401      	movlt	r4, #1
 80a0474:	e7d2      	b.n	80a041c <_Z10inputEventv+0x5c>
        case initial:
            if (newStateDuration == shortPeriod || newStateDuration == veryLongPeriod) {
 80a0476:	f014 0ffd 	tst.w	r4, #253	; 0xfd
 80a047a:	d105      	bne.n	80a0488 <_Z10inputEventv+0xc8>
                changeInputState(output0);
 80a047c:	2001      	movs	r0, #1
                Serial.printlnf("ERROR: expected shortPeriod in wait state got #%d", newStateDuration);
            }
            changeInputState(output1);
            break;
    }
}
 80a047e:	b003      	add	sp, #12
 80a0480:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
               changeInputState(output1);
 80a0484:	f7ff bf82 	b.w	80a038c <_Z16changeInputState10InputState>
                Serial.println("ERROR: initial state got longPeriod");
 80a0488:	f000 fd44 	bl	80a0f14 <_Z16_fetch_usbserialv>
 80a048c:	4924      	ldr	r1, [pc, #144]	; (80a0520 <_Z10inputEventv+0x160>)
}
 80a048e:	b003      	add	sp, #12
 80a0490:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                Serial.println("UNDEFINED behaviour for veryLongPeriod in inputState 'output1'");
 80a0494:	f000 bb41 	b.w	80a0b1a <_ZN5Print7printlnEPKc>
            if (newStateDuration == shortPeriod) {
 80a0498:	b924      	cbnz	r4, 80a04a4 <_Z10inputEventv+0xe4>
    CurrentInputState = newInputState; // Change to new state for next event
 80a049a:	2302      	movs	r3, #2
 80a049c:	7033      	strb	r3, [r6, #0]
}
 80a049e:	b003      	add	sp, #12
 80a04a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            else if (newStateDuration == longPeriod) {
 80a04a4:	2c01      	cmp	r4, #1
 80a04a6:	d1fa      	bne.n	80a049e <_Z10inputEventv+0xde>
               changeInputState(output1);
 80a04a8:	2003      	movs	r0, #3
 80a04aa:	e7e8      	b.n	80a047e <_Z10inputEventv+0xbe>
            if (newStateDuration != shortPeriod) {
 80a04ac:	2c00      	cmp	r4, #0
 80a04ae:	d0e5      	beq.n	80a047c <_Z10inputEventv+0xbc>
                Serial.printlnf("ERROR: expected shortPeriod in wait state got #%d", newStateDuration);
 80a04b0:	f000 fd30 	bl	80a0f14 <_Z16_fetch_usbserialv>
 80a04b4:	4622      	mov	r2, r4
 80a04b6:	491b      	ldr	r1, [pc, #108]	; (80a0524 <_Z10inputEventv+0x164>)
 80a04b8:	f7ff fe22 	bl	80a0100 <_ZN5Print8printlnfEPKcz>
 80a04bc:	e7de      	b.n	80a047c <_Z10inputEventv+0xbc>
            if (newStateDuration == shortPeriod) {
 80a04be:	b90c      	cbnz	r4, 80a04c4 <_Z10inputEventv+0x104>
    CurrentInputState = newInputState; // Change to new state for next event
 80a04c0:	2304      	movs	r3, #4
 80a04c2:	e7eb      	b.n	80a049c <_Z10inputEventv+0xdc>
            else if (newStateDuration == longPeriod) {
 80a04c4:	2c01      	cmp	r4, #1
 80a04c6:	d0d9      	beq.n	80a047c <_Z10inputEventv+0xbc>
                Serial.println("UNDEFINED behaviour for veryLongPeriod in inputState 'output1'");
 80a04c8:	f000 fd24 	bl	80a0f14 <_Z16_fetch_usbserialv>
 80a04cc:	4916      	ldr	r1, [pc, #88]	; (80a0528 <_Z10inputEventv+0x168>)
 80a04ce:	e7de      	b.n	80a048e <_Z10inputEventv+0xce>
            if (newStateDuration != shortPeriod) {
 80a04d0:	2c00      	cmp	r4, #0
 80a04d2:	d0e9      	beq.n	80a04a8 <_Z10inputEventv+0xe8>
                Serial.printlnf("ERROR: expected shortPeriod in wait state got #%d", newStateDuration);
 80a04d4:	f000 fd1e 	bl	80a0f14 <_Z16_fetch_usbserialv>
 80a04d8:	4622      	mov	r2, r4
 80a04da:	4912      	ldr	r1, [pc, #72]	; (80a0524 <_Z10inputEventv+0x164>)
 80a04dc:	f7ff fe10 	bl	80a0100 <_ZN5Print8printlnfEPKcz>
 80a04e0:	e7e2      	b.n	80a04a8 <_Z10inputEventv+0xe8>
 80a04e2:	bf00      	nop
 80a04e4:	f3af 8000 	nop.w
 80a04e8:	9999999a 	.word	0x9999999a
 80a04ec:	3fe99999 	.word	0x3fe99999
 80a04f0:	9999999a 	.word	0x9999999a
 80a04f4:	40019999 	.word	0x40019999
 80a04f8:	cccccccd 	.word	0xcccccccd
 80a04fc:	3ffccccc 	.word	0x3ffccccc
 80a0500:	20000084 	.word	0x20000084
 80a0504:	20000004 	.word	0x20000004
 80a0508:	20000081 	.word	0x20000081
 80a050c:	080a1dd5 	.word	0x080a1dd5
 80a0510:	20000082 	.word	0x20000082
 80a0514:	080a1dd1 	.word	0x080a1dd1
 80a0518:	080a1dcc 	.word	0x080a1dcc
 80a051c:	080a1e19 	.word	0x080a1e19
 80a0520:	080a1e58 	.word	0x080a1e58
 80a0524:	080a1e7c 	.word	0x080a1e7c
 80a0528:	080a1eae 	.word	0x080a1eae

080a052c <_Z6output8PinState>:
// ----------
// HANDLE OUTPUT 
// ----------


void output(PinState level) {
 80a052c:	b508      	push	{r3, lr}
    digitalWrite(outputPin, level);
 80a052e:	4b06      	ldr	r3, [pc, #24]	; (80a0548 <_Z6output8PinState+0x1c>)
void output(PinState level) {
 80a0530:	4601      	mov	r1, r0
    digitalWrite(outputPin, level);
 80a0532:	8818      	ldrh	r0, [r3, #0]
 80a0534:	f000 ff5f 	bl	80a13f6 <digitalWrite>
    os_thread_delay_until(&lastThreadTime, outputClockPeriod);
 80a0538:	4b04      	ldr	r3, [pc, #16]	; (80a054c <_Z6output8PinState+0x20>)
 80a053a:	4805      	ldr	r0, [pc, #20]	; (80a0550 <_Z6output8PinState+0x24>)
 80a053c:	6819      	ldr	r1, [r3, #0]
}
 80a053e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_thread_delay_until(&lastThreadTime, outputClockPeriod);
 80a0542:	f000 b8cb 	b.w	80a06dc <os_thread_delay_until>
 80a0546:	bf00      	nop
 80a0548:	20000010 	.word	0x20000010
 80a054c:	2000000c 	.word	0x2000000c
 80a0550:	20000088 	.word	0x20000088

080a0554 <_Z18sendBitsManchesterPbi>:

void sendBitsManchester(bool bits[], int bitCount) {
 80a0554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0556:	4605      	mov	r5, r0
 80a0558:	460e      	mov	r6, r1
    for (int i = 0; i < bitCount; i++) {
 80a055a:	2400      	movs	r4, #0
        if (bits[i] == BIT1) {
 80a055c:	4f0a      	ldr	r7, [pc, #40]	; (80a0588 <_Z18sendBitsManchesterPbi+0x34>)
    for (int i = 0; i < bitCount; i++) {
 80a055e:	42b4      	cmp	r4, r6
 80a0560:	da10      	bge.n	80a0584 <_Z18sendBitsManchesterPbi+0x30>
        if (bits[i] == BIT1) {
 80a0562:	5d2a      	ldrb	r2, [r5, r4]
 80a0564:	783b      	ldrb	r3, [r7, #0]
 80a0566:	429a      	cmp	r2, r3
 80a0568:	d107      	bne.n	80a057a <_Z18sendBitsManchesterPbi+0x26>
            // Send 1 in Manchester
            //Serial.println("SEND: 1");
            output(HIGH);
 80a056a:	2001      	movs	r0, #1
 80a056c:	f7ff ffde 	bl	80a052c <_Z6output8PinState>
            output(LOW);
 80a0570:	2000      	movs	r0, #0
        }
        else {
            // Send 0 in Manchester
            //Serial.println("SEND: 0");
            output(LOW);
            output(HIGH);
 80a0572:	f7ff ffdb 	bl	80a052c <_Z6output8PinState>
    for (int i = 0; i < bitCount; i++) {
 80a0576:	3401      	adds	r4, #1
 80a0578:	e7f1      	b.n	80a055e <_Z18sendBitsManchesterPbi+0xa>
            output(LOW);
 80a057a:	2000      	movs	r0, #0
 80a057c:	f7ff ffd6 	bl	80a052c <_Z6output8PinState>
            output(HIGH);
 80a0580:	2001      	movs	r0, #1
 80a0582:	e7f6      	b.n	80a0572 <_Z18sendBitsManchesterPbi+0x1e>
        }
    }
}
 80a0584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0586:	bf00      	nop
 80a0588:	20000000 	.word	0x20000000

080a058c <_Z12outputThreadv>:

void outputThread() {
 80a058c:	b507      	push	{r0, r1, r2, lr}
    Serial.println("Starting output loop");
 80a058e:	f000 fcc1 	bl	80a0f14 <_Z16_fetch_usbserialv>
 80a0592:	4913      	ldr	r1, [pc, #76]	; (80a05e0 <_Z12outputThreadv+0x54>)
 80a0594:	f000 fac1 	bl	80a0b1a <_ZN5Print7printlnEPKc>
        // Call messages to send here, split by long delays?
        // uint8_t message1[12] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd','!'};
        // msgManager.sendMessage(message1);
        // os_thread_delay_until(&lastMessageTime, 10000);

        bool bitsToSend[] = {BIT0, BIT1, BIT0, BIT1, BIT0, BIT1, BIT1, BIT1};
 80a0598:	4e12      	ldr	r6, [pc, #72]	; (80a05e4 <_Z12outputThreadv+0x58>)
 80a059a:	4d13      	ldr	r5, [pc, #76]	; (80a05e8 <_Z12outputThreadv+0x5c>)
        sendBitsManchester(bitsToSend, 8);
        Serial.println("---------");
 80a059c:	4c13      	ldr	r4, [pc, #76]	; (80a05ec <_Z12outputThreadv+0x60>)
        bool bitsToSend[] = {BIT0, BIT1, BIT0, BIT1, BIT0, BIT1, BIT1, BIT1};
 80a059e:	782b      	ldrb	r3, [r5, #0]
 80a05a0:	7832      	ldrb	r2, [r6, #0]
        sendBitsManchester(bitsToSend, 8);
 80a05a2:	2108      	movs	r1, #8
 80a05a4:	4668      	mov	r0, sp
        bool bitsToSend[] = {BIT0, BIT1, BIT0, BIT1, BIT0, BIT1, BIT1, BIT1};
 80a05a6:	f88d 2000 	strb.w	r2, [sp]
 80a05aa:	f88d 3001 	strb.w	r3, [sp, #1]
 80a05ae:	f88d 2002 	strb.w	r2, [sp, #2]
 80a05b2:	f88d 3003 	strb.w	r3, [sp, #3]
 80a05b6:	f88d 2004 	strb.w	r2, [sp, #4]
 80a05ba:	f88d 3005 	strb.w	r3, [sp, #5]
 80a05be:	f88d 3006 	strb.w	r3, [sp, #6]
 80a05c2:	f88d 3007 	strb.w	r3, [sp, #7]
        sendBitsManchester(bitsToSend, 8);
 80a05c6:	f7ff ffc5 	bl	80a0554 <_Z18sendBitsManchesterPbi>
        Serial.println("---------");
 80a05ca:	f000 fca3 	bl	80a0f14 <_Z16_fetch_usbserialv>
 80a05ce:	4621      	mov	r1, r4
 80a05d0:	f000 faa3 	bl	80a0b1a <_ZN5Print7printlnEPKc>
        os_thread_delay_until(&lastThreadTime, 2000);
 80a05d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80a05d8:	4805      	ldr	r0, [pc, #20]	; (80a05f0 <_Z12outputThreadv+0x64>)
 80a05da:	f000 f87f 	bl	80a06dc <os_thread_delay_until>
    while(true) {
 80a05de:	e7de      	b.n	80a059e <_Z12outputThreadv+0x12>
 80a05e0:	080a1eed 	.word	0x080a1eed
 80a05e4:	20000080 	.word	0x20000080
 80a05e8:	20000000 	.word	0x20000000
 80a05ec:	080a1f02 	.word	0x080a1f02
 80a05f0:	20000088 	.word	0x20000088

080a05f4 <_GLOBAL__sub_I_outputPin>:
	}
}
 80a05f4:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
 80a05f6:	2100      	movs	r1, #0
 80a05f8:	2001      	movs	r0, #1
 80a05fa:	f000 f969 	bl	80a08d0 <system_thread_set_state>
MessageManager msgManager;
 80a05fe:	4802      	ldr	r0, [pc, #8]	; (80a0608 <_GLOBAL__sub_I_outputPin+0x14>)
 80a0600:	f7ff fe22 	bl	80a0248 <_ZN14MessageManagerC1Ev>
}
 80a0604:	bd08      	pop	{r3, pc}
 80a0606:	bf00      	nop
 80a0608:	2000008c 	.word	0x2000008c

080a060c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a060c:	b508      	push	{r3, lr}
 80a060e:	4b02      	ldr	r3, [pc, #8]	; (80a0618 <HAL_Pin_Mode+0xc>)
 80a0610:	681b      	ldr	r3, [r3, #0]
 80a0612:	689b      	ldr	r3, [r3, #8]
 80a0614:	9301      	str	r3, [sp, #4]
 80a0616:	bd08      	pop	{r3, pc}
 80a0618:	080601b0 	.word	0x080601b0

080a061c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a061c:	b508      	push	{r3, lr}
 80a061e:	4b02      	ldr	r3, [pc, #8]	; (80a0628 <HAL_Get_Pin_Mode+0xc>)
 80a0620:	681b      	ldr	r3, [r3, #0]
 80a0622:	68db      	ldr	r3, [r3, #12]
 80a0624:	9301      	str	r3, [sp, #4]
 80a0626:	bd08      	pop	{r3, pc}
 80a0628:	080601b0 	.word	0x080601b0

080a062c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a062c:	b508      	push	{r3, lr}
 80a062e:	4b02      	ldr	r3, [pc, #8]	; (80a0638 <HAL_GPIO_Write+0xc>)
 80a0630:	681b      	ldr	r3, [r3, #0]
 80a0632:	691b      	ldr	r3, [r3, #16]
 80a0634:	9301      	str	r3, [sp, #4]
 80a0636:	bd08      	pop	{r3, pc}
 80a0638:	080601b0 	.word	0x080601b0

080a063c <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a063c:	b508      	push	{r3, lr}
 80a063e:	4b02      	ldr	r3, [pc, #8]	; (80a0648 <HAL_Interrupts_Attach+0xc>)
 80a0640:	681b      	ldr	r3, [r3, #0]
 80a0642:	699b      	ldr	r3, [r3, #24]
 80a0644:	9301      	str	r3, [sp, #4]
 80a0646:	bd08      	pop	{r3, pc}
 80a0648:	080601b0 	.word	0x080601b0

080a064c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80a064c:	b508      	push	{r3, lr}
 80a064e:	4b02      	ldr	r3, [pc, #8]	; (80a0658 <HAL_Interrupts_Detach+0xc>)
 80a0650:	681b      	ldr	r3, [r3, #0]
 80a0652:	69db      	ldr	r3, [r3, #28]
 80a0654:	9301      	str	r3, [sp, #4]
 80a0656:	bd08      	pop	{r3, pc}
 80a0658:	080601b0 	.word	0x080601b0

080a065c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a065c:	b508      	push	{r3, lr}
 80a065e:	4b02      	ldr	r3, [pc, #8]	; (80a0668 <HAL_RNG_GetRandomNumber+0xc>)
 80a0660:	681b      	ldr	r3, [r3, #0]
 80a0662:	685b      	ldr	r3, [r3, #4]
 80a0664:	9301      	str	r3, [sp, #4]
 80a0666:	bd08      	pop	{r3, pc}
 80a0668:	0806019c 	.word	0x0806019c

080a066c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 80a066c:	b508      	push	{r3, lr}
 80a066e:	4b02      	ldr	r3, [pc, #8]	; (80a0678 <HAL_Delay_Milliseconds+0xc>)
 80a0670:	681b      	ldr	r3, [r3, #0]
 80a0672:	689b      	ldr	r3, [r3, #8]
 80a0674:	9301      	str	r3, [sp, #4]
 80a0676:	bd08      	pop	{r3, pc}
 80a0678:	0806019c 	.word	0x0806019c

080a067c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a067c:	b508      	push	{r3, lr}
 80a067e:	4b02      	ldr	r3, [pc, #8]	; (80a0688 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0680:	681b      	ldr	r3, [r3, #0]
 80a0682:	695b      	ldr	r3, [r3, #20]
 80a0684:	9301      	str	r3, [sp, #4]
 80a0686:	bd08      	pop	{r3, pc}
 80a0688:	0806019c 	.word	0x0806019c

080a068c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80a068c:	b508      	push	{r3, lr}
 80a068e:	4b02      	ldr	r3, [pc, #8]	; (80a0698 <hal_timer_millis+0xc>)
 80a0690:	681b      	ldr	r3, [r3, #0]
 80a0692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0694:	9301      	str	r3, [sp, #4]
 80a0696:	bd08      	pop	{r3, pc}
 80a0698:	0806019c 	.word	0x0806019c

080a069c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 80a069c:	b508      	push	{r3, lr}
 80a069e:	4b02      	ldr	r3, [pc, #8]	; (80a06a8 <os_thread_create+0xc>)
 80a06a0:	681b      	ldr	r3, [r3, #0]
 80a06a2:	685b      	ldr	r3, [r3, #4]
 80a06a4:	9301      	str	r3, [sp, #4]
 80a06a6:	bd08      	pop	{r3, pc}
 80a06a8:	080601d0 	.word	0x080601d0

080a06ac <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 80a06ac:	b508      	push	{r3, lr}
 80a06ae:	4b02      	ldr	r3, [pc, #8]	; (80a06b8 <os_thread_is_current+0xc>)
 80a06b0:	681b      	ldr	r3, [r3, #0]
 80a06b2:	689b      	ldr	r3, [r3, #8]
 80a06b4:	9301      	str	r3, [sp, #4]
 80a06b6:	bd08      	pop	{r3, pc}
 80a06b8:	080601d0 	.word	0x080601d0

080a06bc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 80a06bc:	b508      	push	{r3, lr}
 80a06be:	4b02      	ldr	r3, [pc, #8]	; (80a06c8 <os_thread_join+0xc>)
 80a06c0:	681b      	ldr	r3, [r3, #0]
 80a06c2:	691b      	ldr	r3, [r3, #16]
 80a06c4:	9301      	str	r3, [sp, #4]
 80a06c6:	bd08      	pop	{r3, pc}
 80a06c8:	080601d0 	.word	0x080601d0

080a06cc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 80a06cc:	b508      	push	{r3, lr}
 80a06ce:	4b02      	ldr	r3, [pc, #8]	; (80a06d8 <os_thread_cleanup+0xc>)
 80a06d0:	681b      	ldr	r3, [r3, #0]
 80a06d2:	695b      	ldr	r3, [r3, #20]
 80a06d4:	9301      	str	r3, [sp, #4]
 80a06d6:	bd08      	pop	{r3, pc}
 80a06d8:	080601d0 	.word	0x080601d0

080a06dc <os_thread_delay_until>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
 80a06dc:	b508      	push	{r3, lr}
 80a06de:	4b02      	ldr	r3, [pc, #8]	; (80a06e8 <os_thread_delay_until+0xc>)
 80a06e0:	681b      	ldr	r3, [r3, #0]
 80a06e2:	699b      	ldr	r3, [r3, #24]
 80a06e4:	9301      	str	r3, [sp, #4]
 80a06e6:	bd08      	pop	{r3, pc}
 80a06e8:	080601d0 	.word	0x080601d0

080a06ec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a06ec:	b508      	push	{r3, lr}
 80a06ee:	4b02      	ldr	r3, [pc, #8]	; (80a06f8 <os_mutex_recursive_create+0xc>)
 80a06f0:	681b      	ldr	r3, [r3, #0]
 80a06f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a06f4:	9301      	str	r3, [sp, #4]
 80a06f6:	bd08      	pop	{r3, pc}
 80a06f8:	080601d0 	.word	0x080601d0

080a06fc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a06fc:	b508      	push	{r3, lr}
 80a06fe:	4b02      	ldr	r3, [pc, #8]	; (80a0708 <os_mutex_recursive_destroy+0xc>)
 80a0700:	681b      	ldr	r3, [r3, #0]
 80a0702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0704:	9301      	str	r3, [sp, #4]
 80a0706:	bd08      	pop	{r3, pc}
 80a0708:	080601d0 	.word	0x080601d0

080a070c <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 80a070c:	b508      	push	{r3, lr}
 80a070e:	4b02      	ldr	r3, [pc, #8]	; (80a0718 <os_thread_exit+0xc>)
 80a0710:	681b      	ldr	r3, [r3, #0]
 80a0712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0714:	9301      	str	r3, [sp, #4]
 80a0716:	bd08      	pop	{r3, pc}
 80a0718:	080601d0 	.word	0x080601d0

080a071c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a071c:	b508      	push	{r3, lr}
 80a071e:	4b02      	ldr	r3, [pc, #8]	; (80a0728 <hal_usart_init+0xc>)
 80a0720:	681b      	ldr	r3, [r3, #0]
 80a0722:	699b      	ldr	r3, [r3, #24]
 80a0724:	9301      	str	r3, [sp, #4]
 80a0726:	bd08      	pop	{r3, pc}
 80a0728:	080601c4 	.word	0x080601c4

080a072c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a072c:	b508      	push	{r3, lr}
 80a072e:	4b02      	ldr	r3, [pc, #8]	; (80a0738 <hal_usart_write+0xc>)
 80a0730:	681b      	ldr	r3, [r3, #0]
 80a0732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0734:	9301      	str	r3, [sp, #4]
 80a0736:	bd08      	pop	{r3, pc}
 80a0738:	080601c4 	.word	0x080601c4

080a073c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a073c:	b508      	push	{r3, lr}
 80a073e:	4b02      	ldr	r3, [pc, #8]	; (80a0748 <hal_usart_available+0xc>)
 80a0740:	681b      	ldr	r3, [r3, #0]
 80a0742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0744:	9301      	str	r3, [sp, #4]
 80a0746:	bd08      	pop	{r3, pc}
 80a0748:	080601c4 	.word	0x080601c4

080a074c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a074c:	b508      	push	{r3, lr}
 80a074e:	4b02      	ldr	r3, [pc, #8]	; (80a0758 <hal_usart_read+0xc>)
 80a0750:	681b      	ldr	r3, [r3, #0]
 80a0752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0754:	9301      	str	r3, [sp, #4]
 80a0756:	bd08      	pop	{r3, pc}
 80a0758:	080601c4 	.word	0x080601c4

080a075c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a075c:	b508      	push	{r3, lr}
 80a075e:	4b02      	ldr	r3, [pc, #8]	; (80a0768 <hal_usart_peek+0xc>)
 80a0760:	681b      	ldr	r3, [r3, #0]
 80a0762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0764:	9301      	str	r3, [sp, #4]
 80a0766:	bd08      	pop	{r3, pc}
 80a0768:	080601c4 	.word	0x080601c4

080a076c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a076c:	b508      	push	{r3, lr}
 80a076e:	4b02      	ldr	r3, [pc, #8]	; (80a0778 <hal_usart_flush+0xc>)
 80a0770:	681b      	ldr	r3, [r3, #0]
 80a0772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0774:	9301      	str	r3, [sp, #4]
 80a0776:	bd08      	pop	{r3, pc}
 80a0778:	080601c4 	.word	0x080601c4

080a077c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a077c:	b508      	push	{r3, lr}
 80a077e:	4b02      	ldr	r3, [pc, #8]	; (80a0788 <hal_usart_is_enabled+0xc>)
 80a0780:	681b      	ldr	r3, [r3, #0]
 80a0782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0784:	9301      	str	r3, [sp, #4]
 80a0786:	bd08      	pop	{r3, pc}
 80a0788:	080601c4 	.word	0x080601c4

080a078c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a078c:	b508      	push	{r3, lr}
 80a078e:	4b02      	ldr	r3, [pc, #8]	; (80a0798 <hal_usart_available_data_for_write+0xc>)
 80a0790:	681b      	ldr	r3, [r3, #0]
 80a0792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0794:	9301      	str	r3, [sp, #4]
 80a0796:	bd08      	pop	{r3, pc}
 80a0798:	080601c4 	.word	0x080601c4

080a079c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a079c:	b508      	push	{r3, lr}
 80a079e:	4b02      	ldr	r3, [pc, #8]	; (80a07a8 <hal_i2c_write+0xc>)
 80a07a0:	681b      	ldr	r3, [r3, #0]
 80a07a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a07a4:	9301      	str	r3, [sp, #4]
 80a07a6:	bd08      	pop	{r3, pc}
 80a07a8:	080601ac 	.word	0x080601ac

080a07ac <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a07ac:	b508      	push	{r3, lr}
 80a07ae:	4b02      	ldr	r3, [pc, #8]	; (80a07b8 <hal_i2c_available+0xc>)
 80a07b0:	681b      	ldr	r3, [r3, #0]
 80a07b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a07b4:	9301      	str	r3, [sp, #4]
 80a07b6:	bd08      	pop	{r3, pc}
 80a07b8:	080601ac 	.word	0x080601ac

080a07bc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a07bc:	b508      	push	{r3, lr}
 80a07be:	4b02      	ldr	r3, [pc, #8]	; (80a07c8 <hal_i2c_read+0xc>)
 80a07c0:	681b      	ldr	r3, [r3, #0]
 80a07c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a07c4:	9301      	str	r3, [sp, #4]
 80a07c6:	bd08      	pop	{r3, pc}
 80a07c8:	080601ac 	.word	0x080601ac

080a07cc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a07cc:	b508      	push	{r3, lr}
 80a07ce:	4b02      	ldr	r3, [pc, #8]	; (80a07d8 <hal_i2c_peek+0xc>)
 80a07d0:	681b      	ldr	r3, [r3, #0]
 80a07d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a07d4:	9301      	str	r3, [sp, #4]
 80a07d6:	bd08      	pop	{r3, pc}
 80a07d8:	080601ac 	.word	0x080601ac

080a07dc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a07dc:	b508      	push	{r3, lr}
 80a07de:	4b02      	ldr	r3, [pc, #8]	; (80a07e8 <hal_i2c_flush+0xc>)
 80a07e0:	681b      	ldr	r3, [r3, #0]
 80a07e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a07e4:	9301      	str	r3, [sp, #4]
 80a07e6:	bd08      	pop	{r3, pc}
 80a07e8:	080601ac 	.word	0x080601ac

080a07ec <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a07ec:	b508      	push	{r3, lr}
 80a07ee:	4b02      	ldr	r3, [pc, #8]	; (80a07f8 <hal_i2c_is_enabled+0xc>)
 80a07f0:	681b      	ldr	r3, [r3, #0]
 80a07f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a07f4:	9301      	str	r3, [sp, #4]
 80a07f6:	bd08      	pop	{r3, pc}
 80a07f8:	080601ac 	.word	0x080601ac

080a07fc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a07fc:	b508      	push	{r3, lr}
 80a07fe:	4b03      	ldr	r3, [pc, #12]	; (80a080c <hal_i2c_init+0x10>)
 80a0800:	681b      	ldr	r3, [r3, #0]
 80a0802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0806:	9301      	str	r3, [sp, #4]
 80a0808:	bd08      	pop	{r3, pc}
 80a080a:	0000      	.short	0x0000
 80a080c:	080601ac 	.word	0x080601ac

080a0810 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0810:	b508      	push	{r3, lr}
 80a0812:	4b02      	ldr	r3, [pc, #8]	; (80a081c <hal_spi_init+0xc>)
 80a0814:	681b      	ldr	r3, [r3, #0]
 80a0816:	69db      	ldr	r3, [r3, #28]
 80a0818:	9301      	str	r3, [sp, #4]
 80a081a:	bd08      	pop	{r3, pc}
 80a081c:	080601b4 	.word	0x080601b4

080a0820 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0820:	b508      	push	{r3, lr}
 80a0822:	4b02      	ldr	r3, [pc, #8]	; (80a082c <hal_spi_is_enabled+0xc>)
 80a0824:	681b      	ldr	r3, [r3, #0]
 80a0826:	6a1b      	ldr	r3, [r3, #32]
 80a0828:	9301      	str	r3, [sp, #4]
 80a082a:	bd08      	pop	{r3, pc}
 80a082c:	080601b4 	.word	0x080601b4

080a0830 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0830:	b508      	push	{r3, lr}
 80a0832:	4b02      	ldr	r3, [pc, #8]	; (80a083c <HAL_USB_USART_Init+0xc>)
 80a0834:	681b      	ldr	r3, [r3, #0]
 80a0836:	681b      	ldr	r3, [r3, #0]
 80a0838:	9301      	str	r3, [sp, #4]
 80a083a:	bd08      	pop	{r3, pc}
 80a083c:	080601d8 	.word	0x080601d8

080a0840 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0840:	b508      	push	{r3, lr}
 80a0842:	4b02      	ldr	r3, [pc, #8]	; (80a084c <HAL_USB_USART_Begin+0xc>)
 80a0844:	681b      	ldr	r3, [r3, #0]
 80a0846:	685b      	ldr	r3, [r3, #4]
 80a0848:	9301      	str	r3, [sp, #4]
 80a084a:	bd08      	pop	{r3, pc}
 80a084c:	080601d8 	.word	0x080601d8

080a0850 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0850:	b508      	push	{r3, lr}
 80a0852:	4b02      	ldr	r3, [pc, #8]	; (80a085c <HAL_USB_USART_Available_Data+0xc>)
 80a0854:	681b      	ldr	r3, [r3, #0]
 80a0856:	691b      	ldr	r3, [r3, #16]
 80a0858:	9301      	str	r3, [sp, #4]
 80a085a:	bd08      	pop	{r3, pc}
 80a085c:	080601d8 	.word	0x080601d8

080a0860 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0860:	b508      	push	{r3, lr}
 80a0862:	4b02      	ldr	r3, [pc, #8]	; (80a086c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0864:	681b      	ldr	r3, [r3, #0]
 80a0866:	695b      	ldr	r3, [r3, #20]
 80a0868:	9301      	str	r3, [sp, #4]
 80a086a:	bd08      	pop	{r3, pc}
 80a086c:	080601d8 	.word	0x080601d8

080a0870 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0870:	b508      	push	{r3, lr}
 80a0872:	4b02      	ldr	r3, [pc, #8]	; (80a087c <HAL_USB_USART_Receive_Data+0xc>)
 80a0874:	681b      	ldr	r3, [r3, #0]
 80a0876:	699b      	ldr	r3, [r3, #24]
 80a0878:	9301      	str	r3, [sp, #4]
 80a087a:	bd08      	pop	{r3, pc}
 80a087c:	080601d8 	.word	0x080601d8

080a0880 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0880:	b508      	push	{r3, lr}
 80a0882:	4b02      	ldr	r3, [pc, #8]	; (80a088c <HAL_USB_USART_Send_Data+0xc>)
 80a0884:	681b      	ldr	r3, [r3, #0]
 80a0886:	69db      	ldr	r3, [r3, #28]
 80a0888:	9301      	str	r3, [sp, #4]
 80a088a:	bd08      	pop	{r3, pc}
 80a088c:	080601d8 	.word	0x080601d8

080a0890 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0890:	b508      	push	{r3, lr}
 80a0892:	4b02      	ldr	r3, [pc, #8]	; (80a089c <HAL_USB_USART_Flush_Data+0xc>)
 80a0894:	681b      	ldr	r3, [r3, #0]
 80a0896:	6a1b      	ldr	r3, [r3, #32]
 80a0898:	9301      	str	r3, [sp, #4]
 80a089a:	bd08      	pop	{r3, pc}
 80a089c:	080601d8 	.word	0x080601d8

080a08a0 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 80a08a0:	b508      	push	{r3, lr}
 80a08a2:	4b02      	ldr	r3, [pc, #8]	; (80a08ac <HAL_USB_USART_Is_Connected+0xc>)
 80a08a4:	681b      	ldr	r3, [r3, #0]
 80a08a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a08a8:	9301      	str	r3, [sp, #4]
 80a08aa:	bd08      	pop	{r3, pc}
 80a08ac:	080601d8 	.word	0x080601d8

080a08b0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a08b0:	b508      	push	{r3, lr}
 80a08b2:	4b02      	ldr	r3, [pc, #8]	; (80a08bc <inet_gethostbyname+0xc>)
 80a08b4:	681b      	ldr	r3, [r3, #0]
 80a08b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a08b8:	9301      	str	r3, [sp, #4]
 80a08ba:	bd08      	pop	{r3, pc}
 80a08bc:	080601c0 	.word	0x080601c0

080a08c0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a08c0:	b508      	push	{r3, lr}
 80a08c2:	4b02      	ldr	r3, [pc, #8]	; (80a08cc <set_system_mode+0xc>)
 80a08c4:	681b      	ldr	r3, [r3, #0]
 80a08c6:	685b      	ldr	r3, [r3, #4]
 80a08c8:	9301      	str	r3, [sp, #4]
 80a08ca:	bd08      	pop	{r3, pc}
 80a08cc:	080601a4 	.word	0x080601a4

080a08d0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a08d0:	b508      	push	{r3, lr}
 80a08d2:	4b02      	ldr	r3, [pc, #8]	; (80a08dc <system_thread_set_state+0xc>)
 80a08d4:	681b      	ldr	r3, [r3, #0]
 80a08d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a08d8:	9301      	str	r3, [sp, #4]
 80a08da:	bd08      	pop	{r3, pc}
 80a08dc:	080601a4 	.word	0x080601a4

080a08e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a08e0:	b508      	push	{r3, lr}
 80a08e2:	4b03      	ldr	r3, [pc, #12]	; (80a08f0 <system_ctrl_set_app_request_handler+0x10>)
 80a08e4:	681b      	ldr	r3, [r3, #0]
 80a08e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a08ea:	9301      	str	r3, [sp, #4]
 80a08ec:	bd08      	pop	{r3, pc}
 80a08ee:	0000      	.short	0x0000
 80a08f0:	080601a4 	.word	0x080601a4

080a08f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a08f4:	b508      	push	{r3, lr}
 80a08f6:	4b03      	ldr	r3, [pc, #12]	; (80a0904 <system_ctrl_set_result+0x10>)
 80a08f8:	681b      	ldr	r3, [r3, #0]
 80a08fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a08fe:	9301      	str	r3, [sp, #4]
 80a0900:	bd08      	pop	{r3, pc}
 80a0902:	0000      	.short	0x0000
 80a0904:	080601a4 	.word	0x080601a4

080a0908 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0908:	b508      	push	{r3, lr}
 80a090a:	4b02      	ldr	r3, [pc, #8]	; (80a0914 <network_connect+0xc>)
 80a090c:	681b      	ldr	r3, [r3, #0]
 80a090e:	685b      	ldr	r3, [r3, #4]
 80a0910:	9301      	str	r3, [sp, #4]
 80a0912:	bd08      	pop	{r3, pc}
 80a0914:	080601c8 	.word	0x080601c8

080a0918 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0918:	b508      	push	{r3, lr}
 80a091a:	4b02      	ldr	r3, [pc, #8]	; (80a0924 <network_connecting+0xc>)
 80a091c:	681b      	ldr	r3, [r3, #0]
 80a091e:	689b      	ldr	r3, [r3, #8]
 80a0920:	9301      	str	r3, [sp, #4]
 80a0922:	bd08      	pop	{r3, pc}
 80a0924:	080601c8 	.word	0x080601c8

080a0928 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0928:	b508      	push	{r3, lr}
 80a092a:	4b02      	ldr	r3, [pc, #8]	; (80a0934 <network_disconnect+0xc>)
 80a092c:	681b      	ldr	r3, [r3, #0]
 80a092e:	68db      	ldr	r3, [r3, #12]
 80a0930:	9301      	str	r3, [sp, #4]
 80a0932:	bd08      	pop	{r3, pc}
 80a0934:	080601c8 	.word	0x080601c8

080a0938 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0938:	b508      	push	{r3, lr}
 80a093a:	4b02      	ldr	r3, [pc, #8]	; (80a0944 <network_ready+0xc>)
 80a093c:	681b      	ldr	r3, [r3, #0]
 80a093e:	691b      	ldr	r3, [r3, #16]
 80a0940:	9301      	str	r3, [sp, #4]
 80a0942:	bd08      	pop	{r3, pc}
 80a0944:	080601c8 	.word	0x080601c8

080a0948 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0948:	b508      	push	{r3, lr}
 80a094a:	4b02      	ldr	r3, [pc, #8]	; (80a0954 <network_on+0xc>)
 80a094c:	681b      	ldr	r3, [r3, #0]
 80a094e:	695b      	ldr	r3, [r3, #20]
 80a0950:	9301      	str	r3, [sp, #4]
 80a0952:	bd08      	pop	{r3, pc}
 80a0954:	080601c8 	.word	0x080601c8

080a0958 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0958:	b508      	push	{r3, lr}
 80a095a:	4b02      	ldr	r3, [pc, #8]	; (80a0964 <network_off+0xc>)
 80a095c:	681b      	ldr	r3, [r3, #0]
 80a095e:	699b      	ldr	r3, [r3, #24]
 80a0960:	9301      	str	r3, [sp, #4]
 80a0962:	bd08      	pop	{r3, pc}
 80a0964:	080601c8 	.word	0x080601c8

080a0968 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0968:	b508      	push	{r3, lr}
 80a096a:	4b02      	ldr	r3, [pc, #8]	; (80a0974 <network_listen+0xc>)
 80a096c:	681b      	ldr	r3, [r3, #0]
 80a096e:	69db      	ldr	r3, [r3, #28]
 80a0970:	9301      	str	r3, [sp, #4]
 80a0972:	bd08      	pop	{r3, pc}
 80a0974:	080601c8 	.word	0x080601c8

080a0978 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0978:	b508      	push	{r3, lr}
 80a097a:	4b02      	ldr	r3, [pc, #8]	; (80a0984 <network_listening+0xc>)
 80a097c:	681b      	ldr	r3, [r3, #0]
 80a097e:	6a1b      	ldr	r3, [r3, #32]
 80a0980:	9301      	str	r3, [sp, #4]
 80a0982:	bd08      	pop	{r3, pc}
 80a0984:	080601c8 	.word	0x080601c8

080a0988 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0988:	b508      	push	{r3, lr}
 80a098a:	4b02      	ldr	r3, [pc, #8]	; (80a0994 <network_set_listen_timeout+0xc>)
 80a098c:	681b      	ldr	r3, [r3, #0]
 80a098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0990:	9301      	str	r3, [sp, #4]
 80a0992:	bd08      	pop	{r3, pc}
 80a0994:	080601c8 	.word	0x080601c8

080a0998 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0998:	b508      	push	{r3, lr}
 80a099a:	4b02      	ldr	r3, [pc, #8]	; (80a09a4 <network_get_listen_timeout+0xc>)
 80a099c:	681b      	ldr	r3, [r3, #0]
 80a099e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a09a0:	9301      	str	r3, [sp, #4]
 80a09a2:	bd08      	pop	{r3, pc}
 80a09a4:	080601c8 	.word	0x080601c8

080a09a8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a09a8:	b508      	push	{r3, lr}
 80a09aa:	4b02      	ldr	r3, [pc, #8]	; (80a09b4 <network_is_on+0xc>)
 80a09ac:	681b      	ldr	r3, [r3, #0]
 80a09ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a09b0:	9301      	str	r3, [sp, #4]
 80a09b2:	bd08      	pop	{r3, pc}
 80a09b4:	080601c8 	.word	0x080601c8

080a09b8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a09b8:	b508      	push	{r3, lr}
 80a09ba:	4b02      	ldr	r3, [pc, #8]	; (80a09c4 <network_is_off+0xc>)
 80a09bc:	681b      	ldr	r3, [r3, #0]
 80a09be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a09c0:	9301      	str	r3, [sp, #4]
 80a09c2:	bd08      	pop	{r3, pc}
 80a09c4:	080601c8 	.word	0x080601c8

080a09c8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a09c8:	b508      	push	{r3, lr}
 80a09ca:	4b02      	ldr	r3, [pc, #8]	; (80a09d4 <spark_process+0xc>)
 80a09cc:	681b      	ldr	r3, [r3, #0]
 80a09ce:	689b      	ldr	r3, [r3, #8]
 80a09d0:	9301      	str	r3, [sp, #4]
 80a09d2:	bd08      	pop	{r3, pc}
 80a09d4:	080601cc 	.word	0x080601cc

080a09d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a09d8:	b508      	push	{r3, lr}
 80a09da:	4b02      	ldr	r3, [pc, #8]	; (80a09e4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a09dc:	681b      	ldr	r3, [r3, #0]
 80a09de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a09e0:	9301      	str	r3, [sp, #4]
 80a09e2:	bd08      	pop	{r3, pc}
 80a09e4:	080601cc 	.word	0x080601cc

080a09e8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a09e8:	b508      	push	{r3, lr}
 80a09ea:	4b02      	ldr	r3, [pc, #8]	; (80a09f4 <malloc+0xc>)
 80a09ec:	681b      	ldr	r3, [r3, #0]
 80a09ee:	681b      	ldr	r3, [r3, #0]
 80a09f0:	9301      	str	r3, [sp, #4]
 80a09f2:	bd08      	pop	{r3, pc}
 80a09f4:	080601a0 	.word	0x080601a0

080a09f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a09f8:	b508      	push	{r3, lr}
 80a09fa:	4b02      	ldr	r3, [pc, #8]	; (80a0a04 <free+0xc>)
 80a09fc:	681b      	ldr	r3, [r3, #0]
 80a09fe:	685b      	ldr	r3, [r3, #4]
 80a0a00:	9301      	str	r3, [sp, #4]
 80a0a02:	bd08      	pop	{r3, pc}
 80a0a04:	080601a0 	.word	0x080601a0

080a0a08 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a0a08:	b508      	push	{r3, lr}
 80a0a0a:	4b02      	ldr	r3, [pc, #8]	; (80a0a14 <vsnprintf+0xc>)
 80a0a0c:	681b      	ldr	r3, [r3, #0]
 80a0a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0a10:	9301      	str	r3, [sp, #4]
 80a0a12:	bd08      	pop	{r3, pc}
 80a0a14:	080601a0 	.word	0x080601a0

080a0a18 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0a18:	b508      	push	{r3, lr}
 80a0a1a:	4b02      	ldr	r3, [pc, #8]	; (80a0a24 <abort+0xc>)
 80a0a1c:	681b      	ldr	r3, [r3, #0]
 80a0a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0a20:	9301      	str	r3, [sp, #4]
 80a0a22:	bd08      	pop	{r3, pc}
 80a0a24:	080601a0 	.word	0x080601a0

080a0a28 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0a28:	b508      	push	{r3, lr}
 80a0a2a:	4b02      	ldr	r3, [pc, #8]	; (80a0a34 <newlib_impure_ptr_callback+0xc>)
 80a0a2c:	681b      	ldr	r3, [r3, #0]
 80a0a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0a30:	9301      	str	r3, [sp, #4]
 80a0a32:	bd08      	pop	{r3, pc}
 80a0a34:	080601a0 	.word	0x080601a0

080a0a38 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0a38:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0a3a:	2600      	movs	r6, #0
 80a0a3c:	4604      	mov	r4, r0
 80a0a3e:	460d      	mov	r5, r1
 80a0a40:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0a44:	f7ff fe52 	bl	80a06ec <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0a48:	4628      	mov	r0, r5
    _spi = spi;
 80a0a4a:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0a4c:	f7ff fee0 	bl	80a0810 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0a50:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0a52:	6066      	str	r6, [r4, #4]
}
 80a0a54:	bd70      	pop	{r4, r5, r6, pc}

080a0a56 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0a56:	b510      	push	{r4, lr}
 80a0a58:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0a5a:	6800      	ldr	r0, [r0, #0]
 80a0a5c:	b118      	cbz	r0, 80a0a66 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a0a5e:	f7ff ffcb 	bl	80a09f8 <free>
            wakeupSource_ = nullptr;
 80a0a62:	2300      	movs	r3, #0
 80a0a64:	6023      	str	r3, [r4, #0]
        }
    }
 80a0a66:	bd10      	pop	{r4, pc}

080a0a68 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0a68:	b510      	push	{r4, lr}
 80a0a6a:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a0a6c:	f7ff fff3 	bl	80a0a56 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a0a70:	4620      	mov	r0, r4
 80a0a72:	bd10      	pop	{r4, pc}

080a0a74 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0a74:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a0a76:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0a78:	b510      	push	{r4, lr}
 80a0a7a:	4b08      	ldr	r3, [pc, #32]	; (80a0a9c <_GLOBAL__sub_I_System+0x28>)
 80a0a7c:	4c08      	ldr	r4, [pc, #32]	; (80a0aa0 <_GLOBAL__sub_I_System+0x2c>)
 80a0a7e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a0a80:	4b08      	ldr	r3, [pc, #32]	; (80a0aa4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a0a82:	6020      	str	r0, [r4, #0]
 80a0a84:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a0a86:	71a0      	strb	r0, [r4, #6]
 80a0a88:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0a8a:	f7ff ff19 	bl	80a08c0 <set_system_mode>
SystemClass System;
 80a0a8e:	4620      	mov	r0, r4
 80a0a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a0a94:	4a04      	ldr	r2, [pc, #16]	; (80a0aa8 <_GLOBAL__sub_I_System+0x34>)
 80a0a96:	4905      	ldr	r1, [pc, #20]	; (80a0aac <_GLOBAL__sub_I_System+0x38>)
 80a0a98:	f000 bd1e 	b.w	80a14d8 <__aeabi_atexit>
 80a0a9c:	200000e4 	.word	0x200000e4
 80a0aa0:	200000d8 	.word	0x200000d8
 80a0aa4:	ffff0000 	.word	0xffff0000
 80a0aa8:	2000007c 	.word	0x2000007c
 80a0aac:	080a0a69 	.word	0x080a0a69

080a0ab0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ab2:	4606      	mov	r6, r0
 80a0ab4:	460d      	mov	r5, r1
  size_t n = 0;
 80a0ab6:	2400      	movs	r4, #0
 80a0ab8:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0aba:	42bd      	cmp	r5, r7
 80a0abc:	d00c      	beq.n	80a0ad8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0abe:	6833      	ldr	r3, [r6, #0]
 80a0ac0:	4630      	mov	r0, r6
 80a0ac2:	689b      	ldr	r3, [r3, #8]
 80a0ac4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0ac8:	4798      	blx	r3
     if (chunk>=0)
 80a0aca:	1e03      	subs	r3, r0, #0
 80a0acc:	db01      	blt.n	80a0ad2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0ace:	441c      	add	r4, r3
  while (size--) {
 80a0ad0:	e7f3      	b.n	80a0aba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0ad2:	2c00      	cmp	r4, #0
 80a0ad4:	bf08      	it	eq
 80a0ad6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0ad8:	4620      	mov	r0, r4
 80a0ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0adc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0adc:	b570      	push	{r4, r5, r6, lr}
 80a0ade:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0ae0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0ae2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0ae4:	b149      	cbz	r1, 80a0afa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0ae6:	f001 f943 	bl	80a1d70 <strlen>
 80a0aea:	682b      	ldr	r3, [r5, #0]
 80a0aec:	4602      	mov	r2, r0
 80a0aee:	4621      	mov	r1, r4
 80a0af0:	4628      	mov	r0, r5
    }
 80a0af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0af6:	68db      	ldr	r3, [r3, #12]
 80a0af8:	4718      	bx	r3
    }
 80a0afa:	bd70      	pop	{r4, r5, r6, pc}

080a0afc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0afc:	6803      	ldr	r3, [r0, #0]
 80a0afe:	689b      	ldr	r3, [r3, #8]
 80a0b00:	4718      	bx	r3

080a0b02 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0b02:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0b04:	210d      	movs	r1, #13
{
 80a0b06:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0b08:	f7ff fff8 	bl	80a0afc <_ZN5Print5printEc>
  n += print('\n');
 80a0b0c:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0b0e:	4604      	mov	r4, r0
  n += print('\n');
 80a0b10:	4628      	mov	r0, r5
 80a0b12:	f7ff fff3 	bl	80a0afc <_ZN5Print5printEc>
  return n;
}
 80a0b16:	4420      	add	r0, r4
 80a0b18:	bd38      	pop	{r3, r4, r5, pc}

080a0b1a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0b1a:	b538      	push	{r3, r4, r5, lr}
 80a0b1c:	4605      	mov	r5, r0
  return write(str);
 80a0b1e:	f7ff ffdd 	bl	80a0adc <_ZN5Print5writeEPKc>
 80a0b22:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a0b24:	4628      	mov	r0, r5
 80a0b26:	f7ff ffec 	bl	80a0b02 <_ZN5Print7printlnEv>
  return n;
}
 80a0b2a:	4420      	add	r0, r4
 80a0b2c:	bd38      	pop	{r3, r4, r5, pc}

080a0b2e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0b2e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0b30:	2a01      	cmp	r2, #1
 80a0b32:	bf98      	it	ls
 80a0b34:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0b36:	b530      	push	{r4, r5, lr}
 80a0b38:	b08b      	sub	sp, #44	; 0x2c
 80a0b3a:	460c      	mov	r4, r1
  *str = '\0';
 80a0b3c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0b40:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0b42:	4625      	mov	r5, r4
 80a0b44:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0b48:	fb04 5312 	mls	r3, r4, r2, r5
 80a0b4c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0b4e:	2b09      	cmp	r3, #9
 80a0b50:	bf94      	ite	ls
 80a0b52:	3330      	addls	r3, #48	; 0x30
 80a0b54:	3337      	addhi	r3, #55	; 0x37
 80a0b56:	b2db      	uxtb	r3, r3
  } while(n);
 80a0b58:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0b5a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0b5e:	d9f0      	bls.n	80a0b42 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0b60:	f7ff ffbc 	bl	80a0adc <_ZN5Print5writeEPKc>
}
 80a0b64:	b00b      	add	sp, #44	; 0x2c
 80a0b66:	bd30      	pop	{r4, r5, pc}

080a0b68 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a0b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0b6c:	b086      	sub	sp, #24
 80a0b6e:	af00      	add	r7, sp, #0
 80a0b70:	4605      	mov	r5, r0
 80a0b72:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a0b74:	1d38      	adds	r0, r7, #4
 80a0b76:	2114      	movs	r1, #20
{
 80a0b78:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a0b7a:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a0b7c:	f7ff ff44 	bl	80a0a08 <vsnprintf>

    if (n<bufsize)
 80a0b80:	2813      	cmp	r0, #19
 80a0b82:	d80e      	bhi.n	80a0ba2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a0b84:	4628      	mov	r0, r5
 80a0b86:	1d39      	adds	r1, r7, #4
 80a0b88:	f7ff ffa8 	bl	80a0adc <_ZN5Print5writeEPKc>
 80a0b8c:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a0b8e:	b11e      	cbz	r6, 80a0b98 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a0b90:	4628      	mov	r0, r5
 80a0b92:	f7ff ffb6 	bl	80a0b02 <_ZN5Print7printlnEv>
 80a0b96:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a0b98:	4620      	mov	r0, r4
 80a0b9a:	3718      	adds	r7, #24
 80a0b9c:	46bd      	mov	sp, r7
 80a0b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a0ba2:	f100 0308 	add.w	r3, r0, #8
 80a0ba6:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a0baa:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a0bac:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a0bb0:	4622      	mov	r2, r4
 80a0bb2:	1c41      	adds	r1, r0, #1
 80a0bb4:	683b      	ldr	r3, [r7, #0]
 80a0bb6:	4668      	mov	r0, sp
 80a0bb8:	f7ff ff26 	bl	80a0a08 <vsnprintf>
  return write(str);
 80a0bbc:	4669      	mov	r1, sp
 80a0bbe:	4628      	mov	r0, r5
 80a0bc0:	f7ff ff8c 	bl	80a0adc <_ZN5Print5writeEPKc>
 80a0bc4:	4604      	mov	r4, r0
 80a0bc6:	46c5      	mov	sp, r8
 80a0bc8:	e7e1      	b.n	80a0b8e <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a0bca <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0bca:	2300      	movs	r3, #0
 80a0bcc:	6840      	ldr	r0, [r0, #4]
 80a0bce:	461a      	mov	r2, r3
 80a0bd0:	4619      	mov	r1, r3
 80a0bd2:	f7ff beb9 	b.w	80a0948 <network_on>
	...

080a0bd8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0bd8:	4b01      	ldr	r3, [pc, #4]	; (80a0be0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0bda:	4a02      	ldr	r2, [pc, #8]	; (80a0be4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0bdc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0bde:	4770      	bx	lr
 80a0be0:	200000e8 	.word	0x200000e8
 80a0be4:	080a1f18 	.word	0x080a1f18

080a0be8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0be8:	4b02      	ldr	r3, [pc, #8]	; (80a0bf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0bea:	681a      	ldr	r2, [r3, #0]
 80a0bec:	4b02      	ldr	r3, [pc, #8]	; (80a0bf8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0bee:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0bf0:	4770      	bx	lr
 80a0bf2:	bf00      	nop
 80a0bf4:	20000014 	.word	0x20000014
 80a0bf8:	200000ec 	.word	0x200000ec

080a0bfc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0bfc:	b510      	push	{r4, lr}
 80a0bfe:	4604      	mov	r4, r0
 80a0c00:	f7ff fa8c 	bl	80a011c <_ZNSt14_Function_baseD1Ev>
 80a0c04:	4620      	mov	r0, r4
 80a0c06:	bd10      	pop	{r4, pc}

080a0c08 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a0c08:	2300      	movs	r3, #0
 80a0c0a:	4803      	ldr	r0, [pc, #12]	; (80a0c18 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0c0c:	4a03      	ldr	r2, [pc, #12]	; (80a0c1c <_GLOBAL__sub_I_RGB+0x14>)
 80a0c0e:	4904      	ldr	r1, [pc, #16]	; (80a0c20 <_GLOBAL__sub_I_RGB+0x18>)
 80a0c10:	6083      	str	r3, [r0, #8]
 80a0c12:	f000 bc61 	b.w	80a14d8 <__aeabi_atexit>
 80a0c16:	bf00      	nop
 80a0c18:	200000f0 	.word	0x200000f0
 80a0c1c:	2000007c 	.word	0x2000007c
 80a0c20:	080a0bfd 	.word	0x080a0bfd

080a0c24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0c24:	4b01      	ldr	r3, [pc, #4]	; (80a0c2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0c26:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0c28:	4770      	bx	lr
 80a0c2a:	bf00      	nop
 80a0c2c:	20000018 	.word	0x20000018

080a0c30 <serialEventRun>:
{
 80a0c30:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0c32:	4b13      	ldr	r3, [pc, #76]	; (80a0c80 <serialEventRun+0x50>)
 80a0c34:	b143      	cbz	r3, 80a0c48 <serialEventRun+0x18>
 80a0c36:	f000 f96d 	bl	80a0f14 <_Z16_fetch_usbserialv>
 80a0c3a:	6803      	ldr	r3, [r0, #0]
 80a0c3c:	691b      	ldr	r3, [r3, #16]
 80a0c3e:	4798      	blx	r3
 80a0c40:	2800      	cmp	r0, #0
 80a0c42:	dd01      	ble.n	80a0c48 <serialEventRun+0x18>
        serialEvent();
 80a0c44:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a0c48:	4b0e      	ldr	r3, [pc, #56]	; (80a0c84 <serialEventRun+0x54>)
 80a0c4a:	b143      	cbz	r3, 80a0c5e <serialEventRun+0x2e>
 80a0c4c:	f000 fa46 	bl	80a10dc <_Z22__fetch_global_Serial1v>
 80a0c50:	6803      	ldr	r3, [r0, #0]
 80a0c52:	691b      	ldr	r3, [r3, #16]
 80a0c54:	4798      	blx	r3
 80a0c56:	2800      	cmp	r0, #0
 80a0c58:	dd01      	ble.n	80a0c5e <serialEventRun+0x2e>
        serialEvent1();
 80a0c5a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a0c5e:	4b0a      	ldr	r3, [pc, #40]	; (80a0c88 <serialEventRun+0x58>)
 80a0c60:	b10b      	cbz	r3, 80a0c66 <serialEventRun+0x36>
 80a0c62:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0c66:	4b09      	ldr	r3, [pc, #36]	; (80a0c8c <serialEventRun+0x5c>)
 80a0c68:	b143      	cbz	r3, 80a0c7c <serialEventRun+0x4c>
 80a0c6a:	f000 f991 	bl	80a0f90 <_Z17_fetch_usbserial1v>
 80a0c6e:	6803      	ldr	r3, [r0, #0]
 80a0c70:	691b      	ldr	r3, [r3, #16]
 80a0c72:	4798      	blx	r3
 80a0c74:	2800      	cmp	r0, #0
 80a0c76:	dd01      	ble.n	80a0c7c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0c78:	f3af 8000 	nop.w
}
 80a0c7c:	bd08      	pop	{r3, pc}
 80a0c7e:	bf00      	nop
	...

080a0c90 <_post_loop>:
{
 80a0c90:	b508      	push	{r3, lr}
	serialEventRun();
 80a0c92:	f7ff ffcd 	bl	80a0c30 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0c96:	f7ff fcf1 	bl	80a067c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0c9a:	4b01      	ldr	r3, [pc, #4]	; (80a0ca0 <_post_loop+0x10>)
 80a0c9c:	6018      	str	r0, [r3, #0]
}
 80a0c9e:	bd08      	pop	{r3, pc}
 80a0ca0:	2000057c 	.word	0x2000057c

080a0ca4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0ca4:	4802      	ldr	r0, [pc, #8]	; (80a0cb0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0ca6:	4a03      	ldr	r2, [pc, #12]	; (80a0cb4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0ca8:	4903      	ldr	r1, [pc, #12]	; (80a0cb8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0caa:	1a12      	subs	r2, r2, r0
 80a0cac:	f001 b826 	b.w	80a1cfc <memcpy>
 80a0cb0:	40024000 	.word	0x40024000
 80a0cb4:	40024004 	.word	0x40024004
 80a0cb8:	080a2070 	.word	0x080a2070

080a0cbc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0cbc:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0cbe:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0cc0:	461a      	mov	r2, r3
 80a0cc2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0cc6:	9300      	str	r3, [sp, #0]
 80a0cc8:	f7ff fe14 	bl	80a08f4 <system_ctrl_set_result>
}
 80a0ccc:	b003      	add	sp, #12
 80a0cce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0cd4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0cd4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0cd6:	8843      	ldrh	r3, [r0, #2]
 80a0cd8:	2b0a      	cmp	r3, #10
 80a0cda:	d008      	beq.n	80a0cee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0cdc:	2b50      	cmp	r3, #80	; 0x50
 80a0cde:	d10b      	bne.n	80a0cf8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0ce0:	4b09      	ldr	r3, [pc, #36]	; (80a0d08 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0ce2:	681b      	ldr	r3, [r3, #0]
 80a0ce4:	b14b      	cbz	r3, 80a0cfa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0ce6:	b003      	add	sp, #12
 80a0ce8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0cec:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0cee:	f7ff ffe5 	bl	80a0cbc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0cf2:	b003      	add	sp, #12
 80a0cf4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0cf8:	2300      	movs	r3, #0
 80a0cfa:	461a      	mov	r2, r3
 80a0cfc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0d00:	9300      	str	r3, [sp, #0]
 80a0d02:	f7ff fdf7 	bl	80a08f4 <system_ctrl_set_result>
}
 80a0d06:	e7f4      	b.n	80a0cf2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0d08:	20000104 	.word	0x20000104

080a0d0c <module_user_init_hook>:
{
 80a0d0c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0d0e:	4c12      	ldr	r4, [pc, #72]	; (80a0d58 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0d10:	2100      	movs	r1, #0
 80a0d12:	4812      	ldr	r0, [pc, #72]	; (80a0d5c <module_user_init_hook+0x50>)
 80a0d14:	f7ff fe88 	bl	80a0a28 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0d18:	4d11      	ldr	r5, [pc, #68]	; (80a0d60 <module_user_init_hook+0x54>)
 80a0d1a:	6823      	ldr	r3, [r4, #0]
 80a0d1c:	42ab      	cmp	r3, r5
 80a0d1e:	bf0c      	ite	eq
 80a0d20:	2201      	moveq	r2, #1
 80a0d22:	2200      	movne	r2, #0
 80a0d24:	4b0f      	ldr	r3, [pc, #60]	; (80a0d64 <module_user_init_hook+0x58>)
 80a0d26:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0d28:	d002      	beq.n	80a0d30 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a0d2a:	f7ff ffbb 	bl	80a0ca4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0d2e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0d30:	f7ff fc94 	bl	80a065c <HAL_RNG_GetRandomNumber>
 80a0d34:	4604      	mov	r4, r0
    srand(seed);
 80a0d36:	f000 fff7 	bl	80a1d28 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0d3a:	4b0b      	ldr	r3, [pc, #44]	; (80a0d68 <module_user_init_hook+0x5c>)
 80a0d3c:	b113      	cbz	r3, 80a0d44 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a0d3e:	4620      	mov	r0, r4
 80a0d40:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0d44:	2100      	movs	r1, #0
 80a0d46:	4808      	ldr	r0, [pc, #32]	; (80a0d68 <module_user_init_hook+0x5c>)
 80a0d48:	f7ff fe46 	bl	80a09d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0d50:	2100      	movs	r1, #0
 80a0d52:	4806      	ldr	r0, [pc, #24]	; (80a0d6c <module_user_init_hook+0x60>)
 80a0d54:	f7ff bdc4 	b.w	80a08e0 <system_ctrl_set_app_request_handler>
 80a0d58:	40024000 	.word	0x40024000
 80a0d5c:	080a0c25 	.word	0x080a0c25
 80a0d60:	9a271c1e 	.word	0x9a271c1e
 80a0d64:	20000100 	.word	0x20000100
 80a0d68:	00000000 	.word	0x00000000
 80a0d6c:	080a0cd5 	.word	0x080a0cd5

080a0d70 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0d70:	4770      	bx	lr

080a0d72 <_ZN9IPAddressD0Ev>:
 80a0d72:	b510      	push	{r4, lr}
 80a0d74:	4604      	mov	r4, r0
 80a0d76:	2118      	movs	r1, #24
 80a0d78:	f000 fbb3 	bl	80a14e2 <_ZdlPvj>
 80a0d7c:	4620      	mov	r0, r4
 80a0d7e:	bd10      	pop	{r4, pc}

080a0d80 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d82:	460e      	mov	r6, r1
 80a0d84:	2400      	movs	r4, #0
 80a0d86:	f100 0708 	add.w	r7, r0, #8
 80a0d8a:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0d8c:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0d90:	220a      	movs	r2, #10
 80a0d92:	4630      	mov	r0, r6
 80a0d94:	f7ff fecb 	bl	80a0b2e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0d98:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0d9a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0d9c:	d101      	bne.n	80a0da2 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0d9e:	4620      	mov	r0, r4
 80a0da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0da2:	2c00      	cmp	r4, #0
 80a0da4:	d0f2      	beq.n	80a0d8c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0da6:	212e      	movs	r1, #46	; 0x2e
 80a0da8:	4630      	mov	r0, r6
 80a0daa:	f7ff fea7 	bl	80a0afc <_ZN5Print5printEc>
 80a0dae:	4404      	add	r4, r0
 80a0db0:	e7ec      	b.n	80a0d8c <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a0db4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0db4:	b510      	push	{r4, lr}
 80a0db6:	4604      	mov	r4, r0
 80a0db8:	4b04      	ldr	r3, [pc, #16]	; (80a0dcc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0dba:	2211      	movs	r2, #17
 80a0dbc:	2100      	movs	r1, #0
 80a0dbe:	f840 3b04 	str.w	r3, [r0], #4
 80a0dc2:	f000 ffa9 	bl	80a1d18 <memset>
}
 80a0dc6:	4620      	mov	r0, r4
 80a0dc8:	bd10      	pop	{r4, pc}
 80a0dca:	bf00      	nop
 80a0dcc:	080a1f40 	.word	0x080a1f40

080a0dd0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0dd0:	4603      	mov	r3, r0
 80a0dd2:	4a07      	ldr	r2, [pc, #28]	; (80a0df0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0dd4:	b510      	push	{r4, lr}
 80a0dd6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0dda:	f101 0210 	add.w	r2, r1, #16
 80a0dde:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0de2:	4291      	cmp	r1, r2
 80a0de4:	f843 4b04 	str.w	r4, [r3], #4
 80a0de8:	d1f9      	bne.n	80a0dde <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0dea:	780a      	ldrb	r2, [r1, #0]
 80a0dec:	701a      	strb	r2, [r3, #0]
}
 80a0dee:	bd10      	pop	{r4, pc}
 80a0df0:	080a1f40 	.word	0x080a1f40

080a0df4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a0df4:	4a02      	ldr	r2, [pc, #8]	; (80a0e00 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a0df6:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0dfa:	2204      	movs	r2, #4
 80a0dfc:	7502      	strb	r2, [r0, #20]
}
 80a0dfe:	4770      	bx	lr
 80a0e00:	080a1f40 	.word	0x080a1f40

080a0e04 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0e04:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0e06:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0e0a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0e0e:	2304      	movs	r3, #4
 80a0e10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0e14:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0e18:	6044      	str	r4, [r0, #4]
 80a0e1a:	7503      	strb	r3, [r0, #20]
}
 80a0e1c:	bd10      	pop	{r4, pc}
	...

080a0e20 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0e22:	4d04      	ldr	r5, [pc, #16]	; (80a0e34 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0e24:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0e26:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0e2a:	9500      	str	r5, [sp, #0]
 80a0e2c:	f7ff ffea 	bl	80a0e04 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0e30:	b003      	add	sp, #12
 80a0e32:	bd30      	pop	{r4, r5, pc}
 80a0e34:	080a1f40 	.word	0x080a1f40

080a0e38 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0e38:	7441      	strb	r1, [r0, #17]
}
 80a0e3a:	4770      	bx	lr

080a0e3c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0e3c:	4770      	bx	lr

080a0e3e <_ZN9USBSerial4readEv>:
{
 80a0e3e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0e40:	2100      	movs	r1, #0
 80a0e42:	7c00      	ldrb	r0, [r0, #16]
 80a0e44:	f7ff fd14 	bl	80a0870 <HAL_USB_USART_Receive_Data>
}
 80a0e48:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0e4c:	bd08      	pop	{r3, pc}

080a0e4e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a0e4e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0e50:	2101      	movs	r1, #1
 80a0e52:	7c00      	ldrb	r0, [r0, #16]
 80a0e54:	f7ff fd0c 	bl	80a0870 <HAL_USB_USART_Receive_Data>
}
 80a0e58:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0e5c:	bd08      	pop	{r3, pc}

080a0e5e <_ZN9USBSerial17availableForWriteEv>:
{
 80a0e5e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0e60:	7c00      	ldrb	r0, [r0, #16]
 80a0e62:	f7ff fcfd 	bl	80a0860 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0e66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e6a:	bd08      	pop	{r3, pc}

080a0e6c <_ZN9USBSerial9availableEv>:
{
 80a0e6c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0e6e:	7c00      	ldrb	r0, [r0, #16]
 80a0e70:	f7ff fcee 	bl	80a0850 <HAL_USB_USART_Available_Data>
}
 80a0e74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e78:	bd08      	pop	{r3, pc}

080a0e7a <_ZN9USBSerial5writeEh>:
{
 80a0e7a:	b538      	push	{r3, r4, r5, lr}
 80a0e7c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0e7e:	7c00      	ldrb	r0, [r0, #16]
{
 80a0e80:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0e82:	f7ff fced 	bl	80a0860 <HAL_USB_USART_Available_Data_For_Write>
 80a0e86:	2800      	cmp	r0, #0
 80a0e88:	dc01      	bgt.n	80a0e8e <_ZN9USBSerial5writeEh+0x14>
 80a0e8a:	7c60      	ldrb	r0, [r4, #17]
 80a0e8c:	b128      	cbz	r0, 80a0e9a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0e8e:	4629      	mov	r1, r5
 80a0e90:	7c20      	ldrb	r0, [r4, #16]
 80a0e92:	f7ff fcf5 	bl	80a0880 <HAL_USB_USART_Send_Data>
 80a0e96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0e9a:	bd38      	pop	{r3, r4, r5, pc}

080a0e9c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0e9c:	7c00      	ldrb	r0, [r0, #16]
 80a0e9e:	f7ff bcf7 	b.w	80a0890 <HAL_USB_USART_Flush_Data>

080a0ea2 <_ZN9USBSerialD0Ev>:
 80a0ea2:	b510      	push	{r4, lr}
 80a0ea4:	4604      	mov	r4, r0
 80a0ea6:	2114      	movs	r1, #20
 80a0ea8:	f000 fb1b 	bl	80a14e2 <_ZdlPvj>
 80a0eac:	4620      	mov	r0, r4
 80a0eae:	bd10      	pop	{r4, pc}

080a0eb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0eb0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0eb6:	4604      	mov	r4, r0
 80a0eb8:	4608      	mov	r0, r1
 80a0eba:	2100      	movs	r1, #0
 80a0ebc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0ec0:	4b04      	ldr	r3, [pc, #16]	; (80a0ed4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0ec2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0ec4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0ec6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0ec8:	4611      	mov	r1, r2
  _blocking = true;
 80a0eca:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0ecc:	f7ff fcb0 	bl	80a0830 <HAL_USB_USART_Init>
}
 80a0ed0:	4620      	mov	r0, r4
 80a0ed2:	bd10      	pop	{r4, pc}
 80a0ed4:	080a1f54 	.word	0x080a1f54

080a0ed8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0ed8:	2200      	movs	r2, #0
 80a0eda:	7c00      	ldrb	r0, [r0, #16]
 80a0edc:	f7ff bcb0 	b.w	80a0840 <HAL_USB_USART_Begin>

080a0ee0 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
 80a0ee0:	7c00      	ldrb	r0, [r0, #16]
 80a0ee2:	f7ff bcdd 	b.w	80a08a0 <HAL_USB_USART_Is_Connected>
	...

080a0ee8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0ee8:	b510      	push	{r4, lr}
 80a0eea:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0eec:	2214      	movs	r2, #20
 80a0eee:	2100      	movs	r1, #0
 80a0ef0:	f000 ff12 	bl	80a1d18 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0ef4:	4b05      	ldr	r3, [pc, #20]	; (80a0f0c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0ef6:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a0ef8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0efa:	4b05      	ldr	r3, [pc, #20]	; (80a0f10 <_Z19acquireSerialBufferv+0x28>)
 80a0efc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0efe:	f240 1301 	movw	r3, #257	; 0x101
 80a0f02:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0f04:	2381      	movs	r3, #129	; 0x81
 80a0f06:	8223      	strh	r3, [r4, #16]
}
 80a0f08:	bd10      	pop	{r4, pc}
 80a0f0a:	bf00      	nop
 80a0f0c:	20000138 	.word	0x20000138
 80a0f10:	20000239 	.word	0x20000239

080a0f14 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0f14:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0f16:	4d0f      	ldr	r5, [pc, #60]	; (80a0f54 <_Z16_fetch_usbserialv+0x40>)
{
 80a0f18:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0f1a:	a801      	add	r0, sp, #4
 80a0f1c:	f7ff ffe4 	bl	80a0ee8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0f20:	7829      	ldrb	r1, [r5, #0]
 80a0f22:	f3bf 8f5b 	dmb	ish
 80a0f26:	f011 0401 	ands.w	r4, r1, #1
 80a0f2a:	d110      	bne.n	80a0f4e <_Z16_fetch_usbserialv+0x3a>
 80a0f2c:	4628      	mov	r0, r5
 80a0f2e:	f7ff f8ba 	bl	80a00a6 <__cxa_guard_acquire>
 80a0f32:	b160      	cbz	r0, 80a0f4e <_Z16_fetch_usbserialv+0x3a>
 80a0f34:	4621      	mov	r1, r4
 80a0f36:	aa01      	add	r2, sp, #4
 80a0f38:	4807      	ldr	r0, [pc, #28]	; (80a0f58 <_Z16_fetch_usbserialv+0x44>)
 80a0f3a:	f7ff ffb9 	bl	80a0eb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0f3e:	4628      	mov	r0, r5
 80a0f40:	f7ff f8b6 	bl	80a00b0 <__cxa_guard_release>
 80a0f44:	4a05      	ldr	r2, [pc, #20]	; (80a0f5c <_Z16_fetch_usbserialv+0x48>)
 80a0f46:	4906      	ldr	r1, [pc, #24]	; (80a0f60 <_Z16_fetch_usbserialv+0x4c>)
 80a0f48:	4803      	ldr	r0, [pc, #12]	; (80a0f58 <_Z16_fetch_usbserialv+0x44>)
 80a0f4a:	f000 fac5 	bl	80a14d8 <__aeabi_atexit>
	return _usbserial;
}
 80a0f4e:	4802      	ldr	r0, [pc, #8]	; (80a0f58 <_Z16_fetch_usbserialv+0x44>)
 80a0f50:	b007      	add	sp, #28
 80a0f52:	bd30      	pop	{r4, r5, pc}
 80a0f54:	20000108 	.word	0x20000108
 80a0f58:	20000110 	.word	0x20000110
 80a0f5c:	2000007c 	.word	0x2000007c
 80a0f60:	080a0e3d 	.word	0x080a0e3d

080a0f64 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0f64:	b510      	push	{r4, lr}
 80a0f66:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0f68:	2214      	movs	r2, #20
 80a0f6a:	2100      	movs	r1, #0
 80a0f6c:	f000 fed4 	bl	80a1d18 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0f70:	4b05      	ldr	r3, [pc, #20]	; (80a0f88 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0f72:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a0f74:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0f76:	4b05      	ldr	r3, [pc, #20]	; (80a0f8c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0f78:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0f7a:	f240 1301 	movw	r3, #257	; 0x101
 80a0f7e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0f80:	2381      	movs	r3, #129	; 0x81
 80a0f82:	8223      	strh	r3, [r4, #16]
}
 80a0f84:	bd10      	pop	{r4, pc}
 80a0f86:	bf00      	nop
 80a0f88:	200002ba 	.word	0x200002ba
 80a0f8c:	200003bb 	.word	0x200003bb

080a0f90 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0f90:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0f92:	4c0f      	ldr	r4, [pc, #60]	; (80a0fd0 <_Z17_fetch_usbserial1v+0x40>)
{
 80a0f94:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0f96:	a801      	add	r0, sp, #4
 80a0f98:	f7ff ffe4 	bl	80a0f64 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0f9c:	7823      	ldrb	r3, [r4, #0]
 80a0f9e:	f3bf 8f5b 	dmb	ish
 80a0fa2:	07db      	lsls	r3, r3, #31
 80a0fa4:	d410      	bmi.n	80a0fc8 <_Z17_fetch_usbserial1v+0x38>
 80a0fa6:	4620      	mov	r0, r4
 80a0fa8:	f7ff f87d 	bl	80a00a6 <__cxa_guard_acquire>
 80a0fac:	b160      	cbz	r0, 80a0fc8 <_Z17_fetch_usbserial1v+0x38>
 80a0fae:	2101      	movs	r1, #1
 80a0fb0:	aa01      	add	r2, sp, #4
 80a0fb2:	4808      	ldr	r0, [pc, #32]	; (80a0fd4 <_Z17_fetch_usbserial1v+0x44>)
 80a0fb4:	f7ff ff7c 	bl	80a0eb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0fb8:	4620      	mov	r0, r4
 80a0fba:	f7ff f879 	bl	80a00b0 <__cxa_guard_release>
 80a0fbe:	4a06      	ldr	r2, [pc, #24]	; (80a0fd8 <_Z17_fetch_usbserial1v+0x48>)
 80a0fc0:	4906      	ldr	r1, [pc, #24]	; (80a0fdc <_Z17_fetch_usbserial1v+0x4c>)
 80a0fc2:	4804      	ldr	r0, [pc, #16]	; (80a0fd4 <_Z17_fetch_usbserial1v+0x44>)
 80a0fc4:	f000 fa88 	bl	80a14d8 <__aeabi_atexit>
  return _usbserial1;
}
 80a0fc8:	4802      	ldr	r0, [pc, #8]	; (80a0fd4 <_Z17_fetch_usbserial1v+0x44>)
 80a0fca:	b006      	add	sp, #24
 80a0fcc:	bd10      	pop	{r4, pc}
 80a0fce:	bf00      	nop
 80a0fd0:	2000010c 	.word	0x2000010c
 80a0fd4:	20000124 	.word	0x20000124
 80a0fd8:	2000007c 	.word	0x2000007c
 80a0fdc:	080a0e3d 	.word	0x080a0e3d

080a0fe0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a0fe0:	4700      	bx	r0
	...

080a0fe4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a0fe4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a0fe8:	2400      	movs	r4, #0
{
 80a0fea:	461d      	mov	r5, r3
 80a0fec:	460f      	mov	r7, r1
 80a0fee:	4690      	mov	r8, r2
 80a0ff0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 80a0ff2:	f7ff fb2b 	bl	80a064c <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a0ff6:	2304      	movs	r3, #4
  if (priority >= 0) {
 80a0ff8:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a0ffa:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 80a0ffe:	bfa8      	it	ge
 80a1000:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 80a1004:	f8ad 400d 	strh.w	r4, [sp, #13]
 80a1008:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 80a100c:	bfa4      	itt	ge
 80a100e:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 80a1010:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a1014:	463a      	mov	r2, r7
 80a1016:	4643      	mov	r3, r8
 80a1018:	4630      	mov	r0, r6
 80a101a:	4906      	ldr	r1, [pc, #24]	; (80a1034 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 80a101c:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a101e:	bfa8      	it	ge
 80a1020:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a1024:	f7ff fb0a 	bl	80a063c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 80a1028:	fab0 f080 	clz	r0, r0
 80a102c:	0940      	lsrs	r0, r0, #5
 80a102e:	b004      	add	sp, #16
 80a1030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1034:	080a0fe1 	.word	0x080a0fe1

080a1038 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a1038:	4770      	bx	lr

080a103a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a103a:	7441      	strb	r1, [r0, #17]
}
 80a103c:	4770      	bx	lr

080a103e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a103e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1040:	7c00      	ldrb	r0, [r0, #16]
 80a1042:	f7ff fba3 	bl	80a078c <hal_usart_available_data_for_write>
}
 80a1046:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a104a:	bd08      	pop	{r3, pc}

080a104c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a104c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a104e:	7c00      	ldrb	r0, [r0, #16]
 80a1050:	f7ff fb74 	bl	80a073c <hal_usart_available>
}
 80a1054:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1058:	bd08      	pop	{r3, pc}

080a105a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a105a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a105c:	7c00      	ldrb	r0, [r0, #16]
 80a105e:	f7ff fb7d 	bl	80a075c <hal_usart_peek>
}
 80a1062:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1066:	bd08      	pop	{r3, pc}

080a1068 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1068:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a106a:	7c00      	ldrb	r0, [r0, #16]
 80a106c:	f7ff fb6e 	bl	80a074c <hal_usart_read>
}
 80a1070:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1074:	bd08      	pop	{r3, pc}

080a1076 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a1076:	7c00      	ldrb	r0, [r0, #16]
 80a1078:	f7ff bb78 	b.w	80a076c <hal_usart_flush>

080a107c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a107c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a107e:	7c46      	ldrb	r6, [r0, #17]
{
 80a1080:	4604      	mov	r4, r0
 80a1082:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1084:	b12e      	cbz	r6, 80a1092 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a1086:	4629      	mov	r1, r5
 80a1088:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a108a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a108e:	f7ff bb4d 	b.w	80a072c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1092:	7c00      	ldrb	r0, [r0, #16]
 80a1094:	f7ff fb7a 	bl	80a078c <hal_usart_available_data_for_write>
 80a1098:	2800      	cmp	r0, #0
 80a109a:	dcf4      	bgt.n	80a1086 <_ZN11USARTSerial5writeEh+0xa>
}
 80a109c:	4630      	mov	r0, r6
 80a109e:	bd70      	pop	{r4, r5, r6, pc}

080a10a0 <_ZN11USARTSerialD0Ev>:
 80a10a0:	b510      	push	{r4, lr}
 80a10a2:	4604      	mov	r4, r0
 80a10a4:	2114      	movs	r1, #20
 80a10a6:	f000 fa1c 	bl	80a14e2 <_ZdlPvj>
 80a10aa:	4620      	mov	r0, r4
 80a10ac:	bd10      	pop	{r4, pc}
	...

080a10b0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a10b0:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a10b4:	b510      	push	{r4, lr}
 80a10b6:	4604      	mov	r4, r0
 80a10b8:	4608      	mov	r0, r1
 80a10ba:	4611      	mov	r1, r2
 80a10bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a10c0:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a10c4:	4a04      	ldr	r2, [pc, #16]	; (80a10d8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a10c6:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a10c8:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a10ca:	2201      	movs	r2, #1
 80a10cc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a10ce:	461a      	mov	r2, r3
 80a10d0:	f7ff fb24 	bl	80a071c <hal_usart_init>
}
 80a10d4:	4620      	mov	r0, r4
 80a10d6:	bd10      	pop	{r4, pc}
 80a10d8:	080a1f84 	.word	0x080a1f84

080a10dc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a10dc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a10de:	4d0d      	ldr	r5, [pc, #52]	; (80a1114 <_Z22__fetch_global_Serial1v+0x38>)
 80a10e0:	7829      	ldrb	r1, [r5, #0]
 80a10e2:	f3bf 8f5b 	dmb	ish
 80a10e6:	f011 0401 	ands.w	r4, r1, #1
 80a10ea:	d111      	bne.n	80a1110 <_Z22__fetch_global_Serial1v+0x34>
 80a10ec:	4628      	mov	r0, r5
 80a10ee:	f7fe ffda 	bl	80a00a6 <__cxa_guard_acquire>
 80a10f2:	b168      	cbz	r0, 80a1110 <_Z22__fetch_global_Serial1v+0x34>
 80a10f4:	4621      	mov	r1, r4
 80a10f6:	4a08      	ldr	r2, [pc, #32]	; (80a1118 <_Z22__fetch_global_Serial1v+0x3c>)
 80a10f8:	4b08      	ldr	r3, [pc, #32]	; (80a111c <_Z22__fetch_global_Serial1v+0x40>)
 80a10fa:	4809      	ldr	r0, [pc, #36]	; (80a1120 <_Z22__fetch_global_Serial1v+0x44>)
 80a10fc:	f7ff ffd8 	bl	80a10b0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1100:	4628      	mov	r0, r5
 80a1102:	f7fe ffd5 	bl	80a00b0 <__cxa_guard_release>
 80a1106:	4a07      	ldr	r2, [pc, #28]	; (80a1124 <_Z22__fetch_global_Serial1v+0x48>)
 80a1108:	4907      	ldr	r1, [pc, #28]	; (80a1128 <_Z22__fetch_global_Serial1v+0x4c>)
 80a110a:	4805      	ldr	r0, [pc, #20]	; (80a1120 <_Z22__fetch_global_Serial1v+0x44>)
 80a110c:	f000 f9e4 	bl	80a14d8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1110:	4803      	ldr	r0, [pc, #12]	; (80a1120 <_Z22__fetch_global_Serial1v+0x44>)
 80a1112:	bd38      	pop	{r3, r4, r5, pc}
 80a1114:	2000043c 	.word	0x2000043c
 80a1118:	20000440 	.word	0x20000440
 80a111c:	200004c4 	.word	0x200004c4
 80a1120:	20000548 	.word	0x20000548
 80a1124:	2000007c 	.word	0x2000007c
 80a1128:	080a1039 	.word	0x080a1039

080a112c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a112c:	4770      	bx	lr

080a112e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a112e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1130:	4606      	mov	r6, r0
 80a1132:	4615      	mov	r5, r2
 80a1134:	460c      	mov	r4, r1
 80a1136:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1138:	42bc      	cmp	r4, r7
 80a113a:	d006      	beq.n	80a114a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a113c:	6833      	ldr	r3, [r6, #0]
 80a113e:	4630      	mov	r0, r6
 80a1140:	689b      	ldr	r3, [r3, #8]
 80a1142:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1146:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1148:	e7f6      	b.n	80a1138 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a114a:	4628      	mov	r0, r5
 80a114c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a114e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a114e:	2200      	movs	r2, #0
 80a1150:	7c00      	ldrb	r0, [r0, #16]
 80a1152:	f7ff bb23 	b.w	80a079c <hal_i2c_write>

080a1156 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1156:	2100      	movs	r1, #0
 80a1158:	7c00      	ldrb	r0, [r0, #16]
 80a115a:	f7ff bb27 	b.w	80a07ac <hal_i2c_available>

080a115e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a115e:	2100      	movs	r1, #0
 80a1160:	7c00      	ldrb	r0, [r0, #16]
 80a1162:	f7ff bb2b 	b.w	80a07bc <hal_i2c_read>

080a1166 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1166:	2100      	movs	r1, #0
 80a1168:	7c00      	ldrb	r0, [r0, #16]
 80a116a:	f7ff bb2f 	b.w	80a07cc <hal_i2c_peek>

080a116e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a116e:	2100      	movs	r1, #0
 80a1170:	7c00      	ldrb	r0, [r0, #16]
 80a1172:	f7ff bb33 	b.w	80a07dc <hal_i2c_flush>

080a1176 <_ZN7TwoWireD0Ev>:
 80a1176:	b510      	push	{r4, lr}
 80a1178:	4604      	mov	r4, r0
 80a117a:	2114      	movs	r1, #20
 80a117c:	f000 f9b1 	bl	80a14e2 <_ZdlPvj>
 80a1180:	4620      	mov	r0, r4
 80a1182:	bd10      	pop	{r4, pc}

080a1184 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1184:	b510      	push	{r4, lr}
 80a1186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a118a:	4604      	mov	r4, r0
 80a118c:	4608      	mov	r0, r1
 80a118e:	2100      	movs	r1, #0
 80a1190:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1194:	4b03      	ldr	r3, [pc, #12]	; (80a11a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a1196:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1198:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a119a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a119c:	f7ff fb2e 	bl	80a07fc <hal_i2c_init>
}
 80a11a0:	4620      	mov	r0, r4
 80a11a2:	bd10      	pop	{r4, pc}
 80a11a4:	080a1fb4 	.word	0x080a1fb4

080a11a8 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a11a8:	2200      	movs	r2, #0
 80a11aa:	6840      	ldr	r0, [r0, #4]
 80a11ac:	4611      	mov	r1, r2
 80a11ae:	f7ff bbc3 	b.w	80a0938 <network_ready>

080a11b2 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a11b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a11b4:	4615      	mov	r5, r2
 80a11b6:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a11b8:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a11ba:	460e      	mov	r6, r1
 80a11bc:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a11be:	2100      	movs	r1, #0
 80a11c0:	a803      	add	r0, sp, #12
 80a11c2:	f000 fda9 	bl	80a1d18 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a11c6:	4628      	mov	r0, r5
 80a11c8:	f000 fdd2 	bl	80a1d70 <strlen>
 80a11cc:	2700      	movs	r7, #0
 80a11ce:	b281      	uxth	r1, r0
 80a11d0:	6873      	ldr	r3, [r6, #4]
 80a11d2:	4628      	mov	r0, r5
 80a11d4:	9700      	str	r7, [sp, #0]
 80a11d6:	aa03      	add	r2, sp, #12
 80a11d8:	f7ff fb6a 	bl	80a08b0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a11dc:	b130      	cbz	r0, 80a11ec <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a11de:	4639      	mov	r1, r7
 80a11e0:	4620      	mov	r0, r4
 80a11e2:	f7ff fe07 	bl	80a0df4 <_ZN9IPAddressC1Em>
    }
 80a11e6:	4620      	mov	r0, r4
 80a11e8:	b009      	add	sp, #36	; 0x24
 80a11ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a11ec:	4620      	mov	r0, r4
 80a11ee:	a903      	add	r1, sp, #12
 80a11f0:	f7ff fdee 	bl	80a0dd0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a11f4:	e7f7      	b.n	80a11e6 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a11f6 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a11f6:	2200      	movs	r2, #0
 80a11f8:	6840      	ldr	r0, [r0, #4]
 80a11fa:	4611      	mov	r1, r2
 80a11fc:	f7ff bbbc 	b.w	80a0978 <network_listening>

080a1200 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1200:	2200      	movs	r2, #0
 80a1202:	6840      	ldr	r0, [r0, #4]
 80a1204:	4611      	mov	r1, r2
 80a1206:	f7ff bbc7 	b.w	80a0998 <network_get_listen_timeout>

080a120a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a120a:	2200      	movs	r2, #0
 80a120c:	6840      	ldr	r0, [r0, #4]
 80a120e:	f7ff bbbb 	b.w	80a0988 <network_set_listen_timeout>

080a1212 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1212:	2200      	movs	r2, #0
 80a1214:	6840      	ldr	r0, [r0, #4]
 80a1216:	f081 0101 	eor.w	r1, r1, #1
 80a121a:	f7ff bba5 	b.w	80a0968 <network_listen>

080a121e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a121e:	2300      	movs	r3, #0
 80a1220:	6840      	ldr	r0, [r0, #4]
 80a1222:	461a      	mov	r2, r3
 80a1224:	4619      	mov	r1, r3
 80a1226:	f7ff bb97 	b.w	80a0958 <network_off>

080a122a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a122a:	2200      	movs	r2, #0
 80a122c:	6840      	ldr	r0, [r0, #4]
 80a122e:	4611      	mov	r1, r2
 80a1230:	f7ff bb72 	b.w	80a0918 <network_connecting>

080a1234 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1234:	2200      	movs	r2, #0
 80a1236:	2102      	movs	r1, #2
 80a1238:	6840      	ldr	r0, [r0, #4]
 80a123a:	f7ff bb75 	b.w	80a0928 <network_disconnect>

080a123e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a123e:	2300      	movs	r3, #0
 80a1240:	6840      	ldr	r0, [r0, #4]
 80a1242:	461a      	mov	r2, r3
 80a1244:	f7ff bb60 	b.w	80a0908 <network_connect>

080a1248 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1248:	2204      	movs	r2, #4
 80a124a:	4b02      	ldr	r3, [pc, #8]	; (80a1254 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a124c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a124e:	4a02      	ldr	r2, [pc, #8]	; (80a1258 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1250:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a1252:	4770      	bx	lr
 80a1254:	2000055c 	.word	0x2000055c
 80a1258:	080a1fdc 	.word	0x080a1fdc

080a125c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a125c:	2300      	movs	r3, #0
 80a125e:	6840      	ldr	r0, [r0, #4]
 80a1260:	461a      	mov	r2, r3
 80a1262:	f7ff bb51 	b.w	80a0908 <network_connect>

080a1266 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1266:	2200      	movs	r2, #0
 80a1268:	2102      	movs	r1, #2
 80a126a:	6840      	ldr	r0, [r0, #4]
 80a126c:	f7ff bb5c 	b.w	80a0928 <network_disconnect>

080a1270 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1270:	2200      	movs	r2, #0
 80a1272:	6840      	ldr	r0, [r0, #4]
 80a1274:	4611      	mov	r1, r2
 80a1276:	f7ff bb4f 	b.w	80a0918 <network_connecting>

080a127a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a127a:	2200      	movs	r2, #0
 80a127c:	6840      	ldr	r0, [r0, #4]
 80a127e:	4611      	mov	r1, r2
 80a1280:	f7ff bb5a 	b.w	80a0938 <network_ready>

080a1284 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1284:	2300      	movs	r3, #0
 80a1286:	6840      	ldr	r0, [r0, #4]
 80a1288:	461a      	mov	r2, r3
 80a128a:	4619      	mov	r1, r3
 80a128c:	f7ff bb5c 	b.w	80a0948 <network_on>

080a1290 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1290:	2300      	movs	r3, #0
 80a1292:	6840      	ldr	r0, [r0, #4]
 80a1294:	461a      	mov	r2, r3
 80a1296:	4619      	mov	r1, r3
 80a1298:	f7ff bb5e 	b.w	80a0958 <network_off>

080a129c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a129c:	2100      	movs	r1, #0
 80a129e:	6840      	ldr	r0, [r0, #4]
 80a12a0:	f7ff bb82 	b.w	80a09a8 <network_is_on>

080a12a4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a12a4:	2100      	movs	r1, #0
 80a12a6:	6840      	ldr	r0, [r0, #4]
 80a12a8:	f7ff bb86 	b.w	80a09b8 <network_is_off>

080a12ac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a12ac:	2200      	movs	r2, #0
 80a12ae:	6840      	ldr	r0, [r0, #4]
 80a12b0:	f081 0101 	eor.w	r1, r1, #1
 80a12b4:	f7ff bb58 	b.w	80a0968 <network_listen>

080a12b8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a12b8:	2200      	movs	r2, #0
 80a12ba:	6840      	ldr	r0, [r0, #4]
 80a12bc:	f7ff bb64 	b.w	80a0988 <network_set_listen_timeout>

080a12c0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a12c0:	2200      	movs	r2, #0
 80a12c2:	6840      	ldr	r0, [r0, #4]
 80a12c4:	4611      	mov	r1, r2
 80a12c6:	f7ff bb67 	b.w	80a0998 <network_get_listen_timeout>

080a12ca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a12ca:	2200      	movs	r2, #0
 80a12cc:	6840      	ldr	r0, [r0, #4]
 80a12ce:	4611      	mov	r1, r2
 80a12d0:	f7ff bb52 	b.w	80a0978 <network_listening>

080a12d4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a12d4:	b570      	push	{r4, r5, r6, lr}
 80a12d6:	4615      	mov	r5, r2
 80a12d8:	b08e      	sub	sp, #56	; 0x38
 80a12da:	4604      	mov	r4, r0
    IPAddress addr;
 80a12dc:	a808      	add	r0, sp, #32
 80a12de:	f7ff fd69 	bl	80a0db4 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a12e2:	2211      	movs	r2, #17
 80a12e4:	2100      	movs	r1, #0
 80a12e6:	a803      	add	r0, sp, #12
 80a12e8:	f000 fd16 	bl	80a1d18 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a12ec:	2600      	movs	r6, #0
 80a12ee:	4628      	mov	r0, r5
 80a12f0:	f000 fd3e 	bl	80a1d70 <strlen>
 80a12f4:	4b0a      	ldr	r3, [pc, #40]	; (80a1320 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a12f6:	9600      	str	r6, [sp, #0]
 80a12f8:	b281      	uxth	r1, r0
 80a12fa:	685b      	ldr	r3, [r3, #4]
 80a12fc:	4628      	mov	r0, r5
 80a12fe:	aa03      	add	r2, sp, #12
 80a1300:	f7ff fad6 	bl	80a08b0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1304:	b130      	cbz	r0, 80a1314 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1306:	4631      	mov	r1, r6
 80a1308:	4620      	mov	r0, r4
 80a130a:	f7ff fd73 	bl	80a0df4 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a130e:	4620      	mov	r0, r4
 80a1310:	b00e      	add	sp, #56	; 0x38
 80a1312:	bd70      	pop	{r4, r5, r6, pc}
 80a1314:	4620      	mov	r0, r4
 80a1316:	a903      	add	r1, sp, #12
 80a1318:	f7ff fd5a 	bl	80a0dd0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a131c:	e7f7      	b.n	80a130e <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a131e:	bf00      	nop
 80a1320:	2000055c 	.word	0x2000055c

080a1324 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1324:	4b02      	ldr	r3, [pc, #8]	; (80a1330 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1326:	4a03      	ldr	r2, [pc, #12]	; (80a1334 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1328:	601a      	str	r2, [r3, #0]
 80a132a:	2200      	movs	r2, #0
 80a132c:	605a      	str	r2, [r3, #4]

} // spark
 80a132e:	4770      	bx	lr
 80a1330:	20000564 	.word	0x20000564
 80a1334:	080a2018 	.word	0x080a2018

080a1338 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a1338:	b510      	push	{r4, lr}
 80a133a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a133c:	6880      	ldr	r0, [r0, #8]
 80a133e:	b108      	cbz	r0, 80a1344 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a1340:	f7ff f9dc 	bl	80a06fc <os_mutex_recursive_destroy>
 80a1344:	4620      	mov	r0, r4
 80a1346:	bd10      	pop	{r4, pc}

080a1348 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a1348:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a134a:	b570      	push	{r4, r5, r6, lr}
 80a134c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a134e:	d901      	bls.n	80a1354 <pinAvailable+0xc>
    return false;
 80a1350:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a1352:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1354:	f1a0 030d 	sub.w	r3, r0, #13
 80a1358:	2b02      	cmp	r3, #2
 80a135a:	d90b      	bls.n	80a1374 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a135c:	2801      	cmp	r0, #1
 80a135e:	d826      	bhi.n	80a13ae <pinAvailable+0x66>
 80a1360:	f000 f892 	bl	80a1488 <_Z19__fetch_global_Wirev>
 80a1364:	2100      	movs	r1, #0
 80a1366:	7c00      	ldrb	r0, [r0, #16]
 80a1368:	f7ff fa40 	bl	80a07ec <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a136c:	f080 0001 	eor.w	r0, r0, #1
 80a1370:	b2c0      	uxtb	r0, r0
 80a1372:	e7ee      	b.n	80a1352 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a1374:	4e13      	ldr	r6, [pc, #76]	; (80a13c4 <pinAvailable+0x7c>)
 80a1376:	7831      	ldrb	r1, [r6, #0]
 80a1378:	f3bf 8f5b 	dmb	ish
 80a137c:	f011 0501 	ands.w	r5, r1, #1
 80a1380:	d10f      	bne.n	80a13a2 <pinAvailable+0x5a>
 80a1382:	4630      	mov	r0, r6
 80a1384:	f7fe fe8f 	bl	80a00a6 <__cxa_guard_acquire>
 80a1388:	b158      	cbz	r0, 80a13a2 <pinAvailable+0x5a>
 80a138a:	4629      	mov	r1, r5
 80a138c:	480e      	ldr	r0, [pc, #56]	; (80a13c8 <pinAvailable+0x80>)
 80a138e:	f7ff fb53 	bl	80a0a38 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1392:	4630      	mov	r0, r6
 80a1394:	f7fe fe8c 	bl	80a00b0 <__cxa_guard_release>
 80a1398:	4a0c      	ldr	r2, [pc, #48]	; (80a13cc <pinAvailable+0x84>)
 80a139a:	490d      	ldr	r1, [pc, #52]	; (80a13d0 <pinAvailable+0x88>)
 80a139c:	480a      	ldr	r0, [pc, #40]	; (80a13c8 <pinAvailable+0x80>)
 80a139e:	f000 f89b 	bl	80a14d8 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a13a2:	4b09      	ldr	r3, [pc, #36]	; (80a13c8 <pinAvailable+0x80>)
 80a13a4:	7818      	ldrb	r0, [r3, #0]
 80a13a6:	f7ff fa3b 	bl	80a0820 <hal_spi_is_enabled>
 80a13aa:	2800      	cmp	r0, #0
 80a13ac:	d1d0      	bne.n	80a1350 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a13ae:	3c12      	subs	r4, #18
 80a13b0:	2c01      	cmp	r4, #1
 80a13b2:	d805      	bhi.n	80a13c0 <pinAvailable+0x78>
 80a13b4:	f7ff fe92 	bl	80a10dc <_Z22__fetch_global_Serial1v>
 80a13b8:	7c00      	ldrb	r0, [r0, #16]
 80a13ba:	f7ff f9df 	bl	80a077c <hal_usart_is_enabled>
 80a13be:	e7d5      	b.n	80a136c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a13c0:	2001      	movs	r0, #1
 80a13c2:	e7c6      	b.n	80a1352 <pinAvailable+0xa>
 80a13c4:	2000056c 	.word	0x2000056c
 80a13c8:	20000570 	.word	0x20000570
 80a13cc:	2000007c 	.word	0x2000007c
 80a13d0:	080a1339 	.word	0x080a1339

080a13d4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a13d4:	2817      	cmp	r0, #23
{
 80a13d6:	b538      	push	{r3, r4, r5, lr}
 80a13d8:	4604      	mov	r4, r0
 80a13da:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a13dc:	d80a      	bhi.n	80a13f4 <pinMode+0x20>
 80a13de:	29ff      	cmp	r1, #255	; 0xff
 80a13e0:	d008      	beq.n	80a13f4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a13e2:	f7ff ffb1 	bl	80a1348 <pinAvailable>
 80a13e6:	b128      	cbz	r0, 80a13f4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a13e8:	4629      	mov	r1, r5
 80a13ea:	4620      	mov	r0, r4
}
 80a13ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a13f0:	f7ff b90c 	b.w	80a060c <HAL_Pin_Mode>
}
 80a13f4:	bd38      	pop	{r3, r4, r5, pc}

080a13f6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a13f6:	b538      	push	{r3, r4, r5, lr}
 80a13f8:	4604      	mov	r4, r0
 80a13fa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a13fc:	f7ff f90e 	bl	80a061c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1400:	28ff      	cmp	r0, #255	; 0xff
 80a1402:	d010      	beq.n	80a1426 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a1404:	2806      	cmp	r0, #6
 80a1406:	d804      	bhi.n	80a1412 <digitalWrite+0x1c>
 80a1408:	234d      	movs	r3, #77	; 0x4d
 80a140a:	fa23 f000 	lsr.w	r0, r3, r0
 80a140e:	07c3      	lsls	r3, r0, #31
 80a1410:	d409      	bmi.n	80a1426 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1412:	4620      	mov	r0, r4
 80a1414:	f7ff ff98 	bl	80a1348 <pinAvailable>
 80a1418:	b128      	cbz	r0, 80a1426 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a141a:	4629      	mov	r1, r5
 80a141c:	4620      	mov	r0, r4
}
 80a141e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a1422:	f7ff b903 	b.w	80a062c <HAL_GPIO_Write>
}
 80a1426:	bd38      	pop	{r3, r4, r5, pc}

080a1428 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1428:	2300      	movs	r3, #0
 80a142a:	b513      	push	{r0, r1, r4, lr}
 80a142c:	4c07      	ldr	r4, [pc, #28]	; (80a144c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a142e:	461a      	mov	r2, r3
 80a1430:	4619      	mov	r1, r3
 80a1432:	4620      	mov	r0, r4
 80a1434:	9300      	str	r3, [sp, #0]
 80a1436:	f7ff fcf3 	bl	80a0e20 <_ZN9IPAddressC1Ehhhh>
 80a143a:	4620      	mov	r0, r4
 80a143c:	4a04      	ldr	r2, [pc, #16]	; (80a1450 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a143e:	4905      	ldr	r1, [pc, #20]	; (80a1454 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1440:	b002      	add	sp, #8
 80a1442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1446:	f000 b847 	b.w	80a14d8 <__aeabi_atexit>
 80a144a:	bf00      	nop
 80a144c:	20000580 	.word	0x20000580
 80a1450:	2000007c 	.word	0x2000007c
 80a1454:	080a0d71 	.word	0x080a0d71

080a1458 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a1458:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a145a:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a145c:	2520      	movs	r5, #32
 80a145e:	8043      	strh	r3, [r0, #2]
 80a1460:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1462:	4e08      	ldr	r6, [pc, #32]	; (80a1484 <_Z17acquireWireBufferv+0x2c>)
{
 80a1464:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a1466:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1468:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a146a:	6085      	str	r5, [r0, #8]
 80a146c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a146e:	4628      	mov	r0, r5
 80a1470:	f000 f83b 	bl	80a14ea <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1474:	4631      	mov	r1, r6
	};
 80a1476:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1478:	4628      	mov	r0, r5
 80a147a:	f000 f836 	bl	80a14ea <_ZnajRKSt9nothrow_t>
	};
 80a147e:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a1480:	4620      	mov	r0, r4
 80a1482:	bd70      	pop	{r4, r5, r6, pc}
 80a1484:	080a204c 	.word	0x080a204c

080a1488 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1488:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a148a:	4d0f      	ldr	r5, [pc, #60]	; (80a14c8 <_Z19__fetch_global_Wirev+0x40>)
{
 80a148c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a148e:	7829      	ldrb	r1, [r5, #0]
 80a1490:	f3bf 8f5b 	dmb	ish
 80a1494:	f011 0401 	ands.w	r4, r1, #1
 80a1498:	d113      	bne.n	80a14c2 <_Z19__fetch_global_Wirev+0x3a>
 80a149a:	4628      	mov	r0, r5
 80a149c:	f7fe fe03 	bl	80a00a6 <__cxa_guard_acquire>
 80a14a0:	b178      	cbz	r0, 80a14c2 <_Z19__fetch_global_Wirev+0x3a>
 80a14a2:	a801      	add	r0, sp, #4
 80a14a4:	f7ff ffd8 	bl	80a1458 <_Z17acquireWireBufferv>
 80a14a8:	4621      	mov	r1, r4
 80a14aa:	aa01      	add	r2, sp, #4
 80a14ac:	4807      	ldr	r0, [pc, #28]	; (80a14cc <_Z19__fetch_global_Wirev+0x44>)
 80a14ae:	f7ff fe69 	bl	80a1184 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a14b2:	4628      	mov	r0, r5
 80a14b4:	f7fe fdfc 	bl	80a00b0 <__cxa_guard_release>
 80a14b8:	4a05      	ldr	r2, [pc, #20]	; (80a14d0 <_Z19__fetch_global_Wirev+0x48>)
 80a14ba:	4906      	ldr	r1, [pc, #24]	; (80a14d4 <_Z19__fetch_global_Wirev+0x4c>)
 80a14bc:	4803      	ldr	r0, [pc, #12]	; (80a14cc <_Z19__fetch_global_Wirev+0x44>)
 80a14be:	f000 f80b 	bl	80a14d8 <__aeabi_atexit>
	return wire;
}
 80a14c2:	4802      	ldr	r0, [pc, #8]	; (80a14cc <_Z19__fetch_global_Wirev+0x44>)
 80a14c4:	b007      	add	sp, #28
 80a14c6:	bd30      	pop	{r4, r5, pc}
 80a14c8:	20000598 	.word	0x20000598
 80a14cc:	2000059c 	.word	0x2000059c
 80a14d0:	2000007c 	.word	0x2000007c
 80a14d4:	080a112d 	.word	0x080a112d

080a14d8 <__aeabi_atexit>:
 80a14d8:	460b      	mov	r3, r1
 80a14da:	4601      	mov	r1, r0
 80a14dc:	4618      	mov	r0, r3
 80a14de:	f000 bbff 	b.w	80a1ce0 <__cxa_atexit>

080a14e2 <_ZdlPvj>:
 80a14e2:	f7fe bdde 	b.w	80a00a2 <_ZdlPv>

080a14e6 <_ZnwjRKSt9nothrow_t>:
 80a14e6:	f7fe bdd8 	b.w	80a009a <_Znwj>

080a14ea <_ZnajRKSt9nothrow_t>:
 80a14ea:	f7fe bdd8 	b.w	80a009e <_Znaj>

080a14ee <_ZSt25__throw_bad_function_callv>:
 80a14ee:	b508      	push	{r3, lr}
 80a14f0:	f7ff fa92 	bl	80a0a18 <abort>

080a14f4 <__aeabi_drsub>:
 80a14f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a14f8:	e002      	b.n	80a1500 <__adddf3>
 80a14fa:	bf00      	nop

080a14fc <__aeabi_dsub>:
 80a14fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1500 <__adddf3>:
 80a1500:	b530      	push	{r4, r5, lr}
 80a1502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a150a:	ea94 0f05 	teq	r4, r5
 80a150e:	bf08      	it	eq
 80a1510:	ea90 0f02 	teqeq	r0, r2
 80a1514:	bf1f      	itttt	ne
 80a1516:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a151a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a151e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1526:	f000 80e2 	beq.w	80a16ee <__adddf3+0x1ee>
 80a152a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a152e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1532:	bfb8      	it	lt
 80a1534:	426d      	neglt	r5, r5
 80a1536:	dd0c      	ble.n	80a1552 <__adddf3+0x52>
 80a1538:	442c      	add	r4, r5
 80a153a:	ea80 0202 	eor.w	r2, r0, r2
 80a153e:	ea81 0303 	eor.w	r3, r1, r3
 80a1542:	ea82 0000 	eor.w	r0, r2, r0
 80a1546:	ea83 0101 	eor.w	r1, r3, r1
 80a154a:	ea80 0202 	eor.w	r2, r0, r2
 80a154e:	ea81 0303 	eor.w	r3, r1, r3
 80a1552:	2d36      	cmp	r5, #54	; 0x36
 80a1554:	bf88      	it	hi
 80a1556:	bd30      	pophi	{r4, r5, pc}
 80a1558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a155c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1568:	d002      	beq.n	80a1570 <__adddf3+0x70>
 80a156a:	4240      	negs	r0, r0
 80a156c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a157c:	d002      	beq.n	80a1584 <__adddf3+0x84>
 80a157e:	4252      	negs	r2, r2
 80a1580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1584:	ea94 0f05 	teq	r4, r5
 80a1588:	f000 80a7 	beq.w	80a16da <__adddf3+0x1da>
 80a158c:	f1a4 0401 	sub.w	r4, r4, #1
 80a1590:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1594:	db0d      	blt.n	80a15b2 <__adddf3+0xb2>
 80a1596:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a159a:	fa22 f205 	lsr.w	r2, r2, r5
 80a159e:	1880      	adds	r0, r0, r2
 80a15a0:	f141 0100 	adc.w	r1, r1, #0
 80a15a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a15a8:	1880      	adds	r0, r0, r2
 80a15aa:	fa43 f305 	asr.w	r3, r3, r5
 80a15ae:	4159      	adcs	r1, r3
 80a15b0:	e00e      	b.n	80a15d0 <__adddf3+0xd0>
 80a15b2:	f1a5 0520 	sub.w	r5, r5, #32
 80a15b6:	f10e 0e20 	add.w	lr, lr, #32
 80a15ba:	2a01      	cmp	r2, #1
 80a15bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a15c0:	bf28      	it	cs
 80a15c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a15c6:	fa43 f305 	asr.w	r3, r3, r5
 80a15ca:	18c0      	adds	r0, r0, r3
 80a15cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a15d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a15d4:	d507      	bpl.n	80a15e6 <__adddf3+0xe6>
 80a15d6:	f04f 0e00 	mov.w	lr, #0
 80a15da:	f1dc 0c00 	rsbs	ip, ip, #0
 80a15de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a15e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a15e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a15ea:	d31b      	bcc.n	80a1624 <__adddf3+0x124>
 80a15ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a15f0:	d30c      	bcc.n	80a160c <__adddf3+0x10c>
 80a15f2:	0849      	lsrs	r1, r1, #1
 80a15f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a15f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a15fc:	f104 0401 	add.w	r4, r4, #1
 80a1600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1608:	f080 809a 	bcs.w	80a1740 <__adddf3+0x240>
 80a160c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1610:	bf08      	it	eq
 80a1612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1616:	f150 0000 	adcs.w	r0, r0, #0
 80a161a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a161e:	ea41 0105 	orr.w	r1, r1, r5
 80a1622:	bd30      	pop	{r4, r5, pc}
 80a1624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1628:	4140      	adcs	r0, r0
 80a162a:	eb41 0101 	adc.w	r1, r1, r1
 80a162e:	3c01      	subs	r4, #1
 80a1630:	bf28      	it	cs
 80a1632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a1636:	d2e9      	bcs.n	80a160c <__adddf3+0x10c>
 80a1638:	f091 0f00 	teq	r1, #0
 80a163c:	bf04      	itt	eq
 80a163e:	4601      	moveq	r1, r0
 80a1640:	2000      	moveq	r0, #0
 80a1642:	fab1 f381 	clz	r3, r1
 80a1646:	bf08      	it	eq
 80a1648:	3320      	addeq	r3, #32
 80a164a:	f1a3 030b 	sub.w	r3, r3, #11
 80a164e:	f1b3 0220 	subs.w	r2, r3, #32
 80a1652:	da0c      	bge.n	80a166e <__adddf3+0x16e>
 80a1654:	320c      	adds	r2, #12
 80a1656:	dd08      	ble.n	80a166a <__adddf3+0x16a>
 80a1658:	f102 0c14 	add.w	ip, r2, #20
 80a165c:	f1c2 020c 	rsb	r2, r2, #12
 80a1660:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1664:	fa21 f102 	lsr.w	r1, r1, r2
 80a1668:	e00c      	b.n	80a1684 <__adddf3+0x184>
 80a166a:	f102 0214 	add.w	r2, r2, #20
 80a166e:	bfd8      	it	le
 80a1670:	f1c2 0c20 	rsble	ip, r2, #32
 80a1674:	fa01 f102 	lsl.w	r1, r1, r2
 80a1678:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a167c:	bfdc      	itt	le
 80a167e:	ea41 010c 	orrle.w	r1, r1, ip
 80a1682:	4090      	lslle	r0, r2
 80a1684:	1ae4      	subs	r4, r4, r3
 80a1686:	bfa2      	ittt	ge
 80a1688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a168c:	4329      	orrge	r1, r5
 80a168e:	bd30      	popge	{r4, r5, pc}
 80a1690:	ea6f 0404 	mvn.w	r4, r4
 80a1694:	3c1f      	subs	r4, #31
 80a1696:	da1c      	bge.n	80a16d2 <__adddf3+0x1d2>
 80a1698:	340c      	adds	r4, #12
 80a169a:	dc0e      	bgt.n	80a16ba <__adddf3+0x1ba>
 80a169c:	f104 0414 	add.w	r4, r4, #20
 80a16a0:	f1c4 0220 	rsb	r2, r4, #32
 80a16a4:	fa20 f004 	lsr.w	r0, r0, r4
 80a16a8:	fa01 f302 	lsl.w	r3, r1, r2
 80a16ac:	ea40 0003 	orr.w	r0, r0, r3
 80a16b0:	fa21 f304 	lsr.w	r3, r1, r4
 80a16b4:	ea45 0103 	orr.w	r1, r5, r3
 80a16b8:	bd30      	pop	{r4, r5, pc}
 80a16ba:	f1c4 040c 	rsb	r4, r4, #12
 80a16be:	f1c4 0220 	rsb	r2, r4, #32
 80a16c2:	fa20 f002 	lsr.w	r0, r0, r2
 80a16c6:	fa01 f304 	lsl.w	r3, r1, r4
 80a16ca:	ea40 0003 	orr.w	r0, r0, r3
 80a16ce:	4629      	mov	r1, r5
 80a16d0:	bd30      	pop	{r4, r5, pc}
 80a16d2:	fa21 f004 	lsr.w	r0, r1, r4
 80a16d6:	4629      	mov	r1, r5
 80a16d8:	bd30      	pop	{r4, r5, pc}
 80a16da:	f094 0f00 	teq	r4, #0
 80a16de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a16e2:	bf06      	itte	eq
 80a16e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a16e8:	3401      	addeq	r4, #1
 80a16ea:	3d01      	subne	r5, #1
 80a16ec:	e74e      	b.n	80a158c <__adddf3+0x8c>
 80a16ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a16f2:	bf18      	it	ne
 80a16f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a16f8:	d029      	beq.n	80a174e <__adddf3+0x24e>
 80a16fa:	ea94 0f05 	teq	r4, r5
 80a16fe:	bf08      	it	eq
 80a1700:	ea90 0f02 	teqeq	r0, r2
 80a1704:	d005      	beq.n	80a1712 <__adddf3+0x212>
 80a1706:	ea54 0c00 	orrs.w	ip, r4, r0
 80a170a:	bf04      	itt	eq
 80a170c:	4619      	moveq	r1, r3
 80a170e:	4610      	moveq	r0, r2
 80a1710:	bd30      	pop	{r4, r5, pc}
 80a1712:	ea91 0f03 	teq	r1, r3
 80a1716:	bf1e      	ittt	ne
 80a1718:	2100      	movne	r1, #0
 80a171a:	2000      	movne	r0, #0
 80a171c:	bd30      	popne	{r4, r5, pc}
 80a171e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1722:	d105      	bne.n	80a1730 <__adddf3+0x230>
 80a1724:	0040      	lsls	r0, r0, #1
 80a1726:	4149      	adcs	r1, r1
 80a1728:	bf28      	it	cs
 80a172a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a172e:	bd30      	pop	{r4, r5, pc}
 80a1730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1734:	bf3c      	itt	cc
 80a1736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a173a:	bd30      	popcc	{r4, r5, pc}
 80a173c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1748:	f04f 0000 	mov.w	r0, #0
 80a174c:	bd30      	pop	{r4, r5, pc}
 80a174e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1752:	bf1a      	itte	ne
 80a1754:	4619      	movne	r1, r3
 80a1756:	4610      	movne	r0, r2
 80a1758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a175c:	bf1c      	itt	ne
 80a175e:	460b      	movne	r3, r1
 80a1760:	4602      	movne	r2, r0
 80a1762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1766:	bf06      	itte	eq
 80a1768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a176c:	ea91 0f03 	teqeq	r1, r3
 80a1770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1774:	bd30      	pop	{r4, r5, pc}
 80a1776:	bf00      	nop

080a1778 <__aeabi_ui2d>:
 80a1778:	f090 0f00 	teq	r0, #0
 80a177c:	bf04      	itt	eq
 80a177e:	2100      	moveq	r1, #0
 80a1780:	4770      	bxeq	lr
 80a1782:	b530      	push	{r4, r5, lr}
 80a1784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a178c:	f04f 0500 	mov.w	r5, #0
 80a1790:	f04f 0100 	mov.w	r1, #0
 80a1794:	e750      	b.n	80a1638 <__adddf3+0x138>
 80a1796:	bf00      	nop

080a1798 <__aeabi_i2d>:
 80a1798:	f090 0f00 	teq	r0, #0
 80a179c:	bf04      	itt	eq
 80a179e:	2100      	moveq	r1, #0
 80a17a0:	4770      	bxeq	lr
 80a17a2:	b530      	push	{r4, r5, lr}
 80a17a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a17a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a17ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a17b0:	bf48      	it	mi
 80a17b2:	4240      	negmi	r0, r0
 80a17b4:	f04f 0100 	mov.w	r1, #0
 80a17b8:	e73e      	b.n	80a1638 <__adddf3+0x138>
 80a17ba:	bf00      	nop

080a17bc <__aeabi_f2d>:
 80a17bc:	0042      	lsls	r2, r0, #1
 80a17be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a17c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a17c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a17ca:	bf1f      	itttt	ne
 80a17cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a17d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a17d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a17d8:	4770      	bxne	lr
 80a17da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a17de:	bf08      	it	eq
 80a17e0:	4770      	bxeq	lr
 80a17e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a17e6:	bf04      	itt	eq
 80a17e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a17ec:	4770      	bxeq	lr
 80a17ee:	b530      	push	{r4, r5, lr}
 80a17f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a17f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a17f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a17fc:	e71c      	b.n	80a1638 <__adddf3+0x138>
 80a17fe:	bf00      	nop

080a1800 <__aeabi_ul2d>:
 80a1800:	ea50 0201 	orrs.w	r2, r0, r1
 80a1804:	bf08      	it	eq
 80a1806:	4770      	bxeq	lr
 80a1808:	b530      	push	{r4, r5, lr}
 80a180a:	f04f 0500 	mov.w	r5, #0
 80a180e:	e00a      	b.n	80a1826 <__aeabi_l2d+0x16>

080a1810 <__aeabi_l2d>:
 80a1810:	ea50 0201 	orrs.w	r2, r0, r1
 80a1814:	bf08      	it	eq
 80a1816:	4770      	bxeq	lr
 80a1818:	b530      	push	{r4, r5, lr}
 80a181a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a181e:	d502      	bpl.n	80a1826 <__aeabi_l2d+0x16>
 80a1820:	4240      	negs	r0, r0
 80a1822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a182a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a182e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1832:	f43f aed8 	beq.w	80a15e6 <__adddf3+0xe6>
 80a1836:	f04f 0203 	mov.w	r2, #3
 80a183a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a183e:	bf18      	it	ne
 80a1840:	3203      	addne	r2, #3
 80a1842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1846:	bf18      	it	ne
 80a1848:	3203      	addne	r2, #3
 80a184a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a184e:	f1c2 0320 	rsb	r3, r2, #32
 80a1852:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1856:	fa20 f002 	lsr.w	r0, r0, r2
 80a185a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a185e:	ea40 000e 	orr.w	r0, r0, lr
 80a1862:	fa21 f102 	lsr.w	r1, r1, r2
 80a1866:	4414      	add	r4, r2
 80a1868:	e6bd      	b.n	80a15e6 <__adddf3+0xe6>
 80a186a:	bf00      	nop

080a186c <__aeabi_dmul>:
 80a186c:	b570      	push	{r4, r5, r6, lr}
 80a186e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a187a:	bf1d      	ittte	ne
 80a187c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1880:	ea94 0f0c 	teqne	r4, ip
 80a1884:	ea95 0f0c 	teqne	r5, ip
 80a1888:	f000 f8de 	bleq	80a1a48 <__aeabi_dmul+0x1dc>
 80a188c:	442c      	add	r4, r5
 80a188e:	ea81 0603 	eor.w	r6, r1, r3
 80a1892:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1896:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a189a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a189e:	bf18      	it	ne
 80a18a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a18a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a18a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a18ac:	d038      	beq.n	80a1920 <__aeabi_dmul+0xb4>
 80a18ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80a18b2:	f04f 0500 	mov.w	r5, #0
 80a18b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a18ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a18be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a18c2:	f04f 0600 	mov.w	r6, #0
 80a18c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a18ca:	f09c 0f00 	teq	ip, #0
 80a18ce:	bf18      	it	ne
 80a18d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80a18d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a18d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a18dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a18e0:	d204      	bcs.n	80a18ec <__aeabi_dmul+0x80>
 80a18e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a18e6:	416d      	adcs	r5, r5
 80a18e8:	eb46 0606 	adc.w	r6, r6, r6
 80a18ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a18f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a18f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a18f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a18fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1900:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1904:	bf88      	it	hi
 80a1906:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a190a:	d81e      	bhi.n	80a194a <__aeabi_dmul+0xde>
 80a190c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1910:	bf08      	it	eq
 80a1912:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1916:	f150 0000 	adcs.w	r0, r0, #0
 80a191a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a191e:	bd70      	pop	{r4, r5, r6, pc}
 80a1920:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1924:	ea46 0101 	orr.w	r1, r6, r1
 80a1928:	ea40 0002 	orr.w	r0, r0, r2
 80a192c:	ea81 0103 	eor.w	r1, r1, r3
 80a1930:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1934:	bfc2      	ittt	gt
 80a1936:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a193a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a193e:	bd70      	popgt	{r4, r5, r6, pc}
 80a1940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1944:	f04f 0e00 	mov.w	lr, #0
 80a1948:	3c01      	subs	r4, #1
 80a194a:	f300 80ab 	bgt.w	80a1aa4 <__aeabi_dmul+0x238>
 80a194e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1952:	bfde      	ittt	le
 80a1954:	2000      	movle	r0, #0
 80a1956:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a195a:	bd70      	pople	{r4, r5, r6, pc}
 80a195c:	f1c4 0400 	rsb	r4, r4, #0
 80a1960:	3c20      	subs	r4, #32
 80a1962:	da35      	bge.n	80a19d0 <__aeabi_dmul+0x164>
 80a1964:	340c      	adds	r4, #12
 80a1966:	dc1b      	bgt.n	80a19a0 <__aeabi_dmul+0x134>
 80a1968:	f104 0414 	add.w	r4, r4, #20
 80a196c:	f1c4 0520 	rsb	r5, r4, #32
 80a1970:	fa00 f305 	lsl.w	r3, r0, r5
 80a1974:	fa20 f004 	lsr.w	r0, r0, r4
 80a1978:	fa01 f205 	lsl.w	r2, r1, r5
 80a197c:	ea40 0002 	orr.w	r0, r0, r2
 80a1980:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1984:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1988:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a198c:	fa21 f604 	lsr.w	r6, r1, r4
 80a1990:	eb42 0106 	adc.w	r1, r2, r6
 80a1994:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1998:	bf08      	it	eq
 80a199a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a199e:	bd70      	pop	{r4, r5, r6, pc}
 80a19a0:	f1c4 040c 	rsb	r4, r4, #12
 80a19a4:	f1c4 0520 	rsb	r5, r4, #32
 80a19a8:	fa00 f304 	lsl.w	r3, r0, r4
 80a19ac:	fa20 f005 	lsr.w	r0, r0, r5
 80a19b0:	fa01 f204 	lsl.w	r2, r1, r4
 80a19b4:	ea40 0002 	orr.w	r0, r0, r2
 80a19b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a19bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a19c0:	f141 0100 	adc.w	r1, r1, #0
 80a19c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a19c8:	bf08      	it	eq
 80a19ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a19ce:	bd70      	pop	{r4, r5, r6, pc}
 80a19d0:	f1c4 0520 	rsb	r5, r4, #32
 80a19d4:	fa00 f205 	lsl.w	r2, r0, r5
 80a19d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80a19dc:	fa20 f304 	lsr.w	r3, r0, r4
 80a19e0:	fa01 f205 	lsl.w	r2, r1, r5
 80a19e4:	ea43 0302 	orr.w	r3, r3, r2
 80a19e8:	fa21 f004 	lsr.w	r0, r1, r4
 80a19ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a19f0:	fa21 f204 	lsr.w	r2, r1, r4
 80a19f4:	ea20 0002 	bic.w	r0, r0, r2
 80a19f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a19fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1a00:	bf08      	it	eq
 80a1a02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1a06:	bd70      	pop	{r4, r5, r6, pc}
 80a1a08:	f094 0f00 	teq	r4, #0
 80a1a0c:	d10f      	bne.n	80a1a2e <__aeabi_dmul+0x1c2>
 80a1a0e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a1a12:	0040      	lsls	r0, r0, #1
 80a1a14:	eb41 0101 	adc.w	r1, r1, r1
 80a1a18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1a1c:	bf08      	it	eq
 80a1a1e:	3c01      	subeq	r4, #1
 80a1a20:	d0f7      	beq.n	80a1a12 <__aeabi_dmul+0x1a6>
 80a1a22:	ea41 0106 	orr.w	r1, r1, r6
 80a1a26:	f095 0f00 	teq	r5, #0
 80a1a2a:	bf18      	it	ne
 80a1a2c:	4770      	bxne	lr
 80a1a2e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a1a32:	0052      	lsls	r2, r2, #1
 80a1a34:	eb43 0303 	adc.w	r3, r3, r3
 80a1a38:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a1a3c:	bf08      	it	eq
 80a1a3e:	3d01      	subeq	r5, #1
 80a1a40:	d0f7      	beq.n	80a1a32 <__aeabi_dmul+0x1c6>
 80a1a42:	ea43 0306 	orr.w	r3, r3, r6
 80a1a46:	4770      	bx	lr
 80a1a48:	ea94 0f0c 	teq	r4, ip
 80a1a4c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1a50:	bf18      	it	ne
 80a1a52:	ea95 0f0c 	teqne	r5, ip
 80a1a56:	d00c      	beq.n	80a1a72 <__aeabi_dmul+0x206>
 80a1a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1a5c:	bf18      	it	ne
 80a1a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1a62:	d1d1      	bne.n	80a1a08 <__aeabi_dmul+0x19c>
 80a1a64:	ea81 0103 	eor.w	r1, r1, r3
 80a1a68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1a6c:	f04f 0000 	mov.w	r0, #0
 80a1a70:	bd70      	pop	{r4, r5, r6, pc}
 80a1a72:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1a76:	bf06      	itte	eq
 80a1a78:	4610      	moveq	r0, r2
 80a1a7a:	4619      	moveq	r1, r3
 80a1a7c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1a80:	d019      	beq.n	80a1ab6 <__aeabi_dmul+0x24a>
 80a1a82:	ea94 0f0c 	teq	r4, ip
 80a1a86:	d102      	bne.n	80a1a8e <__aeabi_dmul+0x222>
 80a1a88:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a1a8c:	d113      	bne.n	80a1ab6 <__aeabi_dmul+0x24a>
 80a1a8e:	ea95 0f0c 	teq	r5, ip
 80a1a92:	d105      	bne.n	80a1aa0 <__aeabi_dmul+0x234>
 80a1a94:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a1a98:	bf1c      	itt	ne
 80a1a9a:	4610      	movne	r0, r2
 80a1a9c:	4619      	movne	r1, r3
 80a1a9e:	d10a      	bne.n	80a1ab6 <__aeabi_dmul+0x24a>
 80a1aa0:	ea81 0103 	eor.w	r1, r1, r3
 80a1aa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1aa8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1aac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1ab0:	f04f 0000 	mov.w	r0, #0
 80a1ab4:	bd70      	pop	{r4, r5, r6, pc}
 80a1ab6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1aba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a1abe:	bd70      	pop	{r4, r5, r6, pc}

080a1ac0 <__aeabi_ddiv>:
 80a1ac0:	b570      	push	{r4, r5, r6, lr}
 80a1ac2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1ac6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1aca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1ace:	bf1d      	ittte	ne
 80a1ad0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1ad4:	ea94 0f0c 	teqne	r4, ip
 80a1ad8:	ea95 0f0c 	teqne	r5, ip
 80a1adc:	f000 f8a7 	bleq	80a1c2e <__aeabi_ddiv+0x16e>
 80a1ae0:	eba4 0405 	sub.w	r4, r4, r5
 80a1ae4:	ea81 0e03 	eor.w	lr, r1, r3
 80a1ae8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1aec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1af0:	f000 8088 	beq.w	80a1c04 <__aeabi_ddiv+0x144>
 80a1af4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1af8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a1afc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a1b00:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a1b04:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a1b08:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a1b0c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a1b10:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a1b14:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a1b18:	429d      	cmp	r5, r3
 80a1b1a:	bf08      	it	eq
 80a1b1c:	4296      	cmpeq	r6, r2
 80a1b1e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a1b22:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a1b26:	d202      	bcs.n	80a1b2e <__aeabi_ddiv+0x6e>
 80a1b28:	085b      	lsrs	r3, r3, #1
 80a1b2a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1b2e:	1ab6      	subs	r6, r6, r2
 80a1b30:	eb65 0503 	sbc.w	r5, r5, r3
 80a1b34:	085b      	lsrs	r3, r3, #1
 80a1b36:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1b3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a1b3e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a1b42:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1b46:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1b4a:	bf22      	ittt	cs
 80a1b4c:	1ab6      	subcs	r6, r6, r2
 80a1b4e:	4675      	movcs	r5, lr
 80a1b50:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1b54:	085b      	lsrs	r3, r3, #1
 80a1b56:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1b5a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1b5e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1b62:	bf22      	ittt	cs
 80a1b64:	1ab6      	subcs	r6, r6, r2
 80a1b66:	4675      	movcs	r5, lr
 80a1b68:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a1b6c:	085b      	lsrs	r3, r3, #1
 80a1b6e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1b72:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1b76:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1b7a:	bf22      	ittt	cs
 80a1b7c:	1ab6      	subcs	r6, r6, r2
 80a1b7e:	4675      	movcs	r5, lr
 80a1b80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a1b84:	085b      	lsrs	r3, r3, #1
 80a1b86:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1b8a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1b8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1b92:	bf22      	ittt	cs
 80a1b94:	1ab6      	subcs	r6, r6, r2
 80a1b96:	4675      	movcs	r5, lr
 80a1b98:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a1b9c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a1ba0:	d018      	beq.n	80a1bd4 <__aeabi_ddiv+0x114>
 80a1ba2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a1ba6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a1baa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a1bae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a1bb2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a1bb6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a1bba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a1bbe:	d1c0      	bne.n	80a1b42 <__aeabi_ddiv+0x82>
 80a1bc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1bc4:	d10b      	bne.n	80a1bde <__aeabi_ddiv+0x11e>
 80a1bc6:	ea41 0100 	orr.w	r1, r1, r0
 80a1bca:	f04f 0000 	mov.w	r0, #0
 80a1bce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a1bd2:	e7b6      	b.n	80a1b42 <__aeabi_ddiv+0x82>
 80a1bd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1bd8:	bf04      	itt	eq
 80a1bda:	4301      	orreq	r1, r0
 80a1bdc:	2000      	moveq	r0, #0
 80a1bde:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1be2:	bf88      	it	hi
 80a1be4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1be8:	f63f aeaf 	bhi.w	80a194a <__aeabi_dmul+0xde>
 80a1bec:	ebb5 0c03 	subs.w	ip, r5, r3
 80a1bf0:	bf04      	itt	eq
 80a1bf2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a1bf6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1bfa:	f150 0000 	adcs.w	r0, r0, #0
 80a1bfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1c02:	bd70      	pop	{r4, r5, r6, pc}
 80a1c04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a1c08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a1c0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a1c10:	bfc2      	ittt	gt
 80a1c12:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1c16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1c1a:	bd70      	popgt	{r4, r5, r6, pc}
 80a1c1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1c20:	f04f 0e00 	mov.w	lr, #0
 80a1c24:	3c01      	subs	r4, #1
 80a1c26:	e690      	b.n	80a194a <__aeabi_dmul+0xde>
 80a1c28:	ea45 0e06 	orr.w	lr, r5, r6
 80a1c2c:	e68d      	b.n	80a194a <__aeabi_dmul+0xde>
 80a1c2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1c32:	ea94 0f0c 	teq	r4, ip
 80a1c36:	bf08      	it	eq
 80a1c38:	ea95 0f0c 	teqeq	r5, ip
 80a1c3c:	f43f af3b 	beq.w	80a1ab6 <__aeabi_dmul+0x24a>
 80a1c40:	ea94 0f0c 	teq	r4, ip
 80a1c44:	d10a      	bne.n	80a1c5c <__aeabi_ddiv+0x19c>
 80a1c46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1c4a:	f47f af34 	bne.w	80a1ab6 <__aeabi_dmul+0x24a>
 80a1c4e:	ea95 0f0c 	teq	r5, ip
 80a1c52:	f47f af25 	bne.w	80a1aa0 <__aeabi_dmul+0x234>
 80a1c56:	4610      	mov	r0, r2
 80a1c58:	4619      	mov	r1, r3
 80a1c5a:	e72c      	b.n	80a1ab6 <__aeabi_dmul+0x24a>
 80a1c5c:	ea95 0f0c 	teq	r5, ip
 80a1c60:	d106      	bne.n	80a1c70 <__aeabi_ddiv+0x1b0>
 80a1c62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1c66:	f43f aefd 	beq.w	80a1a64 <__aeabi_dmul+0x1f8>
 80a1c6a:	4610      	mov	r0, r2
 80a1c6c:	4619      	mov	r1, r3
 80a1c6e:	e722      	b.n	80a1ab6 <__aeabi_dmul+0x24a>
 80a1c70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1c74:	bf18      	it	ne
 80a1c76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1c7a:	f47f aec5 	bne.w	80a1a08 <__aeabi_dmul+0x19c>
 80a1c7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a1c82:	f47f af0d 	bne.w	80a1aa0 <__aeabi_dmul+0x234>
 80a1c86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a1c8a:	f47f aeeb 	bne.w	80a1a64 <__aeabi_dmul+0x1f8>
 80a1c8e:	e712      	b.n	80a1ab6 <__aeabi_dmul+0x24a>

080a1c90 <__aeabi_d2iz>:
 80a1c90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a1c94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1c98:	d215      	bcs.n	80a1cc6 <__aeabi_d2iz+0x36>
 80a1c9a:	d511      	bpl.n	80a1cc0 <__aeabi_d2iz+0x30>
 80a1c9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1ca0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a1ca4:	d912      	bls.n	80a1ccc <__aeabi_d2iz+0x3c>
 80a1ca6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1caa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1cae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a1cb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1cb6:	fa23 f002 	lsr.w	r0, r3, r2
 80a1cba:	bf18      	it	ne
 80a1cbc:	4240      	negne	r0, r0
 80a1cbe:	4770      	bx	lr
 80a1cc0:	f04f 0000 	mov.w	r0, #0
 80a1cc4:	4770      	bx	lr
 80a1cc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a1cca:	d105      	bne.n	80a1cd8 <__aeabi_d2iz+0x48>
 80a1ccc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a1cd0:	bf08      	it	eq
 80a1cd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1cd6:	4770      	bx	lr
 80a1cd8:	f04f 0000 	mov.w	r0, #0
 80a1cdc:	4770      	bx	lr
 80a1cde:	bf00      	nop

080a1ce0 <__cxa_atexit>:
 80a1ce0:	b510      	push	{r4, lr}
 80a1ce2:	4604      	mov	r4, r0
 80a1ce4:	4804      	ldr	r0, [pc, #16]	; (80a1cf8 <__cxa_atexit+0x18>)
 80a1ce6:	4613      	mov	r3, r2
 80a1ce8:	b120      	cbz	r0, 80a1cf4 <__cxa_atexit+0x14>
 80a1cea:	460a      	mov	r2, r1
 80a1cec:	2002      	movs	r0, #2
 80a1cee:	4621      	mov	r1, r4
 80a1cf0:	f3af 8000 	nop.w
 80a1cf4:	bd10      	pop	{r4, pc}
 80a1cf6:	bf00      	nop
 80a1cf8:	00000000 	.word	0x00000000

080a1cfc <memcpy>:
 80a1cfc:	440a      	add	r2, r1
 80a1cfe:	4291      	cmp	r1, r2
 80a1d00:	f100 33ff 	add.w	r3, r0, #4294967295
 80a1d04:	d100      	bne.n	80a1d08 <memcpy+0xc>
 80a1d06:	4770      	bx	lr
 80a1d08:	b510      	push	{r4, lr}
 80a1d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1d0e:	4291      	cmp	r1, r2
 80a1d10:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1d14:	d1f9      	bne.n	80a1d0a <memcpy+0xe>
 80a1d16:	bd10      	pop	{r4, pc}

080a1d18 <memset>:
 80a1d18:	4603      	mov	r3, r0
 80a1d1a:	4402      	add	r2, r0
 80a1d1c:	4293      	cmp	r3, r2
 80a1d1e:	d100      	bne.n	80a1d22 <memset+0xa>
 80a1d20:	4770      	bx	lr
 80a1d22:	f803 1b01 	strb.w	r1, [r3], #1
 80a1d26:	e7f9      	b.n	80a1d1c <memset+0x4>

080a1d28 <srand>:
 80a1d28:	b538      	push	{r3, r4, r5, lr}
 80a1d2a:	4b0d      	ldr	r3, [pc, #52]	; (80a1d60 <srand+0x38>)
 80a1d2c:	4604      	mov	r4, r0
 80a1d2e:	681d      	ldr	r5, [r3, #0]
 80a1d30:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1d32:	b97b      	cbnz	r3, 80a1d54 <srand+0x2c>
 80a1d34:	2018      	movs	r0, #24
 80a1d36:	f7fe fe57 	bl	80a09e8 <malloc>
 80a1d3a:	4a0a      	ldr	r2, [pc, #40]	; (80a1d64 <srand+0x3c>)
 80a1d3c:	4b0a      	ldr	r3, [pc, #40]	; (80a1d68 <srand+0x40>)
 80a1d3e:	63a8      	str	r0, [r5, #56]	; 0x38
 80a1d40:	e9c0 2300 	strd	r2, r3, [r0]
 80a1d44:	4b09      	ldr	r3, [pc, #36]	; (80a1d6c <srand+0x44>)
 80a1d46:	2201      	movs	r2, #1
 80a1d48:	6083      	str	r3, [r0, #8]
 80a1d4a:	230b      	movs	r3, #11
 80a1d4c:	8183      	strh	r3, [r0, #12]
 80a1d4e:	2300      	movs	r3, #0
 80a1d50:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1d54:	2200      	movs	r2, #0
 80a1d56:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1d58:	611c      	str	r4, [r3, #16]
 80a1d5a:	615a      	str	r2, [r3, #20]
 80a1d5c:	bd38      	pop	{r3, r4, r5, pc}
 80a1d5e:	bf00      	nop
 80a1d60:	20000018 	.word	0x20000018
 80a1d64:	abcd330e 	.word	0xabcd330e
 80a1d68:	e66d1234 	.word	0xe66d1234
 80a1d6c:	0005deec 	.word	0x0005deec

080a1d70 <strlen>:
 80a1d70:	4603      	mov	r3, r0
 80a1d72:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1d76:	2a00      	cmp	r2, #0
 80a1d78:	d1fb      	bne.n	80a1d72 <strlen+0x2>
 80a1d7a:	1a18      	subs	r0, r3, r0
 80a1d7c:	3801      	subs	r0, #1
 80a1d7e:	4770      	bx	lr

080a1d80 <dynalib_user>:
 80a1d80:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a1d90:	0000 0000 6553 6972 6c61 6320 6e6f 656e     ....Serial conne
 80a1da0:	7463 6465 203a 7473 7261 6974 676e 6f00     cted: starting.o
 80a1db0:	7475 7570 5474 7268 6165 0064 4552 4441     utputThread.READ
 80a1dc0:	203a 0030 4552 4441 203a 0031 4948 4847     : 0.READ: 1.HIGH
 80a1dd0:	4c00 574f 5300 7465 6974 676e 4320 7275     .LOW.Setting Cur
 80a1de0:	6572 746e 6e49 7570 5374 6174 6574 7420     rentInputState t
 80a1df0:	206f 6927 696e 6974 6c61 2027 6562 6163     o 'initial' beca
 80a1e00:	7375 2065 6f6c 676e 7020 7265 6f69 2064     use long period 
 80a1e10:	6564 6574 7463 6465 5200 6165 2064 7325     detected.Read %s
 80a1e20:	6920 706d 6c75 6573 6420 7275 7461 6f69      impulse duratio
 80a1e30:	3a6e 2520 2064 736d 2d20 203e 2523 2064     n: %d ms -> #%d 
 80a1e40:	4328 7275 6572 746e 6e49 7570 5374 6174     (CurrentInputSta
 80a1e50:	6574 203a 6425 0029 5245 4f52 3a52 6920     te: %d).ERROR: i
 80a1e60:	696e 6974 6c61 7320 6174 6574 6720 746f     nitial state got
 80a1e70:	6c20 6e6f 5067 7265 6f69 0064 5245 4f52      longPeriod.ERRO
 80a1e80:	3a52 6520 7078 6365 6574 2064 6873 726f     R: expected shor
 80a1e90:	5074 7265 6f69 2064 6e69 7720 6961 2074     tPeriod in wait 
 80a1ea0:	7473 7461 2065 6f67 2074 2523 0064 4e55     state got #%d.UN
 80a1eb0:	4544 4946 454e 2044 6562 6168 6976 756f     DEFINED behaviou
 80a1ec0:	2072 6f66 2072 6576 7972 6f4c 676e 6550     r for veryLongPe
 80a1ed0:	6972 646f 6920 206e 6e69 7570 5374 6174     riod in inputSta
 80a1ee0:	6574 2720 756f 7074 7475 2731 5300 6174     te 'output1'.Sta
 80a1ef0:	7472 6e69 2067 756f 7074 7475 6c20 6f6f     rting output loo
 80a1f00:	0070 2d2d 2d2d 2d2d 2d2d 002d 0001 0000     p.---------.....
 80a1f10:	000a 0000 0064 0000 7061 0070 5925 252d     ....d...app.%Y-%
 80a1f20:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a1f30:	7361 7463 6d69 0065                         asctime.

080a1f38 <_ZTV9IPAddress>:
	...
 80a1f40:	0d81 080a 0d71 080a 0d73 080a               ....q...s...

080a1f4c <_ZTV9USBSerial>:
	...
 80a1f54:	0e3d 080a 0ea3 080a 0e7b 080a 0ab1 080a     =.......{.......
 80a1f64:	0e6d 080a 0e3f 080a 0e4f 080a 0e9d 080a     m...?...O.......
 80a1f74:	0e5f 080a 0e39 080a                         _...9...

080a1f7c <_ZTV11USARTSerial>:
	...
 80a1f84:	1039 080a 10a1 080a 107d 080a 0ab1 080a     9.......}.......
 80a1f94:	104d 080a 1069 080a 105b 080a 1077 080a     M...i...[...w...
 80a1fa4:	103b 080a 103f 080a                         ;...?...

080a1fac <_ZTV7TwoWire>:
	...
 80a1fb4:	112d 080a 1177 080a 114f 080a 112f 080a     -...w...O.../...
 80a1fc4:	1157 080a 115f 080a 1167 080a 116f 080a     W..._...g...o...

080a1fd4 <_ZTVN5spark9WiFiClassE>:
	...
 80a1fdc:	123f 080a 1235 080a 122b 080a 11a9 080a     ?...5...+.......
 80a1fec:	0bcb 080a 121f 080a 129d 080a 12a5 080a     ................
 80a1ffc:	1213 080a 120b 080a 1201 080a 11f7 080a     ................
 80a200c:	11b3 080a                                   ....

080a2010 <_ZTVN5spark12NetworkClassE>:
	...
 80a2018:	125d 080a 1267 080a 1271 080a 127b 080a     ]...g...q...{...
 80a2028:	1285 080a 1291 080a 129d 080a 12a5 080a     ................
 80a2038:	12ad 080a 12b9 080a 12c1 080a 12cb 080a     ................
 80a2048:	12d5 080a                                   ....

080a204c <_ZSt7nothrow>:
	...

080a204d <link_const_variable_data_end>:
 80a204d:	00          	.byte	0x00
	...

080a2050 <link_constructors_location>:
 80a2050:	080a05f5 	.word	0x080a05f5
 80a2054:	080a0a75 	.word	0x080a0a75
 80a2058:	080a0bd9 	.word	0x080a0bd9
 80a205c:	080a0be9 	.word	0x080a0be9
 80a2060:	080a0c09 	.word	0x080a0c09
 80a2064:	080a1249 	.word	0x080a1249
 80a2068:	080a1325 	.word	0x080a1325
 80a206c:	080a1429 	.word	0x080a1429
