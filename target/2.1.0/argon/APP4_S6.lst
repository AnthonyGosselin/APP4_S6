
c:/GitAPP/APP4_S6/target/2.1.0/argon/APP4_S6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002360  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6380  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  2003e578  000d6384  0001e578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001fc  2003e5f4  2003e5f4  0002e5f4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6400  000d6400  00026400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6428  000d6428  00026428  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00100e66  00000000  00000000  0002642c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011f30  00000000  00000000  00127292  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002303d  00000000  00000000  001391c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000021b0  00000000  00000000  0015c1ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006560  00000000  00000000  0015e3af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003344d  00000000  00000000  0016490f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002ce14  00000000  00000000  00197d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001034b4  00000000  00000000  001c4b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005ab0  00000000  00000000  002c8024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f001 ffa7 	bl	d5f84 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f001 ffaf 	bl	d5fa0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e578 	.word	0x2003e578
   d404c:	000d6384 	.word	0x000d6384
   d4050:	2003e5f4 	.word	0x2003e5f4
   d4054:	2003e5f4 	.word	0x2003e5f4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f000 ffd1 	bl	d5008 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d6354 	.word	0x000d6354
   d4080:	000d6378 	.word	0x000d6378

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba40 	b.w	d4508 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fac3 	bl	d4614 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f000 bf7b 	b.w	d4f8c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f000 bde7 	b.w	d4c68 <malloc>

000d409a <_Znaj>:
   d409a:	f000 bde5 	b.w	d4c68 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f000 bdeb 	b.w	d4c78 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	4718      	bx	r3

000d40b6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40b6:	2a01      	cmp	r2, #1
   d40b8:	d003      	beq.n	d40c2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40ba:	2a02      	cmp	r2, #2
   d40bc:	d003      	beq.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40be:	2000      	movs	r0, #0
   d40c0:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c2:	6001      	str	r1, [r0, #0]
	      break;
   d40c4:	e7fb      	b.n	d40be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c6:	680b      	ldr	r3, [r1, #0]
   d40c8:	6003      	str	r3, [r0, #0]
	}
   d40ca:	e7f8      	b.n	d40be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d40cc <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d40cc:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d40ce:	2301      	movs	r3, #1
   d40d0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d40d2:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d40d4:	4604      	mov	r4, r0
        if (th->func) {
   d40d6:	b143      	cbz	r3, d40ea <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d40d8:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40da:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d40dc:	2301      	movs	r3, #1
   d40de:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d40e0:	2000      	movs	r0, #0
    }
   d40e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d40e6:	f000 bc53 	b.w	d4990 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d40ea:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d40ec:	2800      	cmp	r0, #0
   d40ee:	d0f5      	beq.n	d40dc <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d40f0:	6883      	ldr	r3, [r0, #8]
   d40f2:	b90b      	cbnz	r3, d40f8 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d40f4:	f001 fb3f 	bl	d5776 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40f8:	68c3      	ldr	r3, [r0, #12]
   d40fa:	e7ee      	b.n	d40da <_ZN6Thread3runEPv+0xe>

000d40fc <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40fc:	b40e      	push	{r1, r2, r3}
   d40fe:	b503      	push	{r0, r1, lr}
   d4100:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d4102:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4104:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4108:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d410a:	f000 fec6 	bl	d4e9a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d410e:	b002      	add	sp, #8
   d4110:	f85d eb04 	ldr.w	lr, [sp], #4
   d4114:	b003      	add	sp, #12
   d4116:	4770      	bx	lr

000d4118 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4118:	b510      	push	{r4, lr}
      if (_M_manager)
   d411a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d411c:	4604      	mov	r4, r0
      if (_M_manager)
   d411e:	b113      	cbz	r3, d4126 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4120:	2203      	movs	r2, #3
   d4122:	4601      	mov	r1, r0
   d4124:	4798      	blx	r3
    }
   d4126:	4620      	mov	r0, r4
   d4128:	bd10      	pop	{r4, pc}

000d412a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d412a:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d412c:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   d412e:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   d4130:	b135      	cbz	r5, d4140 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   d4132:	4628      	mov	r0, r5
   d4134:	f7ff fff0 	bl	d4118 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d4138:	2110      	movs	r1, #16
   d413a:	4628      	mov	r0, r5
   d413c:	f001 fb15 	bl	d576a <_ZdlPvj>
   d4140:	4620      	mov	r0, r4
   d4142:	2114      	movs	r1, #20
      }
   d4144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d4148:	f001 bb0f 	b.w	d576a <_ZdlPvj>

000d414c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   d414c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4150:	4607      	mov	r7, r0
   d4152:	b085      	sub	sp, #20
   d4154:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   d4156:	2014      	movs	r0, #20
   d4158:	4929      	ldr	r1, [pc, #164]	; (d4200 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
    Thread(const char *name, wiring_thread_fn_t function,
   d415a:	4616      	mov	r6, r2
   d415c:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   d415e:	f001 fb06 	bl	d576e <_ZnwjRKSt9nothrow_t>
   d4162:	4604      	mov	r4, r0
   d4164:	b130      	cbz	r0, d4174 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x28>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4166:	2200      	movs	r2, #0
            exited(false) {
   d4168:	e9c0 2200 	strd	r2, r2, [r0]
   d416c:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d4170:	7402      	strb	r2, [r0, #16]
   d4172:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d4174:	603c      	str	r4, [r7, #0]
        if (!d_) {
   d4176:	2c00      	cmp	r4, #0
   d4178:	d038      	beq.n	d41ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d417a:	4921      	ldr	r1, [pc, #132]	; (d4200 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
   d417c:	2010      	movs	r0, #16
   d417e:	f001 faf6 	bl	d576e <_ZnwjRKSt9nothrow_t>
   d4182:	4605      	mov	r5, r0
   d4184:	b1a0      	cbz	r0, d41b0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x64>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4186:	e896 0003 	ldmia.w	r6, {r0, r1}
   d418a:	ab02      	add	r3, sp, #8
   d418c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4190:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4194:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4198:	e893 0003 	ldmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d419c:	2200      	movs	r2, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d419e:	68b3      	ldr	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d41a0:	60ab      	str	r3, [r5, #8]
   d41a2:	e885 0003 	stmia.w	r5, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d41a6:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d41a8:	60b2      	str	r2, [r6, #8]
   d41aa:	68ea      	ldr	r2, [r5, #12]
   d41ac:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d41ae:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d41b0:	6826      	ldr	r6, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d41b2:	6025      	str	r5, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d41b4:	b136      	cbz	r6, d41c4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x78>
   d41b6:	4630      	mov	r0, r6
   d41b8:	f7ff ffae 	bl	d4118 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d41bc:	2110      	movs	r1, #16
   d41be:	4630      	mov	r0, r6
   d41c0:	f001 fad3 	bl	d576a <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d41c4:	6838      	ldr	r0, [r7, #0]
        if (!d_->wrapper) {
   d41c6:	6803      	ldr	r3, [r0, #0]
   d41c8:	b183      	cbz	r3, d41ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d41ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d41cc:	464a      	mov	r2, r9
   d41ce:	e9cd 0300 	strd	r0, r3, [sp]
   d41d2:	4641      	mov	r1, r8
   d41d4:	4b0b      	ldr	r3, [pc, #44]	; (d4204 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb8>)
   d41d6:	3004      	adds	r0, #4
   d41d8:	f000 fba2 	bl	d4920 <os_thread_create>
   d41dc:	b930      	cbnz	r0, d41ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
   d41de:	683b      	ldr	r3, [r7, #0]
        while (!d_->started) {
   d41e0:	7c1b      	ldrb	r3, [r3, #16]
   d41e2:	b94b      	cbnz	r3, d41f8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
            HAL_Delay_Milliseconds(1);
   d41e4:	2001      	movs	r0, #1
   d41e6:	f000 fb83 	bl	d48f0 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d41ea:	e7f8      	b.n	d41de <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x92>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d41ec:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d41ee:	2300      	movs	r3, #0
   d41f0:	603b      	str	r3, [r7, #0]
	if (__p != pointer())
   d41f2:	b108      	cbz	r0, d41f8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
      operator()(_Tp* __ptr) const
   d41f4:	f7ff ff99 	bl	d412a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d41f8:	4638      	mov	r0, r7
   d41fa:	b005      	add	sp, #20
   d41fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4200:	000d6350 	.word	0x000d6350
   d4204:	000d40cd 	.word	0x000d40cd

000d4208 <_ZN6ThreadD1Ev>:
    ~Thread()
   d4208:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d420a:	6803      	ldr	r3, [r0, #0]
   d420c:	4604      	mov	r4, r0
        if (!isValid())
   d420e:	b19b      	cbz	r3, d4238 <_ZN6ThreadD1Ev+0x30>
        return isValid() && os_thread_is_current(d_->handle);
   d4210:	6858      	ldr	r0, [r3, #4]
   d4212:	f000 fb8d 	bl	d4930 <os_thread_is_current>
   d4216:	b978      	cbnz	r0, d4238 <_ZN6ThreadD1Ev+0x30>
   d4218:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d421a:	7c5a      	ldrb	r2, [r3, #17]
   d421c:	b912      	cbnz	r2, d4224 <_ZN6ThreadD1Ev+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d421e:	6858      	ldr	r0, [r3, #4]
   d4220:	f000 fb8e 	bl	d4940 <os_thread_join>
        os_thread_cleanup(d_->handle);
   d4224:	6823      	ldr	r3, [r4, #0]
   d4226:	6858      	ldr	r0, [r3, #4]
   d4228:	f000 fb92 	bl	d4950 <os_thread_cleanup>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d422c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d422e:	2300      	movs	r3, #0
   d4230:	6023      	str	r3, [r4, #0]
	if (__p != pointer())
   d4232:	b108      	cbz	r0, d4238 <_ZN6ThreadD1Ev+0x30>
      operator()(_Tp* __ptr) const
   d4234:	f7ff ff79 	bl	d412a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
	if (__ptr != nullptr)
   d4238:	6820      	ldr	r0, [r4, #0]
   d423a:	b108      	cbz	r0, d4240 <_ZN6ThreadD1Ev+0x38>
      operator()(_Tp* __ptr) const
   d423c:	f7ff ff75 	bl	d412a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d4240:	4620      	mov	r0, r4
   d4242:	bd10      	pop	{r4, pc}

000d4244 <_ZN12FrameManager15compareReadDataEPKcPhS2_i>:
        //     Serial.printlnf("CRC ERROR: \t Calculated %d, Received %d.", crc16Result, fullCRC16);

        return isSameValue;
    };

    bool compareReadData(const char* stage, uint8_t* bytesRead, uint8_t* bytesCompare, int length){
   d4244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4246:	9f08      	ldr	r7, [sp, #32]

        int receivedSum = 0;
        int compareSum = 0;
        for (int i=0; i < length; i++){
   d4248:	2000      	movs	r0, #0
    bool compareReadData(const char* stage, uint8_t* bytesRead, uint8_t* bytesCompare, int length){
   d424a:	460d      	mov	r5, r1
        int compareSum = 0;
   d424c:	4606      	mov	r6, r0
        int receivedSum = 0;
   d424e:	4604      	mov	r4, r0
        for (int i=0; i < length; i++){
   d4250:	42b8      	cmp	r0, r7
   d4252:	da05      	bge.n	d4260 <_ZN12FrameManager15compareReadDataEPKcPhS2_i+0x1c>
            receivedSum += bytesRead[i];
   d4254:	5c11      	ldrb	r1, [r2, r0]
   d4256:	440c      	add	r4, r1
            compareSum += bytesCompare[i];
   d4258:	5c19      	ldrb	r1, [r3, r0]
        for (int i=0; i < length; i++){
   d425a:	3001      	adds	r0, #1
            compareSum += bytesCompare[i];
   d425c:	440e      	add	r6, r1
        for (int i=0; i < length; i++){
   d425e:	e7f7      	b.n	d4250 <_ZN12FrameManager15compareReadDataEPKcPhS2_i+0xc>
        }

        bool isSameValue = receivedSum == compareSum;
   d4260:	42b4      	cmp	r4, r6
   d4262:	bf0c      	ite	eq
   d4264:	2701      	moveq	r7, #1
   d4266:	2700      	movne	r7, #0
        if (isSameValue)
   d4268:	d10a      	bne.n	d4280 <_ZN12FrameManager15compareReadDataEPKcPhS2_i+0x3c>
            Serial.printlnf("SUCCES: Received for %s: \t Expected %d, Received %d.", stage, compareSum, receivedSum);
   d426a:	f000 ffd1 	bl	d5210 <_Z16_fetch_usbserialv>
   d426e:	4908      	ldr	r1, [pc, #32]	; (d4290 <_ZN12FrameManager15compareReadDataEPKcPhS2_i+0x4c>)
   d4270:	9400      	str	r4, [sp, #0]
   d4272:	4623      	mov	r3, r4
   d4274:	462a      	mov	r2, r5
        else
            Serial.printlnf("ERROR: Received for %s: \t Expected %d, Received %d.", stage, compareSum, receivedSum);
   d4276:	f7ff ff41 	bl	d40fc <_ZN5Print8printlnfEPKcz>

        return isSameValue;
    };
   d427a:	4638      	mov	r0, r7
   d427c:	b003      	add	sp, #12
   d427e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            Serial.printlnf("ERROR: Received for %s: \t Expected %d, Received %d.", stage, compareSum, receivedSum);
   d4280:	f000 ffc6 	bl	d5210 <_Z16_fetch_usbserialv>
   d4284:	4903      	ldr	r1, [pc, #12]	; (d4294 <_ZN12FrameManager15compareReadDataEPKcPhS2_i+0x50>)
   d4286:	9400      	str	r4, [sp, #0]
   d4288:	4633      	mov	r3, r6
   d428a:	462a      	mov	r2, r5
   d428c:	e7f3      	b.n	d4276 <_ZN12FrameManager15compareReadDataEPKcPhS2_i+0x32>
   d428e:	bf00      	nop
   d4290:	000d601c 	.word	0x000d601c
   d4294:	000d6051 	.word	0x000d6051

000d4298 <_ZN12FrameManager11receiveDataEh>:
    void receiveData(uint8_t byteReceived) {
   d4298:	b5f0      	push	{r4, r5, r6, r7, lr}
   d429a:	b08b      	sub	sp, #44	; 0x2c
   d429c:	4604      	mov	r4, r0
   d429e:	f88d 100f 	strb.w	r1, [sp, #15]
        Serial.printlnf("Received byte %d", (int)byteReceived);
   d42a2:	f000 ffb5 	bl	d5210 <_Z16_fetch_usbserialv>
   d42a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d42aa:	496b      	ldr	r1, [pc, #428]	; (d4458 <_ZN12FrameManager11receiveDataEh+0x1c0>)
   d42ac:	f7ff ff26 	bl	d40fc <_ZN5Print8printlnfEPKcz>
        byteCounter++;
   d42b0:	6963      	ldr	r3, [r4, #20]
   d42b2:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
   d42b6:	1c5a      	adds	r2, r3, #1
   d42b8:	6162      	str	r2, [r4, #20]
        switch(currentReceivingState){
   d42ba:	2905      	cmp	r1, #5
   d42bc:	d855      	bhi.n	d436a <_ZN12FrameManager11receiveDataEh+0xd2>
   d42be:	e8df f001 	tbb	[pc, r1]
   d42c2:	1803      	.short	0x1803
   d42c4:	ba8f7332 	.word	0xba8f7332
                    const char stageName[] = "Preambule";
   d42c8:	4a64      	ldr	r2, [pc, #400]	; (d445c <_ZN12FrameManager11receiveDataEh+0x1c4>)
   d42ca:	6810      	ldr	r0, [r2, #0]
   d42cc:	6851      	ldr	r1, [r2, #4]
   d42ce:	8912      	ldrh	r2, [r2, #8]
   d42d0:	ab05      	add	r3, sp, #20
   d42d2:	c303      	stmia	r3!, {r0, r1}
   d42d4:	801a      	strh	r2, [r3, #0]
                    if (isVerbose) {compareReadData(stageName, &byteReceived, &sendingFrame.preambule, 1);}
   d42d6:	7863      	ldrb	r3, [r4, #1]
   d42d8:	b14b      	cbz	r3, d42ee <_ZN12FrameManager11receiveDataEh+0x56>
   d42da:	2301      	movs	r3, #1
   d42dc:	9300      	str	r3, [sp, #0]
   d42de:	f10d 020f 	add.w	r2, sp, #15
   d42e2:	f104 0319 	add.w	r3, r4, #25
   d42e6:	a905      	add	r1, sp, #20
   d42e8:	4620      	mov	r0, r4
   d42ea:	f7ff ffab 	bl	d4244 <_ZN12FrameManager15compareReadDataEPKcPhS2_i>
                    currentReceivingState = start;
   d42ee:	2301      	movs	r3, #1
   d42f0:	e016      	b.n	d4320 <_ZN12FrameManager11receiveDataEh+0x88>
                    receivingFrame.startEnd = byteReceived;
   d42f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d42f6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
                    const char stageName[] = "Start";
   d42fa:	4b59      	ldr	r3, [pc, #356]	; (d4460 <_ZN12FrameManager11receiveDataEh+0x1c8>)
   d42fc:	6818      	ldr	r0, [r3, #0]
   d42fe:	889b      	ldrh	r3, [r3, #4]
   d4300:	f8ad 3018 	strh.w	r3, [sp, #24]
                    if (isVerbose) {compareReadData(stageName, &byteReceived, &sendingFrame.startEnd, 1);}
   d4304:	7863      	ldrb	r3, [r4, #1]
                    const char stageName[] = "Start";
   d4306:	9005      	str	r0, [sp, #20]
                    if (isVerbose) {compareReadData(stageName, &byteReceived, &sendingFrame.startEnd, 1);}
   d4308:	b14b      	cbz	r3, d431e <_ZN12FrameManager11receiveDataEh+0x86>
   d430a:	2301      	movs	r3, #1
   d430c:	9300      	str	r3, [sp, #0]
   d430e:	f10d 020f 	add.w	r2, sp, #15
   d4312:	f104 031a 	add.w	r3, r4, #26
   d4316:	a905      	add	r1, sp, #20
   d4318:	4620      	mov	r0, r4
   d431a:	f7ff ff93 	bl	d4244 <_ZN12FrameManager15compareReadDataEPKcPhS2_i>
                    currentReceivingState = entete;
   d431e:	2302      	movs	r3, #2
                    currentReceivingState = start;
   d4320:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    };
   d4324:	e021      	b.n	d436a <_ZN12FrameManager11receiveDataEh+0xd2>
                    if (byteCounter < 4){
   d4326:	2a03      	cmp	r2, #3
   d4328:	7866      	ldrb	r6, [r4, #1]
   d432a:	dc20      	bgt.n	d436e <_ZN12FrameManager11receiveDataEh+0xd6>
                        const char stageName[] = "Entete (typeFlags)";
   d432c:	4b4d      	ldr	r3, [pc, #308]	; (d4464 <_ZN12FrameManager11receiveDataEh+0x1cc>)
   d432e:	aa05      	add	r2, sp, #20
   d4330:	f103 0710 	add.w	r7, r3, #16
   d4334:	6818      	ldr	r0, [r3, #0]
   d4336:	6859      	ldr	r1, [r3, #4]
   d4338:	4615      	mov	r5, r2
   d433a:	c503      	stmia	r5!, {r0, r1}
   d433c:	3308      	adds	r3, #8
   d433e:	42bb      	cmp	r3, r7
   d4340:	462a      	mov	r2, r5
   d4342:	d1f7      	bne.n	d4334 <_ZN12FrameManager11receiveDataEh+0x9c>
   d4344:	8819      	ldrh	r1, [r3, #0]
   d4346:	789b      	ldrb	r3, [r3, #2]
   d4348:	8029      	strh	r1, [r5, #0]
   d434a:	70ab      	strb	r3, [r5, #2]
                        if (isVerbose) {compareReadData(stageName, &byteReceived, &sendingFrame.typeFlag, 1);}
   d434c:	b14e      	cbz	r6, d4362 <_ZN12FrameManager11receiveDataEh+0xca>
   d434e:	2301      	movs	r3, #1
   d4350:	9300      	str	r3, [sp, #0]
   d4352:	f10d 020f 	add.w	r2, sp, #15
   d4356:	f104 031b 	add.w	r3, r4, #27
   d435a:	a905      	add	r1, sp, #20
   d435c:	4620      	mov	r0, r4
   d435e:	f7ff ff71 	bl	d4244 <_ZN12FrameManager15compareReadDataEPKcPhS2_i>
                        receivingFrame.typeFlag = byteReceived;
   d4362:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d4366:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    };
   d436a:	b00b      	add	sp, #44	; 0x2c
   d436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        const char stageName[] = "Entete (length)";
   d436e:	4b3e      	ldr	r3, [pc, #248]	; (d4468 <_ZN12FrameManager11receiveDataEh+0x1d0>)
   d4370:	ad05      	add	r5, sp, #20
   d4372:	f103 0710 	add.w	r7, r3, #16
   d4376:	6818      	ldr	r0, [r3, #0]
   d4378:	6859      	ldr	r1, [r3, #4]
   d437a:	462a      	mov	r2, r5
   d437c:	c203      	stmia	r2!, {r0, r1}
   d437e:	3308      	adds	r3, #8
   d4380:	42bb      	cmp	r3, r7
   d4382:	4615      	mov	r5, r2
   d4384:	d1f7      	bne.n	d4376 <_ZN12FrameManager11receiveDataEh+0xde>
                        if (isVerbose) {compareReadData(stageName, &byteReceived, &sendingFrame.messageLength, 1);}
   d4386:	b14e      	cbz	r6, d439c <_ZN12FrameManager11receiveDataEh+0x104>
   d4388:	2301      	movs	r3, #1
   d438a:	9300      	str	r3, [sp, #0]
   d438c:	f10d 020f 	add.w	r2, sp, #15
   d4390:	f104 031c 	add.w	r3, r4, #28
   d4394:	a905      	add	r1, sp, #20
   d4396:	4620      	mov	r0, r4
   d4398:	f7ff ff54 	bl	d4244 <_ZN12FrameManager15compareReadDataEPKcPhS2_i>
                        receivingFrame.messageLength = byteReceived;
   d439c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d43a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
                        currentReceivingState = message;
   d43a4:	2303      	movs	r3, #3
   d43a6:	e7bb      	b.n	d4320 <_ZN12FrameManager11receiveDataEh+0x88>
                    receivingFrame.message[byteCounter-5] = byteReceived;
   d43a8:	4423      	add	r3, r4
   d43aa:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d43ae:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
                    if (byteCounter < receivingFrame.messageLength + 4){
   d43b2:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
   d43b6:	1ceb      	adds	r3, r5, #3
   d43b8:	429a      	cmp	r2, r3
   d43ba:	dcd6      	bgt.n	d436a <_ZN12FrameManager11receiveDataEh+0xd2>
                        const char stageName[] = "Message";
   d43bc:	4a2b      	ldr	r2, [pc, #172]	; (d446c <_ZN12FrameManager11receiveDataEh+0x1d4>)
   d43be:	6810      	ldr	r0, [r2, #0]
   d43c0:	6851      	ldr	r1, [r2, #4]
   d43c2:	ab05      	add	r3, sp, #20
   d43c4:	c303      	stmia	r3!, {r0, r1}
                        if (isVerbose) {compareReadData(stageName, receivingFrame.message, sendingFrame.message, receivingFrame.messageLength);}
   d43c6:	7863      	ldrb	r3, [r4, #1]
   d43c8:	b143      	cbz	r3, d43dc <_ZN12FrameManager11receiveDataEh+0x144>
   d43ca:	9500      	str	r5, [sp, #0]
   d43cc:	f104 031d 	add.w	r3, r4, #29
   d43d0:	f104 0225 	add.w	r2, r4, #37	; 0x25
   d43d4:	a905      	add	r1, sp, #20
   d43d6:	4620      	mov	r0, r4
   d43d8:	f7ff ff34 	bl	d4244 <_ZN12FrameManager15compareReadDataEPKcPhS2_i>
                        currentReceivingState = controle;
   d43dc:	2304      	movs	r3, #4
   d43de:	e79f      	b.n	d4320 <_ZN12FrameManager11receiveDataEh+0x88>
                    if (byteCounter < receivingFrame.messageLength + 5){
   d43e0:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   d43e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d43e8:	1d08      	adds	r0, r1, #4
   d43ea:	4282      	cmp	r2, r0
   d43ec:	dc02      	bgt.n	d43f4 <_ZN12FrameManager11receiveDataEh+0x15c>
                        receivingFrame.crc16[0] = byteReceived;
   d43ee:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
   d43f2:	e7ba      	b.n	d436a <_ZN12FrameManager11receiveDataEh+0xd2>
                        receivingFrame.crc16[1] = byteReceived;
   d43f4:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
                        uint16_t fullCRC16 =  receivingFrame.crc16[0] << 16 | receivingFrame.crc16[1];
   d43f8:	b298      	uxth	r0, r3
                        uint16_t crc16Result = crc16(sendingFrame.message, receivingFrame.messageLength);
   d43fa:	f104 061d 	add.w	r6, r4, #29
        unsigned short crc = 0xFFFF;
   d43fe:	f64f 75ff 	movw	r5, #65535	; 0xffff
        while (length--){
   d4402:	3901      	subs	r1, #1
   d4404:	b2c9      	uxtb	r1, r1
   d4406:	29ff      	cmp	r1, #255	; 0xff
   d4408:	d00e      	beq.n	d4428 <_ZN12FrameManager11receiveDataEh+0x190>
            x = crc >> 8 ^ *data_p++;
   d440a:	f816 3b01 	ldrb.w	r3, [r6], #1
   d440e:	ea83 2315 	eor.w	r3, r3, r5, lsr #8
            x ^= x>>4;
   d4412:	ea83 1213 	eor.w	r2, r3, r3, lsr #4
            crc = (crc << 8) ^ ((unsigned short)(x << 12)) ^ ((unsigned short)(x <<5)) ^ ((unsigned short)x);
   d4416:	4613      	mov	r3, r2
   d4418:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   d441c:	ea82 3203 	eor.w	r2, r2, r3, lsl #12
   d4420:	ea82 1343 	eor.w	r3, r2, r3, lsl #5
   d4424:	b29d      	uxth	r5, r3
        while (length--){
   d4426:	e7ec      	b.n	d4402 <_ZN12FrameManager11receiveDataEh+0x16a>
                        if(compareCRC16(crc16Result, fullCRC16))
   d4428:	42a8      	cmp	r0, r5
                            receivingFrame.crcCorrect = true;
   d442a:	bf04      	itt	eq
   d442c:	2301      	moveq	r3, #1
   d442e:	f884 3028 	strbeq.w	r3, [r4, #40]	; 0x28
                        currentReceivingState = end;
   d4432:	2305      	movs	r3, #5
   d4434:	e774      	b.n	d4320 <_ZN12FrameManager11receiveDataEh+0x88>
                    const char stageName[] = "End";
   d4436:	4b0e      	ldr	r3, [pc, #56]	; (d4470 <_ZN12FrameManager11receiveDataEh+0x1d8>)
   d4438:	9305      	str	r3, [sp, #20]
                    if (isVerbose) {compareReadData(stageName, &byteReceived, &sendingFrame.startEnd, 1);}
   d443a:	7863      	ldrb	r3, [r4, #1]
   d443c:	b14b      	cbz	r3, d4452 <_ZN12FrameManager11receiveDataEh+0x1ba>
   d443e:	2301      	movs	r3, #1
   d4440:	9300      	str	r3, [sp, #0]
   d4442:	f10d 020f 	add.w	r2, sp, #15
   d4446:	f104 031a 	add.w	r3, r4, #26
   d444a:	a905      	add	r1, sp, #20
   d444c:	4620      	mov	r0, r4
   d444e:	f7ff fef9 	bl	d4244 <_ZN12FrameManager15compareReadDataEPKcPhS2_i>
                    byteCounter = 0;
   d4452:	2300      	movs	r3, #0
   d4454:	6163      	str	r3, [r4, #20]
   d4456:	e74a      	b.n	d42ee <_ZN12FrameManager11receiveDataEh+0x56>
   d4458:	000d6085 	.word	0x000d6085
   d445c:	000d6096 	.word	0x000d6096
   d4460:	000d60a0 	.word	0x000d60a0
   d4464:	000d60a6 	.word	0x000d60a6
   d4468:	000d60b9 	.word	0x000d60b9
   d446c:	000d60c9 	.word	0x000d60c9
   d4470:	00646e45 	.word	0x00646e45

000d4474 <_ZN12FrameManager10receiveBitEh>:
    void receiveBit(uint8_t bitReceived){
   d4474:	b510      	push	{r4, lr}
        bitCounter++;
   d4476:	6903      	ldr	r3, [r0, #16]
   d4478:	3301      	adds	r3, #1
   d447a:	6103      	str	r3, [r0, #16]
        byteConcat = (byteConcat << 1) | bitReceived;
   d447c:	7e03      	ldrb	r3, [r0, #24]
    void receiveBit(uint8_t bitReceived){
   d447e:	4604      	mov	r4, r0
        byteConcat = (byteConcat << 1) | bitReceived;
   d4480:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
   d4484:	7601      	strb	r1, [r0, #24]
        Serial.printlnf("Received bit number %d", bitCounter);
   d4486:	f000 fec3 	bl	d5210 <_Z16_fetch_usbserialv>
   d448a:	6922      	ldr	r2, [r4, #16]
   d448c:	4905      	ldr	r1, [pc, #20]	; (d44a4 <_ZN12FrameManager10receiveBitEh+0x30>)
   d448e:	f7ff fe35 	bl	d40fc <_ZN5Print8printlnfEPKcz>
        if (!(bitCounter%8)){
   d4492:	6923      	ldr	r3, [r4, #16]
   d4494:	075b      	lsls	r3, r3, #29
   d4496:	d103      	bne.n	d44a0 <_ZN12FrameManager10receiveBitEh+0x2c>
            receiveData(byteConcat);
   d4498:	7e21      	ldrb	r1, [r4, #24]
   d449a:	4620      	mov	r0, r4
   d449c:	f7ff fefc 	bl	d4298 <_ZN12FrameManager11receiveDataEh>
    };
   d44a0:	bd10      	pop	{r4, pc}
   d44a2:	bf00      	nop
   d44a4:	000d60d1 	.word	0x000d60d1

000d44a8 <_ZN14MessageManagerC1Ev>:
#include "FrameManager.ino"

class MessageManager {
   d44a8:	b538      	push	{r3, r4, r5, lr}
   d44aa:	2238      	movs	r2, #56	; 0x38
   d44ac:	4604      	mov	r4, r0
   d44ae:	2100      	movs	r1, #0
   d44b0:	f001 fd76 	bl	d5fa0 <memset>
class FrameManager {
   d44b4:	4a12      	ldr	r2, [pc, #72]	; (d4500 <_ZN14MessageManagerC1Ev+0x58>)
   d44b6:	61a2      	str	r2, [r4, #24]
struct frame {
   d44b8:	f240 1201 	movw	r2, #257	; 0x101
   d44bc:	83a2      	strh	r2, [r4, #28]
   d44be:	2255      	movs	r2, #85	; 0x55
   d44c0:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
   d44c4:	227e      	movs	r2, #126	; 0x7e
   d44c6:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
class FrameManager {
   d44ca:	4a0e      	ldr	r2, [pc, #56]	; (d4504 <_ZN14MessageManagerC1Ev+0x5c>)
   d44cc:	ca07      	ldmia	r2, {r0, r1, r2}
   d44ce:	f44f 7380 	mov.w	r3, #256	; 0x100
   d44d2:	8023      	strh	r3, [r4, #0]
   d44d4:	2300      	movs	r3, #0
struct frame {
   d44d6:	2501      	movs	r5, #1
   d44d8:	f884 3020 	strb.w	r3, [r4, #32]
   d44dc:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
   d44e0:	8523      	strh	r3, [r4, #40]	; 0x28
class FrameManager {
   d44e2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
   d44e6:	f104 032c 	add.w	r3, r4, #44	; 0x2c
struct frame {
   d44ea:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
   d44ee:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
class FrameManager {
   d44f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d44f6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
   d44fa:	4620      	mov	r0, r4
   d44fc:	bd38      	pop	{r3, r4, r5, pc}
   d44fe:	bf00      	nop
   d4500:	007e5500 	.word	0x007e5500
   d4504:	000d61d4 	.word	0x000d61d4

000d4508 <setup>:
system_tick_t lastThreadTime = 0;
system_tick_t lastMessageTime = 0;

int bitCounter = 0;

void setup() {
   d4508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	Serial.begin(9600);

    pinMode(outputPin, OUTPUT_OPEN_DRAIN);
   d450c:	4d37      	ldr	r5, [pc, #220]	; (d45ec <setup+0xe4>)
    pinMode(inputPin, INPUT_PULLUP);
   d450e:	4c38      	ldr	r4, [pc, #224]	; (d45f0 <setup+0xe8>)
void setup() {
   d4510:	b095      	sub	sp, #84	; 0x54
	Serial.begin(9600);
   d4512:	f000 fe7d 	bl	d5210 <_Z16_fetch_usbserialv>
   d4516:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d451a:	f000 fe69 	bl	d51f0 <_ZN9USBSerial5beginEl>
    pinMode(outputPin, OUTPUT_OPEN_DRAIN);
   d451e:	8828      	ldrh	r0, [r5, #0]
   d4520:	2105      	movs	r1, #5
   d4522:	f001 f8b3 	bl	d568c <pinMode>
    pinMode(inputPin, INPUT_PULLUP);
   d4526:	8820      	ldrh	r0, [r4, #0]
   d4528:	2102      	movs	r1, #2
   d452a:	f001 f8af 	bl	d568c <pinMode>

    digitalWrite(outputPin, LOW);

    attachInterrupt(inputPin, inputEvent, CHANGE);
   d452e:	2600      	movs	r6, #0
    digitalWrite(outputPin, LOW);
   d4530:	8828      	ldrh	r0, [r5, #0]
   d4532:	2100      	movs	r1, #0
   d4534:	f001 f8bb 	bl	d56ae <digitalWrite>
    attachInterrupt(inputPin, inputEvent, CHANGE);
   d4538:	9600      	str	r6, [sp, #0]
   d453a:	492e      	ldr	r1, [pc, #184]	; (d45f4 <setup+0xec>)
   d453c:	8820      	ldrh	r0, [r4, #0]
    CurrentInputState = initial;

    msgManager = MessageManager();
   d453e:	4c2e      	ldr	r4, [pc, #184]	; (d45f8 <setup+0xf0>)
    attachInterrupt(inputPin, inputEvent, CHANGE);
   d4540:	f04f 33ff 	mov.w	r3, #4294967295
   d4544:	4632      	mov	r2, r6
   d4546:	f000 fe8f 	bl	d5268 <_Z15attachInterrupttPFvvE13InterruptModeah>
    CurrentInputState = initial;
   d454a:	4b2c      	ldr	r3, [pc, #176]	; (d45fc <setup+0xf4>)
    msgManager = MessageManager();
   d454c:	2240      	movs	r2, #64	; 0x40
   d454e:	4631      	mov	r1, r6
   d4550:	a804      	add	r0, sp, #16
    CurrentInputState = initial;
   d4552:	701e      	strb	r6, [r3, #0]
    msgManager = MessageManager();
   d4554:	ad04      	add	r5, sp, #16
   d4556:	f001 fd23 	bl	d5fa0 <memset>
   d455a:	a804      	add	r0, sp, #16
   d455c:	f7ff ffa4 	bl	d44a8 <_ZN14MessageManagerC1Ev>
   d4560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d456a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d456c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   d4570:	c407      	stmia	r4!, {r0, r1, r2}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4572:	4630      	mov	r0, r6
   d4574:	7023      	strb	r3, [r4, #0]
   d4576:	f000 f9cb 	bl	d4910 <hal_timer_millis>
        while (_while() && !_condition()) {
   d457a:	f247 542f 	movw	r4, #29999	; 0x752f
        return hal_timer_millis(nullptr);
   d457e:	4607      	mov	r7, r0
        while (_while() && !_condition()) {
   d4580:	2500      	movs	r5, #0
        return hal_timer_millis(nullptr);
   d4582:	2000      	movs	r0, #0
   d4584:	f000 f9c4 	bl	d4910 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4588:	ebb0 0807 	subs.w	r8, r0, r7
   d458c:	eb61 0906 	sbc.w	r9, r1, r6
        while (_while() && !_condition()) {
   d4590:	454d      	cmp	r5, r9
   d4592:	bf08      	it	eq
   d4594:	4544      	cmpeq	r4, r8
   d4596:	d307      	bcc.n	d45a8 <setup+0xa0>

    waitFor(Serial.isConnected, 30000);
   d4598:	f000 fe3a 	bl	d5210 <_Z16_fetch_usbserialv>
   d459c:	f000 fe2c 	bl	d51f8 <_ZN9USBSerial11isConnectedEv>
   d45a0:	b910      	cbnz	r0, d45a8 <setup+0xa0>
            spark_process();
   d45a2:	f000 fb51 	bl	d4c48 <spark_process>
        while (_while() && !_condition()) {
   d45a6:	e7ec      	b.n	d4582 <setup+0x7a>
   d45a8:	f000 fe32 	bl	d5210 <_Z16_fetch_usbserialv>
   d45ac:	f000 fe24 	bl	d51f8 <_ZN9USBSerial11isConnectedEv>
    Serial.println("Serial connected: starting");
   d45b0:	f000 fe2e 	bl	d5210 <_Z16_fetch_usbserialv>
   d45b4:	4912      	ldr	r1, [pc, #72]	; (d4600 <setup+0xf8>)
   d45b6:	f000 fc48 	bl	d4e4a <_ZN5Print7printlnEPKc>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d45ba:	4b12      	ldr	r3, [pc, #72]	; (d4604 <setup+0xfc>)
   d45bc:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d45be:	4b12      	ldr	r3, [pc, #72]	; (d4608 <setup+0x100>)
   d45c0:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
   d45c2:	4b12      	ldr	r3, [pc, #72]	; (d460c <setup+0x104>)
   d45c4:	9306      	str	r3, [sp, #24]
    Thread thread("outputThread", outputThread);
   d45c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d45ca:	4911      	ldr	r1, [pc, #68]	; (d4610 <setup+0x108>)
   d45cc:	9300      	str	r3, [sp, #0]
   d45ce:	aa04      	add	r2, sp, #16
   d45d0:	2302      	movs	r3, #2
   d45d2:	a803      	add	r0, sp, #12
   d45d4:	f7ff fdba 	bl	d414c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
    class function<_Res(_ArgTypes...)>
   d45d8:	a804      	add	r0, sp, #16
   d45da:	f7ff fd9d 	bl	d4118 <_ZNSt14_Function_baseD1Ev>
   d45de:	a803      	add	r0, sp, #12
   d45e0:	f7ff fe12 	bl	d4208 <_ZN6ThreadD1Ev>
}
   d45e4:	b015      	add	sp, #84	; 0x54
   d45e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d45ea:	bf00      	nop
   d45ec:	2003e588 	.word	0x2003e588
   d45f0:	2003e580 	.word	0x2003e580
   d45f4:	000d4661 	.word	0x000d4661
   d45f8:	2003e604 	.word	0x2003e604
   d45fc:	2003e5f9 	.word	0x2003e5f9
   d4600:	000d60e8 	.word	0x000d60e8
   d4604:	000d47e5 	.word	0x000d47e5
   d4608:	000d40b3 	.word	0x000d40b3
   d460c:	000d40b7 	.word	0x000d40b7
   d4610:	000d6103 	.word	0x000d6103

000d4614 <loop>:

    // Call messages to send here, split by long delays?
    // char* message1 = [H, e, l, l, o, , W, o, r, l, d, !];
    // ex. msgManager.sendMessage(message1);
    // delay(10000); OR os_thread_delay_until(&lastMessageTime, 10000)
}
   d4614:	4770      	bx	lr
	...

000d4618 <_Z16changeInputState10InputState>:
    }
};

// Function used to change state and perform necessary actions right away (like outputing)
void changeInputState(InputState newInputState) {
    switch (newInputState) {
   d4618:	2801      	cmp	r0, #1
void changeInputState(InputState newInputState) {
   d461a:	b510      	push	{r4, lr}
   d461c:	4604      	mov	r4, r0
    switch (newInputState) {
   d461e:	d004      	beq.n	d462a <_Z16changeInputState10InputState+0x12>
   d4620:	2803      	cmp	r0, #3
   d4622:	d00c      	beq.n	d463e <_Z16changeInputState10InputState+0x26>
            Serial.println("READ: 1");
            msgManager.frameManager.receiveBit(0b1);
            break;
    }
    // Serial.printlnf("Received bit number %d", bitCounter++);
    CurrentInputState = newInputState; // Change to new state for next event
   d4624:	4b09      	ldr	r3, [pc, #36]	; (d464c <_Z16changeInputState10InputState+0x34>)
   d4626:	701c      	strb	r4, [r3, #0]
}
   d4628:	bd10      	pop	{r4, pc}
            Serial.println("READ: 0");
   d462a:	f000 fdf1 	bl	d5210 <_Z16_fetch_usbserialv>
   d462e:	4908      	ldr	r1, [pc, #32]	; (d4650 <_Z16changeInputState10InputState+0x38>)
   d4630:	f000 fc0b 	bl	d4e4a <_ZN5Print7printlnEPKc>
            msgManager.frameManager.receiveBit(0b0);
   d4634:	2100      	movs	r1, #0
            msgManager.frameManager.receiveBit(0b1);
   d4636:	4807      	ldr	r0, [pc, #28]	; (d4654 <_Z16changeInputState10InputState+0x3c>)
   d4638:	f7ff ff1c 	bl	d4474 <_ZN12FrameManager10receiveBitEh>
            break;
   d463c:	e7f2      	b.n	d4624 <_Z16changeInputState10InputState+0xc>
            Serial.println("READ: 1");
   d463e:	f000 fde7 	bl	d5210 <_Z16_fetch_usbserialv>
   d4642:	4905      	ldr	r1, [pc, #20]	; (d4658 <_Z16changeInputState10InputState+0x40>)
   d4644:	f000 fc01 	bl	d4e4a <_ZN5Print7printlnEPKc>
            msgManager.frameManager.receiveBit(0b1);
   d4648:	2101      	movs	r1, #1
   d464a:	e7f4      	b.n	d4636 <_Z16changeInputState10InputState+0x1e>
   d464c:	2003e5f9 	.word	0x2003e5f9
   d4650:	000d6110 	.word	0x000d6110
   d4654:	2003e604 	.word	0x2003e604
   d4658:	000d6118 	.word	0x000d6118
   d465c:	00000000 	.word	0x00000000

000d4660 <_Z10inputEventv>:

void inputEvent() {
   d4660:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    //     }
    //     return;
    // }
    //----------

    int duration = millis() - lastChangeTime;
   d4664:	4e40      	ldr	r6, [pc, #256]	; (d4768 <_Z10inputEventv+0x108>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4666:	f000 f94b 	bl	d4900 <HAL_Timer_Get_Milli_Seconds>
   d466a:	6833      	ldr	r3, [r6, #0]
   d466c:	1ac5      	subs	r5, r0, r3
   d466e:	f000 f947 	bl	d4900 <HAL_Timer_Get_Milli_Seconds>
    lastChangeTime = millis();

    // If 80% higher than one clock period: must be two periods (AKA: long period)
    int longPeriodMin = inputClockPeriod * 1.8;
   d4672:	4b3e      	ldr	r3, [pc, #248]	; (d476c <_Z10inputEventv+0x10c>)
    lastChangeTime = millis();
   d4674:	6030      	str	r0, [r6, #0]
    int longPeriodMin = inputClockPeriod * 1.8;
   d4676:	6818      	ldr	r0, [r3, #0]
   d4678:	f001 f9d2 	bl	d5a20 <__aeabi_i2d>
    int longPeriodMax = inputClockPeriod * 2.2;
    int shortPeriodMin = inputClockPeriod * 0.8;
   d467c:	a334      	add	r3, pc, #208	; (adr r3, d4750 <_Z10inputEventv+0xf0>)
   d467e:	e9d3 2300 	ldrd	r2, r3, [r3]
    int longPeriodMin = inputClockPeriod * 1.8;
   d4682:	4680      	mov	r8, r0
   d4684:	4689      	mov	r9, r1
    int shortPeriodMin = inputClockPeriod * 0.8;
   d4686:	f001 fa35 	bl	d5af4 <__aeabi_dmul>
   d468a:	f001 fc45 	bl	d5f18 <__aeabi_d2iz>

    if(duration < shortPeriodMin) {
   d468e:	4285      	cmp	r5, r0
void inputEvent() {
   d4690:	f04f 0400 	mov.w	r4, #0
    if(duration < shortPeriodMin) {
   d4694:	db3a      	blt.n	d470c <_Z10inputEventv+0xac>
    int longPeriodMax = inputClockPeriod * 2.2;
   d4696:	a330      	add	r3, pc, #192	; (adr r3, d4758 <_Z10inputEventv+0xf8>)
   d4698:	e9d3 2300 	ldrd	r2, r3, [r3]
   d469c:	4640      	mov	r0, r8
   d469e:	4649      	mov	r1, r9
   d46a0:	f001 fa28 	bl	d5af4 <__aeabi_dmul>
   d46a4:	f001 fc38 	bl	d5f18 <__aeabi_d2iz>
        return;
    }

    // Determine newStateDuration (time since last change event)
    StateDuration newStateDuration;
    if (duration > longPeriodMax) {
   d46a8:	4285      	cmp	r5, r0
    int longPeriodMax = inputClockPeriod * 2.2;
   d46aa:	4606      	mov	r6, r0
    if (duration > longPeriodMax) {
   d46ac:	dc1b      	bgt.n	d46e6 <_Z10inputEventv+0x86>
    int longPeriodMin = inputClockPeriod * 1.8;
   d46ae:	a32c      	add	r3, pc, #176	; (adr r3, d4760 <_Z10inputEventv+0x100>)
   d46b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46b4:	4640      	mov	r0, r8
   d46b6:	4649      	mov	r1, r9
   d46b8:	f001 fa1c 	bl	d5af4 <__aeabi_dmul>
   d46bc:	f001 fc2c 	bl	d5f18 <__aeabi_d2iz>
        newStateDuration = veryLongPeriod;
    }
    else if (duration >= longPeriodMin && duration < longPeriodMax) {
   d46c0:	4285      	cmp	r5, r0
   d46c2:	db02      	blt.n	d46ca <_Z10inputEventv+0x6a>
        newStateDuration = longPeriod;
   d46c4:	42b5      	cmp	r5, r6
   d46c6:	bfb8      	it	lt
   d46c8:	2401      	movlt	r4, #1
    }
    
    
    // Printing (debug)
    //Serial.printlnf("Read %s impulse duration: %d ms -> #%d (CurrentInputState: %d)", inputCurrentStateHigh ? "HIGH" : "LOW", duration, newStateDuration, CurrentInputState);
    inputCurrentStateHigh = !inputCurrentStateHigh;
   d46ca:	4a29      	ldr	r2, [pc, #164]	; (d4770 <_Z10inputEventv+0x110>)
   d46cc:	7813      	ldrb	r3, [r2, #0]
   d46ce:	f083 0301 	eor.w	r3, r3, #1
   d46d2:	7013      	strb	r3, [r2, #0]

    // STATE MACHINE: Decode Manchester
    switch (CurrentInputState) {
   d46d4:	4b27      	ldr	r3, [pc, #156]	; (d4774 <_Z10inputEventv+0x114>)
   d46d6:	781a      	ldrb	r2, [r3, #0]
   d46d8:	2a04      	cmp	r2, #4
   d46da:	d817      	bhi.n	d470c <_Z10inputEventv+0xac>
   d46dc:	e8df f002 	tbb	[pc, r2]
   d46e0:	251c1305 	.word	0x251c1305
   d46e4:	2e          	.byte	0x2e
   d46e5:	00          	.byte	0x00
        newStateDuration = veryLongPeriod;
   d46e6:	2402      	movs	r4, #2
   d46e8:	e7ef      	b.n	d46ca <_Z10inputEventv+0x6a>
        case initial:
            if (newStateDuration == shortPeriod || newStateDuration == veryLongPeriod) {
   d46ea:	07e3      	lsls	r3, r4, #31
   d46ec:	d404      	bmi.n	d46f8 <_Z10inputEventv+0x98>
                changeInputState(output0);
   d46ee:	2001      	movs	r0, #1
                Serial.printlnf("ERROR: expected shortPeriod in wait state got #%d", newStateDuration);
            }
            changeInputState(output1);
            break;
    }
}
   d46f0:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
               changeInputState(output1);
   d46f4:	f7ff bf90 	b.w	d4618 <_Z16changeInputState10InputState>
                Serial.println("ERROR: initial state got longPeriod");
   d46f8:	f000 fd8a 	bl	d5210 <_Z16_fetch_usbserialv>
   d46fc:	491e      	ldr	r1, [pc, #120]	; (d4778 <_Z10inputEventv+0x118>)
}
   d46fe:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
                Serial.println("UNDEFINED behaviour for veryLongPeriod in inputState 'output1'");
   d4702:	f000 bba2 	b.w	d4e4a <_ZN5Print7printlnEPKc>
            if (newStateDuration == shortPeriod) {
   d4706:	b91c      	cbnz	r4, d4710 <_Z10inputEventv+0xb0>
    CurrentInputState = newInputState; // Change to new state for next event
   d4708:	2202      	movs	r2, #2
   d470a:	701a      	strb	r2, [r3, #0]
}
   d470c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
            else if (newStateDuration == longPeriod) {
   d4710:	2c01      	cmp	r4, #1
   d4712:	d1fb      	bne.n	d470c <_Z10inputEventv+0xac>
               changeInputState(output1);
   d4714:	2003      	movs	r0, #3
   d4716:	e7eb      	b.n	d46f0 <_Z10inputEventv+0x90>
            if (newStateDuration != shortPeriod) {
   d4718:	2c00      	cmp	r4, #0
   d471a:	d0e8      	beq.n	d46ee <_Z10inputEventv+0x8e>
                Serial.printlnf("ERROR: expected shortPeriod in wait state got #%d", newStateDuration);
   d471c:	f000 fd78 	bl	d5210 <_Z16_fetch_usbserialv>
   d4720:	4916      	ldr	r1, [pc, #88]	; (d477c <_Z10inputEventv+0x11c>)
   d4722:	4622      	mov	r2, r4
   d4724:	f7ff fcea 	bl	d40fc <_ZN5Print8printlnfEPKcz>
   d4728:	e7e1      	b.n	d46ee <_Z10inputEventv+0x8e>
            if (newStateDuration == shortPeriod) {
   d472a:	b90c      	cbnz	r4, d4730 <_Z10inputEventv+0xd0>
    CurrentInputState = newInputState; // Change to new state for next event
   d472c:	2204      	movs	r2, #4
   d472e:	e7ec      	b.n	d470a <_Z10inputEventv+0xaa>
            else if (newStateDuration == longPeriod) {
   d4730:	2c01      	cmp	r4, #1
   d4732:	d0dc      	beq.n	d46ee <_Z10inputEventv+0x8e>
                Serial.println("UNDEFINED behaviour for veryLongPeriod in inputState 'output1'");
   d4734:	f000 fd6c 	bl	d5210 <_Z16_fetch_usbserialv>
   d4738:	4911      	ldr	r1, [pc, #68]	; (d4780 <_Z10inputEventv+0x120>)
   d473a:	e7e0      	b.n	d46fe <_Z10inputEventv+0x9e>
            if (newStateDuration != shortPeriod) {
   d473c:	2c00      	cmp	r4, #0
   d473e:	d0e9      	beq.n	d4714 <_Z10inputEventv+0xb4>
                Serial.printlnf("ERROR: expected shortPeriod in wait state got #%d", newStateDuration);
   d4740:	f000 fd66 	bl	d5210 <_Z16_fetch_usbserialv>
   d4744:	490d      	ldr	r1, [pc, #52]	; (d477c <_Z10inputEventv+0x11c>)
   d4746:	4622      	mov	r2, r4
   d4748:	f7ff fcd8 	bl	d40fc <_ZN5Print8printlnfEPKcz>
   d474c:	e7e2      	b.n	d4714 <_Z10inputEventv+0xb4>
   d474e:	bf00      	nop
   d4750:	9999999a 	.word	0x9999999a
   d4754:	3fe99999 	.word	0x3fe99999
   d4758:	9999999a 	.word	0x9999999a
   d475c:	40019999 	.word	0x40019999
   d4760:	cccccccd 	.word	0xcccccccd
   d4764:	3ffccccc 	.word	0x3ffccccc
   d4768:	2003e5fc 	.word	0x2003e5fc
   d476c:	2003e57c 	.word	0x2003e57c
   d4770:	2003e5fa 	.word	0x2003e5fa
   d4774:	2003e5f9 	.word	0x2003e5f9
   d4778:	000d6120 	.word	0x000d6120
   d477c:	000d6144 	.word	0x000d6144
   d4780:	000d6176 	.word	0x000d6176

000d4784 <_Z6output8PinState>:
// ----------
// HANDLE OUTPUT 
// ----------


void output(PinState level) {
   d4784:	b508      	push	{r3, lr}
    digitalWrite(outputPin, level);
   d4786:	4b06      	ldr	r3, [pc, #24]	; (d47a0 <_Z6output8PinState+0x1c>)
void output(PinState level) {
   d4788:	4601      	mov	r1, r0
    digitalWrite(outputPin, level);
   d478a:	8818      	ldrh	r0, [r3, #0]
   d478c:	f000 ff8f 	bl	d56ae <digitalWrite>
    os_thread_delay_until(&lastThreadTime, outputClockPeriod);
   d4790:	4b04      	ldr	r3, [pc, #16]	; (d47a4 <_Z6output8PinState+0x20>)
   d4792:	4805      	ldr	r0, [pc, #20]	; (d47a8 <_Z6output8PinState+0x24>)
   d4794:	6819      	ldr	r1, [r3, #0]
}
   d4796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_thread_delay_until(&lastThreadTime, outputClockPeriod);
   d479a:	f000 b8e1 	b.w	d4960 <os_thread_delay_until>
   d479e:	bf00      	nop
   d47a0:	2003e588 	.word	0x2003e588
   d47a4:	2003e584 	.word	0x2003e584
   d47a8:	2003e600 	.word	0x2003e600

000d47ac <_Z18sendBitsManchesterPbi>:

void sendBitsManchester(bool bits[], int bitCount) {
   d47ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (int i = 0; i < bitCount; i++) {
        if (bits[i] == BIT1) {
   d47ae:	4f0c      	ldr	r7, [pc, #48]	; (d47e0 <_Z18sendBitsManchesterPbi+0x34>)
void sendBitsManchester(bool bits[], int bitCount) {
   d47b0:	4605      	mov	r5, r0
   d47b2:	460e      	mov	r6, r1
    for (int i = 0; i < bitCount; i++) {
   d47b4:	2400      	movs	r4, #0
   d47b6:	42b4      	cmp	r4, r6
   d47b8:	da10      	bge.n	d47dc <_Z18sendBitsManchesterPbi+0x30>
        if (bits[i] == BIT1) {
   d47ba:	5d2a      	ldrb	r2, [r5, r4]
   d47bc:	783b      	ldrb	r3, [r7, #0]
   d47be:	429a      	cmp	r2, r3
   d47c0:	d107      	bne.n	d47d2 <_Z18sendBitsManchesterPbi+0x26>
            // Send 1 in Manchester
            //Serial.println("SEND: 1");
            output(HIGH);
   d47c2:	2001      	movs	r0, #1
   d47c4:	f7ff ffde 	bl	d4784 <_Z6output8PinState>
            output(LOW);
   d47c8:	2000      	movs	r0, #0
        }
        else {
            // Send 0 in Manchester
            //Serial.println("SEND: 0");
            output(LOW);
            output(HIGH);
   d47ca:	f7ff ffdb 	bl	d4784 <_Z6output8PinState>
    for (int i = 0; i < bitCount; i++) {
   d47ce:	3401      	adds	r4, #1
   d47d0:	e7f1      	b.n	d47b6 <_Z18sendBitsManchesterPbi+0xa>
            output(LOW);
   d47d2:	2000      	movs	r0, #0
   d47d4:	f7ff ffd6 	bl	d4784 <_Z6output8PinState>
            output(HIGH);
   d47d8:	2001      	movs	r0, #1
   d47da:	e7f6      	b.n	d47ca <_Z18sendBitsManchesterPbi+0x1e>
        }
    }
}
   d47dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d47de:	bf00      	nop
   d47e0:	2003e578 	.word	0x2003e578

000d47e4 <_Z12outputThreadv>:

void outputThread() {
   d47e4:	b507      	push	{r0, r1, r2, lr}
    //delay(5000);
    Serial.println("Starting output loop");
   d47e6:	f000 fd13 	bl	d5210 <_Z16_fetch_usbserialv>
   d47ea:	4915      	ldr	r1, [pc, #84]	; (d4840 <_Z12outputThreadv+0x5c>)
    while(true) {
        
        bool bitsToSend[] = {BIT0, BIT1, BIT1, BIT1, BIT0, BIT1, BIT0, BIT1};
   d47ec:	4e15      	ldr	r6, [pc, #84]	; (d4844 <_Z12outputThreadv+0x60>)
   d47ee:	4d16      	ldr	r5, [pc, #88]	; (d4848 <_Z12outputThreadv+0x64>)
        sendBitsManchester(bitsToSend, 8);
        Serial.println("---------");
   d47f0:	4c16      	ldr	r4, [pc, #88]	; (d484c <_Z12outputThreadv+0x68>)
    Serial.println("Starting output loop");
   d47f2:	f000 fb2a 	bl	d4e4a <_ZN5Print7printlnEPKc>
        bool bitsToSend[] = {BIT0, BIT1, BIT1, BIT1, BIT0, BIT1, BIT0, BIT1};
   d47f6:	782b      	ldrb	r3, [r5, #0]
   d47f8:	7832      	ldrb	r2, [r6, #0]
   d47fa:	f88d 2000 	strb.w	r2, [sp]
        sendBitsManchester(bitsToSend, 8);
   d47fe:	2108      	movs	r1, #8
   d4800:	4668      	mov	r0, sp
        bool bitsToSend[] = {BIT0, BIT1, BIT1, BIT1, BIT0, BIT1, BIT0, BIT1};
   d4802:	f88d 3001 	strb.w	r3, [sp, #1]
   d4806:	f88d 3002 	strb.w	r3, [sp, #2]
   d480a:	f88d 3003 	strb.w	r3, [sp, #3]
   d480e:	f88d 2004 	strb.w	r2, [sp, #4]
   d4812:	f88d 3005 	strb.w	r3, [sp, #5]
   d4816:	f88d 2006 	strb.w	r2, [sp, #6]
   d481a:	f88d 3007 	strb.w	r3, [sp, #7]
        sendBitsManchester(bitsToSend, 8);
   d481e:	f7ff ffc5 	bl	d47ac <_Z18sendBitsManchesterPbi>
        Serial.println("---------");
   d4822:	f000 fcf5 	bl	d5210 <_Z16_fetch_usbserialv>
   d4826:	4621      	mov	r1, r4
   d4828:	f000 fb0f 	bl	d4e4a <_ZN5Print7printlnEPKc>
        os_thread_delay_until(&lastThreadTime, 2000);
   d482c:	4808      	ldr	r0, [pc, #32]	; (d4850 <_Z12outputThreadv+0x6c>)
   d482e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d4832:	f000 f895 	bl	d4960 <os_thread_delay_until>
        CurrentInputState = initial;
   d4836:	4b07      	ldr	r3, [pc, #28]	; (d4854 <_Z12outputThreadv+0x70>)
   d4838:	2200      	movs	r2, #0
   d483a:	701a      	strb	r2, [r3, #0]
    while(true) {
   d483c:	e7db      	b.n	d47f6 <_Z12outputThreadv+0x12>
   d483e:	bf00      	nop
   d4840:	000d61b5 	.word	0x000d61b5
   d4844:	2003e5f8 	.word	0x2003e5f8
   d4848:	2003e578 	.word	0x2003e578
   d484c:	000d61ca 	.word	0x000d61ca
   d4850:	2003e600 	.word	0x2003e600
   d4854:	2003e5f9 	.word	0x2003e5f9

000d4858 <_GLOBAL__sub_I_outputPin>:
	}
}
   d4858:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
   d485a:	2100      	movs	r1, #0
   d485c:	2001      	movs	r0, #1
   d485e:	f000 f977 	bl	d4b50 <system_thread_set_state>
MessageManager msgManager;
   d4862:	4802      	ldr	r0, [pc, #8]	; (d486c <_GLOBAL__sub_I_outputPin+0x14>)
   d4864:	f7ff fe20 	bl	d44a8 <_ZN14MessageManagerC1Ev>
}
   d4868:	bd08      	pop	{r3, pc}
   d486a:	bf00      	nop
   d486c:	2003e604 	.word	0x2003e604

000d4870 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <netdb_freeaddrinfo+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	689b      	ldr	r3, [r3, #8]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	00030268 	.word	0x00030268

000d4880 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <netdb_getaddrinfo+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	68db      	ldr	r3, [r3, #12]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	00030268 	.word	0x00030268

000d4890 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <HAL_Pin_Mode+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	689b      	ldr	r3, [r3, #8]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	0003022c 	.word	0x0003022c

000d48a0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <HAL_Get_Pin_Mode+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	68db      	ldr	r3, [r3, #12]
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	0003022c 	.word	0x0003022c

000d48b0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <HAL_GPIO_Write+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	691b      	ldr	r3, [r3, #16]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	0003022c 	.word	0x0003022c

000d48c0 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <HAL_Interrupts_Attach+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	699b      	ldr	r3, [r3, #24]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	0003022c 	.word	0x0003022c

000d48d0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <HAL_Interrupts_Detach+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	69db      	ldr	r3, [r3, #28]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	0003022c 	.word	0x0003022c

000d48e0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <HAL_RNG_GetRandomNumber+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	685b      	ldr	r3, [r3, #4]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030218 	.word	0x00030218

000d48f0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <HAL_Delay_Milliseconds+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	689b      	ldr	r3, [r3, #8]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	00030218 	.word	0x00030218

000d4900 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	695b      	ldr	r3, [r3, #20]
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	00030218 	.word	0x00030218

000d4910 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <hal_timer_millis+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030218 	.word	0x00030218

000d4920 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <os_thread_create+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	685b      	ldr	r3, [r3, #4]
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030248 	.word	0x00030248

000d4930 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <os_thread_is_current+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	689b      	ldr	r3, [r3, #8]
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	00030248 	.word	0x00030248

000d4940 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <os_thread_join+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	691b      	ldr	r3, [r3, #16]
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	00030248 	.word	0x00030248

000d4950 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <os_thread_cleanup+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	695b      	ldr	r3, [r3, #20]
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	00030248 	.word	0x00030248

000d4960 <os_thread_delay_until>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <os_thread_delay_until+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	699b      	ldr	r3, [r3, #24]
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	00030248 	.word	0x00030248

000d4970 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <os_mutex_recursive_create+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	00030248 	.word	0x00030248

000d4980 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <os_mutex_recursive_destroy+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	00030248 	.word	0x00030248

000d4990 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <os_thread_exit+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	00030248 	.word	0x00030248

000d49a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <inet_inet_ntop+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	695b      	ldr	r3, [r3, #20]
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	00030264 	.word	0x00030264

000d49b0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <hal_usart_init+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	681b      	ldr	r3, [r3, #0]
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	0003023c 	.word	0x0003023c

000d49c0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <hal_usart_write+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	68db      	ldr	r3, [r3, #12]
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	0003023c 	.word	0x0003023c

000d49d0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <hal_usart_available+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	691b      	ldr	r3, [r3, #16]
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	0003023c 	.word	0x0003023c

000d49e0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <hal_usart_read+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	695b      	ldr	r3, [r3, #20]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	0003023c 	.word	0x0003023c

000d49f0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <hal_usart_peek+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	699b      	ldr	r3, [r3, #24]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	0003023c 	.word	0x0003023c

000d4a00 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <hal_usart_flush+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	69db      	ldr	r3, [r3, #28]
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	0003023c 	.word	0x0003023c

000d4a10 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <hal_usart_is_enabled+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	6a1b      	ldr	r3, [r3, #32]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	0003023c 	.word	0x0003023c

000d4a20 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <hal_usart_available_data_for_write+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	0003023c 	.word	0x0003023c

000d4a30 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <hal_i2c_write+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	6a1b      	ldr	r3, [r3, #32]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030228 	.word	0x00030228

000d4a40 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <hal_i2c_available+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030228 	.word	0x00030228

000d4a50 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <hal_i2c_read+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030228 	.word	0x00030228

000d4a60 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <hal_i2c_peek+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030228 	.word	0x00030228

000d4a70 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <hal_i2c_flush+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030228 	.word	0x00030228

000d4a80 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <hal_i2c_is_enabled+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030228 	.word	0x00030228

000d4a90 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <hal_i2c_init+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	00030228 	.word	0x00030228

000d4aa0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <hal_spi_init+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	69db      	ldr	r3, [r3, #28]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	00030230 	.word	0x00030230

000d4ab0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <hal_spi_is_enabled+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	6a1b      	ldr	r3, [r3, #32]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	00030230 	.word	0x00030230

000d4ac0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_USB_USART_Init+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	681b      	ldr	r3, [r3, #0]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003024c 	.word	0x0003024c

000d4ad0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_USB_USART_Begin+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	685b      	ldr	r3, [r3, #4]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003024c 	.word	0x0003024c

000d4ae0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <HAL_USB_USART_Available_Data+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	691b      	ldr	r3, [r3, #16]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003024c 	.word	0x0003024c

000d4af0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	695b      	ldr	r3, [r3, #20]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003024c 	.word	0x0003024c

000d4b00 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <HAL_USB_USART_Receive_Data+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	699b      	ldr	r3, [r3, #24]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	0003024c 	.word	0x0003024c

000d4b10 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <HAL_USB_USART_Send_Data+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	69db      	ldr	r3, [r3, #28]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	0003024c 	.word	0x0003024c

000d4b20 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <HAL_USB_USART_Flush_Data+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	6a1b      	ldr	r3, [r3, #32]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	0003024c 	.word	0x0003024c

000d4b30 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <HAL_USB_USART_Is_Connected+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	0003024c 	.word	0x0003024c

000d4b40 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <set_system_mode+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	685b      	ldr	r3, [r3, #4]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030220 	.word	0x00030220

000d4b50 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <system_thread_set_state+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	00030220 	.word	0x00030220

000d4b60 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b03      	ldr	r3, [pc, #12]	; (d4b70 <system_ctrl_set_app_request_handler+0x10>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b6a:	9301      	str	r3, [sp, #4]
   d4b6c:	bd08      	pop	{r3, pc}
   d4b6e:	0000      	.short	0x0000
   d4b70:	00030220 	.word	0x00030220

000d4b74 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b03      	ldr	r3, [pc, #12]	; (d4b84 <system_ctrl_set_result+0x10>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b7e:	9301      	str	r3, [sp, #4]
   d4b80:	bd08      	pop	{r3, pc}
   d4b82:	0000      	.short	0x0000
   d4b84:	00030220 	.word	0x00030220

000d4b88 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <network_connect+0xc>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	685b      	ldr	r3, [r3, #4]
   d4b90:	9301      	str	r3, [sp, #4]
   d4b92:	bd08      	pop	{r3, pc}
   d4b94:	00030240 	.word	0x00030240

000d4b98 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4b98:	b508      	push	{r3, lr}
   d4b9a:	4b02      	ldr	r3, [pc, #8]	; (d4ba4 <network_connecting+0xc>)
   d4b9c:	681b      	ldr	r3, [r3, #0]
   d4b9e:	689b      	ldr	r3, [r3, #8]
   d4ba0:	9301      	str	r3, [sp, #4]
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	00030240 	.word	0x00030240

000d4ba8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b02      	ldr	r3, [pc, #8]	; (d4bb4 <network_disconnect+0xc>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	68db      	ldr	r3, [r3, #12]
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	00030240 	.word	0x00030240

000d4bb8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <network_ready+0xc>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	691b      	ldr	r3, [r3, #16]
   d4bc0:	9301      	str	r3, [sp, #4]
   d4bc2:	bd08      	pop	{r3, pc}
   d4bc4:	00030240 	.word	0x00030240

000d4bc8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b02      	ldr	r3, [pc, #8]	; (d4bd4 <network_on+0xc>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	695b      	ldr	r3, [r3, #20]
   d4bd0:	9301      	str	r3, [sp, #4]
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	00030240 	.word	0x00030240

000d4bd8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <network_off+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	699b      	ldr	r3, [r3, #24]
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	00030240 	.word	0x00030240

000d4be8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <network_listen+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	69db      	ldr	r3, [r3, #28]
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	00030240 	.word	0x00030240

000d4bf8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <network_listening+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	6a1b      	ldr	r3, [r3, #32]
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	00030240 	.word	0x00030240

000d4c08 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <network_set_listen_timeout+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030240 	.word	0x00030240

000d4c18 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <network_get_listen_timeout+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030240 	.word	0x00030240

000d4c28 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <network_is_on+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030240 	.word	0x00030240

000d4c38 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <network_is_off+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	00030240 	.word	0x00030240

000d4c48 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <spark_process+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	689b      	ldr	r3, [r3, #8]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	00030244 	.word	0x00030244

000d4c58 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	00030244 	.word	0x00030244

000d4c68 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <malloc+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	681b      	ldr	r3, [r3, #0]
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	0003021c 	.word	0x0003021c

000d4c78 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <free+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	685b      	ldr	r3, [r3, #4]
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	0003021c 	.word	0x0003021c

000d4c88 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <vsnprintf+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	0003021c 	.word	0x0003021c

000d4c98 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <abort+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	0003021c 	.word	0x0003021c

000d4ca8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <newlib_impure_ptr_callback+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	0003021c 	.word	0x0003021c

000d4cb8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4cb8:	2200      	movs	r2, #0
   d4cba:	6840      	ldr	r0, [r0, #4]
   d4cbc:	4611      	mov	r1, r2
   d4cbe:	f7ff bf9b 	b.w	d4bf8 <network_listening>

000d4cc2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4cc2:	2200      	movs	r2, #0
   d4cc4:	6840      	ldr	r0, [r0, #4]
   d4cc6:	4611      	mov	r1, r2
   d4cc8:	f7ff bfa6 	b.w	d4c18 <network_get_listen_timeout>

000d4ccc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4ccc:	6840      	ldr	r0, [r0, #4]
   d4cce:	2200      	movs	r2, #0
   d4cd0:	f7ff bf9a 	b.w	d4c08 <network_set_listen_timeout>

000d4cd4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4cd4:	6840      	ldr	r0, [r0, #4]
   d4cd6:	2200      	movs	r2, #0
   d4cd8:	f081 0101 	eor.w	r1, r1, #1
   d4cdc:	f7ff bf84 	b.w	d4be8 <network_listen>

000d4ce0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4ce0:	2300      	movs	r3, #0
   d4ce2:	6840      	ldr	r0, [r0, #4]
   d4ce4:	461a      	mov	r2, r3
   d4ce6:	4619      	mov	r1, r3
   d4ce8:	f7ff bf76 	b.w	d4bd8 <network_off>

000d4cec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4cec:	2300      	movs	r3, #0
   d4cee:	6840      	ldr	r0, [r0, #4]
   d4cf0:	461a      	mov	r2, r3
   d4cf2:	4619      	mov	r1, r3
   d4cf4:	f7ff bf68 	b.w	d4bc8 <network_on>

000d4cf8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4cf8:	2200      	movs	r2, #0
   d4cfa:	6840      	ldr	r0, [r0, #4]
   d4cfc:	4611      	mov	r1, r2
   d4cfe:	f7ff bf5b 	b.w	d4bb8 <network_ready>

000d4d02 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4d02:	2200      	movs	r2, #0
   d4d04:	6840      	ldr	r0, [r0, #4]
   d4d06:	4611      	mov	r1, r2
   d4d08:	f7ff bf46 	b.w	d4b98 <network_connecting>

000d4d0c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d0c:	6840      	ldr	r0, [r0, #4]
   d4d0e:	2200      	movs	r2, #0
   d4d10:	2102      	movs	r1, #2
   d4d12:	f7ff bf49 	b.w	d4ba8 <network_disconnect>

000d4d16 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4d16:	2300      	movs	r3, #0
   d4d18:	6840      	ldr	r0, [r0, #4]
   d4d1a:	461a      	mov	r2, r3
   d4d1c:	f7ff bf34 	b.w	d4b88 <network_connect>

000d4d20 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4d20:	4b02      	ldr	r3, [pc, #8]	; (d4d2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4d22:	2203      	movs	r2, #3
   d4d24:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4d26:	4a02      	ldr	r2, [pc, #8]	; (d4d30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4d28:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4d2a:	4770      	bx	lr
   d4d2c:	2003e644 	.word	0x2003e644
   d4d30:	000d61e8 	.word	0x000d61e8

000d4d34 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4d34:	b510      	push	{r4, lr}
   d4d36:	4604      	mov	r4, r0
   d4d38:	4608      	mov	r0, r1
{
    _spi = spi;
   d4d3a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4d3c:	f7ff feb0 	bl	d4aa0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4d40:	2300      	movs	r3, #0
   d4d42:	6063      	str	r3, [r4, #4]
}
   d4d44:	4620      	mov	r0, r4
   d4d46:	bd10      	pop	{r4, pc}

000d4d48 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4d48:	b510      	push	{r4, lr}
   d4d4a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4d4c:	6800      	ldr	r0, [r0, #0]
   d4d4e:	b118      	cbz	r0, d4d58 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4d50:	f7ff ff92 	bl	d4c78 <free>
            wakeupSource_ = nullptr;
   d4d54:	2300      	movs	r3, #0
   d4d56:	6023      	str	r3, [r4, #0]
        }
    }
   d4d58:	bd10      	pop	{r4, pc}

000d4d5a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4d5a:	b510      	push	{r4, lr}
   d4d5c:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4d5e:	f7ff fff3 	bl	d4d48 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4d62:	4620      	mov	r0, r4
   d4d64:	bd10      	pop	{r4, pc}
	...

000d4d68 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4d68:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4d6a:	4b09      	ldr	r3, [pc, #36]	; (d4d90 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4d6c:	4c09      	ldr	r4, [pc, #36]	; (d4d94 <_GLOBAL__sub_I_System+0x2c>)
   d4d6e:	2202      	movs	r2, #2
   d4d70:	2000      	movs	r0, #0
   d4d72:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4d74:	4b08      	ldr	r3, [pc, #32]	; (d4d98 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4d76:	6020      	str	r0, [r4, #0]
   d4d78:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4d7a:	71a0      	strb	r0, [r4, #6]
   d4d7c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4d7e:	f7ff fedf 	bl	d4b40 <set_system_mode>
SystemClass System;
   d4d82:	4620      	mov	r0, r4
   d4d84:	4a05      	ldr	r2, [pc, #20]	; (d4d9c <_GLOBAL__sub_I_System+0x34>)
   d4d86:	4906      	ldr	r1, [pc, #24]	; (d4da0 <_GLOBAL__sub_I_System+0x38>)
   d4d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4d8c:	f000 bce8 	b.w	d5760 <__aeabi_atexit>
   d4d90:	2003e658 	.word	0x2003e658
   d4d94:	2003e64c 	.word	0x2003e64c
   d4d98:	ffff0000 	.word	0xffff0000
   d4d9c:	2003e5f4 	.word	0x2003e5f4
   d4da0:	000d4d5b 	.word	0x000d4d5b

000d4da4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4da4:	b510      	push	{r4, lr}
   d4da6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4da8:	6800      	ldr	r0, [r0, #0]
   d4daa:	b108      	cbz	r0, d4db0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4dac:	f7ff fde8 	bl	d4980 <os_mutex_recursive_destroy>
    }
   d4db0:	4620      	mov	r0, r4
   d4db2:	bd10      	pop	{r4, pc}

000d4db4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4db4:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4db6:	4c06      	ldr	r4, [pc, #24]	; (d4dd0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4db8:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4dba:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4dbc:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4dbe:	f7ff fdd7 	bl	d4970 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4dc2:	4620      	mov	r0, r4
   d4dc4:	4a03      	ldr	r2, [pc, #12]	; (d4dd4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4dc6:	4904      	ldr	r1, [pc, #16]	; (d4dd8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4dcc:	f000 bcc8 	b.w	d5760 <__aeabi_atexit>
   d4dd0:	2003e65c 	.word	0x2003e65c
   d4dd4:	2003e5f4 	.word	0x2003e5f4
   d4dd8:	000d4da5 	.word	0x000d4da5

000d4ddc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4dde:	4606      	mov	r6, r0
   d4de0:	460d      	mov	r5, r1
  size_t n = 0;
   d4de2:	188f      	adds	r7, r1, r2
   d4de4:	2400      	movs	r4, #0
  while (size--) {
   d4de6:	42bd      	cmp	r5, r7
   d4de8:	d00c      	beq.n	d4e04 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4dea:	6833      	ldr	r3, [r6, #0]
   d4dec:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4df0:	689b      	ldr	r3, [r3, #8]
   d4df2:	4630      	mov	r0, r6
   d4df4:	4798      	blx	r3
     if (chunk>=0)
   d4df6:	1e03      	subs	r3, r0, #0
   d4df8:	db01      	blt.n	d4dfe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4dfa:	441c      	add	r4, r3
  while (size--) {
   d4dfc:	e7f3      	b.n	d4de6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4dfe:	2c00      	cmp	r4, #0
   d4e00:	bf08      	it	eq
   d4e02:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4e04:	4620      	mov	r0, r4
   d4e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e08 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4e08:	b513      	push	{r0, r1, r4, lr}
   d4e0a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4e0c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4e0e:	b159      	cbz	r1, d4e28 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4e10:	9101      	str	r1, [sp, #4]
   d4e12:	f001 f8f1 	bl	d5ff8 <strlen>
   d4e16:	6823      	ldr	r3, [r4, #0]
   d4e18:	9901      	ldr	r1, [sp, #4]
   d4e1a:	68db      	ldr	r3, [r3, #12]
   d4e1c:	4602      	mov	r2, r0
   d4e1e:	4620      	mov	r0, r4
    }
   d4e20:	b002      	add	sp, #8
   d4e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4e26:	4718      	bx	r3
    }
   d4e28:	b002      	add	sp, #8
   d4e2a:	bd10      	pop	{r4, pc}

000d4e2c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4e2c:	6803      	ldr	r3, [r0, #0]
   d4e2e:	689b      	ldr	r3, [r3, #8]
   d4e30:	4718      	bx	r3

000d4e32 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4e32:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4e34:	210d      	movs	r1, #13
{
   d4e36:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4e38:	f7ff fff8 	bl	d4e2c <_ZN5Print5printEc>
  n += print('\n');
   d4e3c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4e3e:	4604      	mov	r4, r0
  n += print('\n');
   d4e40:	4628      	mov	r0, r5
   d4e42:	f7ff fff3 	bl	d4e2c <_ZN5Print5printEc>
  return n;
}
   d4e46:	4420      	add	r0, r4
   d4e48:	bd38      	pop	{r3, r4, r5, pc}

000d4e4a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4e4a:	b538      	push	{r3, r4, r5, lr}
   d4e4c:	4605      	mov	r5, r0
  return write(str);
   d4e4e:	f7ff ffdb 	bl	d4e08 <_ZN5Print5writeEPKc>
   d4e52:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4e54:	4628      	mov	r0, r5
   d4e56:	f7ff ffec 	bl	d4e32 <_ZN5Print7printlnEv>
  return n;
}
   d4e5a:	4420      	add	r0, r4
   d4e5c:	bd38      	pop	{r3, r4, r5, pc}

000d4e5e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4e5e:	b530      	push	{r4, r5, lr}
   d4e60:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4e62:	2300      	movs	r3, #0
   d4e64:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4e68:	2a01      	cmp	r2, #1
   d4e6a:	bf98      	it	ls
   d4e6c:	220a      	movls	r2, #10
   d4e6e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4e70:	460d      	mov	r5, r1
   d4e72:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4e76:	fb01 5312 	mls	r3, r1, r2, r5
   d4e7a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4e7e:	2b09      	cmp	r3, #9
   d4e80:	bf94      	ite	ls
   d4e82:	3330      	addls	r3, #48	; 0x30
   d4e84:	3337      	addhi	r3, #55	; 0x37
   d4e86:	b2db      	uxtb	r3, r3
  } while(n);
   d4e88:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4e8a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4e8e:	d9ef      	bls.n	d4e70 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4e90:	4621      	mov	r1, r4
   d4e92:	f7ff ffb9 	bl	d4e08 <_ZN5Print5writeEPKc>
}
   d4e96:	b00b      	add	sp, #44	; 0x2c
   d4e98:	bd30      	pop	{r4, r5, pc}

000d4e9a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d4e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e9e:	b086      	sub	sp, #24
   d4ea0:	af00      	add	r7, sp, #0
   d4ea2:	4605      	mov	r5, r0
   d4ea4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d4ea6:	1d38      	adds	r0, r7, #4
   d4ea8:	2114      	movs	r1, #20
{
   d4eaa:	4614      	mov	r4, r2
    va_copy(args2, args);
   d4eac:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d4eae:	f7ff feeb 	bl	d4c88 <vsnprintf>

    if (n<bufsize)
   d4eb2:	2813      	cmp	r0, #19
   d4eb4:	d80e      	bhi.n	d4ed4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d4eb6:	1d39      	adds	r1, r7, #4
   d4eb8:	4628      	mov	r0, r5
   d4eba:	f7ff ffa5 	bl	d4e08 <_ZN5Print5writeEPKc>
   d4ebe:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d4ec0:	b11e      	cbz	r6, d4eca <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d4ec2:	4628      	mov	r0, r5
   d4ec4:	f7ff ffb5 	bl	d4e32 <_ZN5Print7printlnEv>
   d4ec8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d4eca:	4620      	mov	r0, r4
   d4ecc:	3718      	adds	r7, #24
   d4ece:	46bd      	mov	sp, r7
   d4ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d4ed4:	f100 0308 	add.w	r3, r0, #8
   d4ed8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d4edc:	46e8      	mov	r8, sp
        char bigger[n+1];
   d4ede:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d4ee2:	4622      	mov	r2, r4
   d4ee4:	1c41      	adds	r1, r0, #1
   d4ee6:	683b      	ldr	r3, [r7, #0]
   d4ee8:	4668      	mov	r0, sp
   d4eea:	f7ff fecd 	bl	d4c88 <vsnprintf>
  return write(str);
   d4eee:	4669      	mov	r1, sp
   d4ef0:	4628      	mov	r0, r5
   d4ef2:	f7ff ff89 	bl	d4e08 <_ZN5Print5writeEPKc>
   d4ef6:	4604      	mov	r4, r0
   d4ef8:	46c5      	mov	sp, r8
   d4efa:	e7e1      	b.n	d4ec0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d4efc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4efc:	4b01      	ldr	r3, [pc, #4]	; (d4f04 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4efe:	4a02      	ldr	r2, [pc, #8]	; (d4f08 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f00:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4f02:	4770      	bx	lr
   d4f04:	2003e660 	.word	0x2003e660
   d4f08:	000d621c 	.word	0x000d621c

000d4f0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4f0c:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4f0e:	681a      	ldr	r2, [r3, #0]
   d4f10:	4b02      	ldr	r3, [pc, #8]	; (d4f1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4f12:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4f14:	4770      	bx	lr
   d4f16:	bf00      	nop
   d4f18:	2003e58c 	.word	0x2003e58c
   d4f1c:	2003e664 	.word	0x2003e664

000d4f20 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4f20:	b510      	push	{r4, lr}
   d4f22:	4604      	mov	r4, r0
   d4f24:	f7ff f8f8 	bl	d4118 <_ZNSt14_Function_baseD1Ev>
   d4f28:	4620      	mov	r0, r4
   d4f2a:	bd10      	pop	{r4, pc}

000d4f2c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4f2c:	4803      	ldr	r0, [pc, #12]	; (d4f3c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4f2e:	4a04      	ldr	r2, [pc, #16]	; (d4f40 <_GLOBAL__sub_I_RGB+0x14>)
   d4f30:	4904      	ldr	r1, [pc, #16]	; (d4f44 <_GLOBAL__sub_I_RGB+0x18>)
   d4f32:	2300      	movs	r3, #0
   d4f34:	6083      	str	r3, [r0, #8]
   d4f36:	f000 bc13 	b.w	d5760 <__aeabi_atexit>
   d4f3a:	bf00      	nop
   d4f3c:	2003e668 	.word	0x2003e668
   d4f40:	2003e5f4 	.word	0x2003e5f4
   d4f44:	000d4f21 	.word	0x000d4f21

000d4f48 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4f48:	4b01      	ldr	r3, [pc, #4]	; (d4f50 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4f4a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4f4c:	4770      	bx	lr
   d4f4e:	bf00      	nop
   d4f50:	2003e590 	.word	0x2003e590

000d4f54 <serialEventRun>:
{
   d4f54:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4f56:	4b0b      	ldr	r3, [pc, #44]	; (d4f84 <serialEventRun+0x30>)
   d4f58:	b143      	cbz	r3, d4f6c <serialEventRun+0x18>
   d4f5a:	f000 f959 	bl	d5210 <_Z16_fetch_usbserialv>
   d4f5e:	6803      	ldr	r3, [r0, #0]
   d4f60:	691b      	ldr	r3, [r3, #16]
   d4f62:	4798      	blx	r3
   d4f64:	2800      	cmp	r0, #0
   d4f66:	dd01      	ble.n	d4f6c <serialEventRun+0x18>
        serialEvent();
   d4f68:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4f6c:	4b06      	ldr	r3, [pc, #24]	; (d4f88 <serialEventRun+0x34>)
   d4f6e:	b143      	cbz	r3, d4f82 <serialEventRun+0x2e>
   d4f70:	f000 f9f8 	bl	d5364 <_Z22__fetch_global_Serial1v>
   d4f74:	6803      	ldr	r3, [r0, #0]
   d4f76:	691b      	ldr	r3, [r3, #16]
   d4f78:	4798      	blx	r3
   d4f7a:	2800      	cmp	r0, #0
   d4f7c:	dd01      	ble.n	d4f82 <serialEventRun+0x2e>
        serialEvent1();
   d4f7e:	f3af 8000 	nop.w
}
   d4f82:	bd08      	pop	{r3, pc}
	...

000d4f8c <_post_loop>:
{
   d4f8c:	b508      	push	{r3, lr}
	serialEventRun();
   d4f8e:	f7ff ffe1 	bl	d4f54 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4f92:	f7ff fcb5 	bl	d4900 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4f96:	4b01      	ldr	r3, [pc, #4]	; (d4f9c <_post_loop+0x10>)
   d4f98:	6018      	str	r0, [r3, #0]
}
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	2003e7d4 	.word	0x2003e7d4

000d4fa0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4fa0:	4802      	ldr	r0, [pc, #8]	; (d4fac <_Z33system_initialize_user_backup_ramv+0xc>)
   d4fa2:	4a03      	ldr	r2, [pc, #12]	; (d4fb0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4fa4:	4903      	ldr	r1, [pc, #12]	; (d4fb4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4fa6:	1a12      	subs	r2, r2, r0
   d4fa8:	f000 bfec 	b.w	d5f84 <memcpy>
   d4fac:	2003f400 	.word	0x2003f400
   d4fb0:	2003f404 	.word	0x2003f404
   d4fb4:	000d6380 	.word	0x000d6380

000d4fb8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4fb8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4fba:	2300      	movs	r3, #0
   d4fbc:	9300      	str	r3, [sp, #0]
   d4fbe:	461a      	mov	r2, r3
   d4fc0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4fc4:	f7ff fdd6 	bl	d4b74 <system_ctrl_set_result>
}
   d4fc8:	b003      	add	sp, #12
   d4fca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4fd0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4fd0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4fd2:	8843      	ldrh	r3, [r0, #2]
   d4fd4:	2b0a      	cmp	r3, #10
   d4fd6:	d008      	beq.n	d4fea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4fd8:	2b50      	cmp	r3, #80	; 0x50
   d4fda:	d10b      	bne.n	d4ff4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4fdc:	4b09      	ldr	r3, [pc, #36]	; (d5004 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4fde:	681b      	ldr	r3, [r3, #0]
   d4fe0:	b14b      	cbz	r3, d4ff6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4fe2:	b003      	add	sp, #12
   d4fe4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4fe8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4fea:	f7ff ffe5 	bl	d4fb8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4fee:	b003      	add	sp, #12
   d4ff0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4ff4:	2300      	movs	r3, #0
   d4ff6:	9300      	str	r3, [sp, #0]
   d4ff8:	461a      	mov	r2, r3
   d4ffa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4ffe:	f7ff fdb9 	bl	d4b74 <system_ctrl_set_result>
}
   d5002:	e7f4      	b.n	d4fee <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5004:	2003e67c 	.word	0x2003e67c

000d5008 <module_user_init_hook>:
{
   d5008:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d500a:	4c12      	ldr	r4, [pc, #72]	; (d5054 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d500c:	4812      	ldr	r0, [pc, #72]	; (d5058 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d500e:	4d13      	ldr	r5, [pc, #76]	; (d505c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5010:	2100      	movs	r1, #0
   d5012:	f7ff fe49 	bl	d4ca8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5016:	6823      	ldr	r3, [r4, #0]
   d5018:	42ab      	cmp	r3, r5
   d501a:	4b11      	ldr	r3, [pc, #68]	; (d5060 <module_user_init_hook+0x58>)
   d501c:	bf0c      	ite	eq
   d501e:	2201      	moveq	r2, #1
   d5020:	2200      	movne	r2, #0
   d5022:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5024:	d002      	beq.n	d502c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5026:	f7ff ffbb 	bl	d4fa0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d502a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d502c:	f7ff fc58 	bl	d48e0 <HAL_RNG_GetRandomNumber>
   d5030:	4604      	mov	r4, r0
    srand(seed);
   d5032:	f000 ffbd 	bl	d5fb0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5036:	4b0b      	ldr	r3, [pc, #44]	; (d5064 <module_user_init_hook+0x5c>)
   d5038:	b113      	cbz	r3, d5040 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d503a:	4620      	mov	r0, r4
   d503c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5040:	2100      	movs	r1, #0
   d5042:	4808      	ldr	r0, [pc, #32]	; (d5064 <module_user_init_hook+0x5c>)
   d5044:	f7ff fe08 	bl	d4c58 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d504c:	4806      	ldr	r0, [pc, #24]	; (d5068 <module_user_init_hook+0x60>)
   d504e:	2100      	movs	r1, #0
   d5050:	f7ff bd86 	b.w	d4b60 <system_ctrl_set_app_request_handler>
   d5054:	2003f400 	.word	0x2003f400
   d5058:	000d4f49 	.word	0x000d4f49
   d505c:	9a271c1e 	.word	0x9a271c1e
   d5060:	2003e678 	.word	0x2003e678
   d5064:	00000000 	.word	0x00000000
   d5068:	000d4fd1 	.word	0x000d4fd1

000d506c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d506c:	4770      	bx	lr

000d506e <_ZN9IPAddressD0Ev>:
   d506e:	b510      	push	{r4, lr}
   d5070:	2118      	movs	r1, #24
   d5072:	4604      	mov	r4, r0
   d5074:	f000 fb79 	bl	d576a <_ZdlPvj>
   d5078:	4620      	mov	r0, r4
   d507a:	bd10      	pop	{r4, pc}

000d507c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d507c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d507e:	7d03      	ldrb	r3, [r0, #20]
   d5080:	2b06      	cmp	r3, #6
{
   d5082:	b08d      	sub	sp, #52	; 0x34
   d5084:	460e      	mov	r6, r1
   d5086:	f100 0704 	add.w	r7, r0, #4
   d508a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d508e:	d012      	beq.n	d50b6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5090:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5094:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5098:	220a      	movs	r2, #10
   d509a:	4630      	mov	r0, r6
   d509c:	f7ff fedf 	bl	d4e5e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d50a0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d50a2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d50a4:	d019      	beq.n	d50da <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d50a6:	2c00      	cmp	r4, #0
   d50a8:	d0f4      	beq.n	d5094 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d50aa:	212e      	movs	r1, #46	; 0x2e
   d50ac:	4630      	mov	r0, r6
   d50ae:	f7ff febd 	bl	d4e2c <_ZN5Print5printEc>
   d50b2:	4404      	add	r4, r0
   d50b4:	e7ee      	b.n	d5094 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d50b6:	232f      	movs	r3, #47	; 0x2f
   d50b8:	466a      	mov	r2, sp
   d50ba:	4639      	mov	r1, r7
   d50bc:	200a      	movs	r0, #10
		buf[0] = 0;
   d50be:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d50c2:	f7ff fc6d 	bl	d49a0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d50c6:	4668      	mov	r0, sp
   d50c8:	f000 ff96 	bl	d5ff8 <strlen>
   d50cc:	6833      	ldr	r3, [r6, #0]
   d50ce:	4602      	mov	r2, r0
   d50d0:	68db      	ldr	r3, [r3, #12]
   d50d2:	4669      	mov	r1, sp
   d50d4:	4630      	mov	r0, r6
   d50d6:	4798      	blx	r3
   d50d8:	4604      	mov	r4, r0
    }
    return n;
}
   d50da:	4620      	mov	r0, r4
   d50dc:	b00d      	add	sp, #52	; 0x34
   d50de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50e0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d50e0:	b510      	push	{r4, lr}
   d50e2:	4b05      	ldr	r3, [pc, #20]	; (d50f8 <_ZN9IPAddressC1Ev+0x18>)
   d50e4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d50e6:	2211      	movs	r2, #17
   d50e8:	f840 3b04 	str.w	r3, [r0], #4
   d50ec:	2100      	movs	r1, #0
   d50ee:	f000 ff57 	bl	d5fa0 <memset>
}
   d50f2:	4620      	mov	r0, r4
   d50f4:	bd10      	pop	{r4, pc}
   d50f6:	bf00      	nop
   d50f8:	000d6244 	.word	0x000d6244

000d50fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d50fc:	4603      	mov	r3, r0
   d50fe:	4a07      	ldr	r2, [pc, #28]	; (d511c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5100:	b510      	push	{r4, lr}
   d5102:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5106:	f101 0210 	add.w	r2, r1, #16
   d510a:	f851 4b04 	ldr.w	r4, [r1], #4
   d510e:	f843 4b04 	str.w	r4, [r3], #4
   d5112:	4291      	cmp	r1, r2
   d5114:	d1f9      	bne.n	d510a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5116:	780a      	ldrb	r2, [r1, #0]
   d5118:	701a      	strb	r2, [r3, #0]
}
   d511a:	bd10      	pop	{r4, pc}
   d511c:	000d6244 	.word	0x000d6244

000d5120 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5120:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5122:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5126:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d512a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d512e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5132:	2304      	movs	r3, #4
   d5134:	6041      	str	r1, [r0, #4]
   d5136:	7503      	strb	r3, [r0, #20]
}
   d5138:	bd10      	pop	{r4, pc}

000d513a <_ZN9IPAddressaSEPKh>:
{
   d513a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d513c:	78cb      	ldrb	r3, [r1, #3]
   d513e:	9300      	str	r3, [sp, #0]
   d5140:	788b      	ldrb	r3, [r1, #2]
   d5142:	784a      	ldrb	r2, [r1, #1]
   d5144:	7809      	ldrb	r1, [r1, #0]
   d5146:	f7ff ffeb 	bl	d5120 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d514a:	b002      	add	sp, #8
   d514c:	bd10      	pop	{r4, pc}

000d514e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d514e:	7441      	strb	r1, [r0, #17]
}
   d5150:	4770      	bx	lr

000d5152 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5152:	4770      	bx	lr

000d5154 <_ZN9USBSerial4readEv>:
{
   d5154:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5156:	2100      	movs	r1, #0
   d5158:	7c00      	ldrb	r0, [r0, #16]
   d515a:	f7ff fcd1 	bl	d4b00 <HAL_USB_USART_Receive_Data>
}
   d515e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5162:	bd08      	pop	{r3, pc}

000d5164 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5164:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5166:	2101      	movs	r1, #1
   d5168:	7c00      	ldrb	r0, [r0, #16]
   d516a:	f7ff fcc9 	bl	d4b00 <HAL_USB_USART_Receive_Data>
}
   d516e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5172:	bd08      	pop	{r3, pc}

000d5174 <_ZN9USBSerial17availableForWriteEv>:
{
   d5174:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5176:	7c00      	ldrb	r0, [r0, #16]
   d5178:	f7ff fcba 	bl	d4af0 <HAL_USB_USART_Available_Data_For_Write>
}
   d517c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5180:	bd08      	pop	{r3, pc}

000d5182 <_ZN9USBSerial9availableEv>:
{
   d5182:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5184:	7c00      	ldrb	r0, [r0, #16]
   d5186:	f7ff fcab 	bl	d4ae0 <HAL_USB_USART_Available_Data>
}
   d518a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d518e:	bd08      	pop	{r3, pc}

000d5190 <_ZN9USBSerial5writeEh>:
{
   d5190:	b513      	push	{r0, r1, r4, lr}
   d5192:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5194:	7c00      	ldrb	r0, [r0, #16]
{
   d5196:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5198:	f7ff fcaa 	bl	d4af0 <HAL_USB_USART_Available_Data_For_Write>
   d519c:	2800      	cmp	r0, #0
   d519e:	9901      	ldr	r1, [sp, #4]
   d51a0:	dc01      	bgt.n	d51a6 <_ZN9USBSerial5writeEh+0x16>
   d51a2:	7c60      	ldrb	r0, [r4, #17]
   d51a4:	b120      	cbz	r0, d51b0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d51a6:	7c20      	ldrb	r0, [r4, #16]
   d51a8:	f7ff fcb2 	bl	d4b10 <HAL_USB_USART_Send_Data>
   d51ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d51b0:	b002      	add	sp, #8
   d51b2:	bd10      	pop	{r4, pc}

000d51b4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d51b4:	7c00      	ldrb	r0, [r0, #16]
   d51b6:	f7ff bcb3 	b.w	d4b20 <HAL_USB_USART_Flush_Data>

000d51ba <_ZN9USBSerialD0Ev>:
   d51ba:	b510      	push	{r4, lr}
   d51bc:	2114      	movs	r1, #20
   d51be:	4604      	mov	r4, r0
   d51c0:	f000 fad3 	bl	d576a <_ZdlPvj>
   d51c4:	4620      	mov	r0, r4
   d51c6:	bd10      	pop	{r4, pc}

000d51c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d51c8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d51ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d51ce:	4604      	mov	r4, r0
   d51d0:	4608      	mov	r0, r1
   d51d2:	2100      	movs	r1, #0
   d51d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d51d8:	4b04      	ldr	r3, [pc, #16]	; (d51ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d51da:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d51dc:	2301      	movs	r3, #1
  _serial = serial;
   d51de:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d51e0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d51e2:	4611      	mov	r1, r2
   d51e4:	f7ff fc6c 	bl	d4ac0 <HAL_USB_USART_Init>
}
   d51e8:	4620      	mov	r0, r4
   d51ea:	bd10      	pop	{r4, pc}
   d51ec:	000d6258 	.word	0x000d6258

000d51f0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d51f0:	7c00      	ldrb	r0, [r0, #16]
   d51f2:	2200      	movs	r2, #0
   d51f4:	f7ff bc6c 	b.w	d4ad0 <HAL_USB_USART_Begin>

000d51f8 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   d51f8:	7c00      	ldrb	r0, [r0, #16]
   d51fa:	f7ff bc99 	b.w	d4b30 <HAL_USB_USART_Is_Connected>

000d51fe <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d51fe:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5200:	2214      	movs	r2, #20
{
   d5202:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5204:	2100      	movs	r1, #0
   d5206:	f000 fecb 	bl	d5fa0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d520a:	4620      	mov	r0, r4
   d520c:	bd10      	pop	{r4, pc}
	...

000d5210 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5210:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5212:	4c10      	ldr	r4, [pc, #64]	; (d5254 <_Z16_fetch_usbserialv+0x44>)
{
   d5214:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5216:	a803      	add	r0, sp, #12
   d5218:	f7ff fff1 	bl	d51fe <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d521c:	7821      	ldrb	r1, [r4, #0]
   d521e:	f3bf 8f5b 	dmb	ish
   d5222:	f011 0101 	ands.w	r1, r1, #1
   d5226:	d111      	bne.n	d524c <_Z16_fetch_usbserialv+0x3c>
   d5228:	4620      	mov	r0, r4
   d522a:	9101      	str	r1, [sp, #4]
   d522c:	f7fe ff39 	bl	d40a2 <__cxa_guard_acquire>
   d5230:	9901      	ldr	r1, [sp, #4]
   d5232:	b158      	cbz	r0, d524c <_Z16_fetch_usbserialv+0x3c>
   d5234:	aa03      	add	r2, sp, #12
   d5236:	4808      	ldr	r0, [pc, #32]	; (d5258 <_Z16_fetch_usbserialv+0x48>)
   d5238:	f7ff ffc6 	bl	d51c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d523c:	4620      	mov	r0, r4
   d523e:	f7fe ff35 	bl	d40ac <__cxa_guard_release>
   d5242:	4a06      	ldr	r2, [pc, #24]	; (d525c <_Z16_fetch_usbserialv+0x4c>)
   d5244:	4906      	ldr	r1, [pc, #24]	; (d5260 <_Z16_fetch_usbserialv+0x50>)
   d5246:	4804      	ldr	r0, [pc, #16]	; (d5258 <_Z16_fetch_usbserialv+0x48>)
   d5248:	f000 fa8a 	bl	d5760 <__aeabi_atexit>
	return _usbserial;
}
   d524c:	4802      	ldr	r0, [pc, #8]	; (d5258 <_Z16_fetch_usbserialv+0x48>)
   d524e:	b008      	add	sp, #32
   d5250:	bd10      	pop	{r4, pc}
   d5252:	bf00      	nop
   d5254:	2003e680 	.word	0x2003e680
   d5258:	2003e684 	.word	0x2003e684
   d525c:	2003e5f4 	.word	0x2003e5f4
   d5260:	000d5153 	.word	0x000d5153

000d5264 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d5264:	4700      	bx	r0
	...

000d5268 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d5268:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d526c:	2400      	movs	r4, #0
{
   d526e:	461d      	mov	r5, r3
   d5270:	460f      	mov	r7, r1
   d5272:	4690      	mov	r8, r2
   d5274:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d5276:	f7ff fb2b 	bl	d48d0 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d527a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d527c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d5280:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5284:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d5288:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d528c:	bfa2      	ittt	ge
   d528e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d5292:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d5296:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5298:	4907      	ldr	r1, [pc, #28]	; (d52b8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d529a:	9400      	str	r4, [sp, #0]
   d529c:	4643      	mov	r3, r8
   d529e:	463a      	mov	r2, r7
   d52a0:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d52a2:	bfa8      	it	ge
   d52a4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d52a8:	f7ff fb0a 	bl	d48c0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d52ac:	fab0 f080 	clz	r0, r0
   d52b0:	0940      	lsrs	r0, r0, #5
   d52b2:	b004      	add	sp, #16
   d52b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d52b8:	000d5265 	.word	0x000d5265

000d52bc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d52bc:	4770      	bx	lr

000d52be <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d52be:	7441      	strb	r1, [r0, #17]
}
   d52c0:	4770      	bx	lr

000d52c2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d52c2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d52c4:	7c00      	ldrb	r0, [r0, #16]
   d52c6:	f7ff fbab 	bl	d4a20 <hal_usart_available_data_for_write>
}
   d52ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52ce:	bd08      	pop	{r3, pc}

000d52d0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d52d0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d52d2:	7c00      	ldrb	r0, [r0, #16]
   d52d4:	f7ff fb7c 	bl	d49d0 <hal_usart_available>
}
   d52d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52dc:	bd08      	pop	{r3, pc}

000d52de <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d52de:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d52e0:	7c00      	ldrb	r0, [r0, #16]
   d52e2:	f7ff fb85 	bl	d49f0 <hal_usart_peek>
}
   d52e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d52ea:	bd08      	pop	{r3, pc}

000d52ec <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d52ec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d52ee:	7c00      	ldrb	r0, [r0, #16]
   d52f0:	f7ff fb76 	bl	d49e0 <hal_usart_read>
}
   d52f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d52f8:	bd08      	pop	{r3, pc}

000d52fa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d52fa:	7c00      	ldrb	r0, [r0, #16]
   d52fc:	f7ff bb80 	b.w	d4a00 <hal_usart_flush>

000d5300 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5300:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5302:	7c45      	ldrb	r5, [r0, #17]
{
   d5304:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5306:	b12d      	cbz	r5, d5314 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5308:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d530a:	b003      	add	sp, #12
   d530c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5310:	f7ff bb56 	b.w	d49c0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5314:	7c00      	ldrb	r0, [r0, #16]
   d5316:	9101      	str	r1, [sp, #4]
   d5318:	f7ff fb82 	bl	d4a20 <hal_usart_available_data_for_write>
   d531c:	2800      	cmp	r0, #0
   d531e:	9901      	ldr	r1, [sp, #4]
   d5320:	dcf2      	bgt.n	d5308 <_ZN11USARTSerial5writeEh+0x8>
}
   d5322:	4628      	mov	r0, r5
   d5324:	b003      	add	sp, #12
   d5326:	bd30      	pop	{r4, r5, pc}

000d5328 <_ZN11USARTSerialD0Ev>:
   d5328:	b510      	push	{r4, lr}
   d532a:	2114      	movs	r1, #20
   d532c:	4604      	mov	r4, r0
   d532e:	f000 fa1c 	bl	d576a <_ZdlPvj>
   d5332:	4620      	mov	r0, r4
   d5334:	bd10      	pop	{r4, pc}
	...

000d5338 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5338:	b510      	push	{r4, lr}
   d533a:	f04f 0c00 	mov.w	ip, #0
   d533e:	4604      	mov	r4, r0
   d5340:	4608      	mov	r0, r1
   d5342:	4611      	mov	r1, r2
   d5344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5348:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d534c:	4a04      	ldr	r2, [pc, #16]	; (d5360 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d534e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5350:	2201      	movs	r2, #1
  _serial = serial;
   d5352:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5354:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5356:	461a      	mov	r2, r3
   d5358:	f7ff fb2a 	bl	d49b0 <hal_usart_init>
}
   d535c:	4620      	mov	r0, r4
   d535e:	bd10      	pop	{r4, pc}
   d5360:	000d6288 	.word	0x000d6288

000d5364 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5364:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5366:	4c0e      	ldr	r4, [pc, #56]	; (d53a0 <_Z22__fetch_global_Serial1v+0x3c>)
   d5368:	7821      	ldrb	r1, [r4, #0]
   d536a:	f3bf 8f5b 	dmb	ish
   d536e:	f011 0101 	ands.w	r1, r1, #1
   d5372:	d112      	bne.n	d539a <_Z22__fetch_global_Serial1v+0x36>
   d5374:	4620      	mov	r0, r4
   d5376:	9101      	str	r1, [sp, #4]
   d5378:	f7fe fe93 	bl	d40a2 <__cxa_guard_acquire>
   d537c:	9901      	ldr	r1, [sp, #4]
   d537e:	b160      	cbz	r0, d539a <_Z22__fetch_global_Serial1v+0x36>
   d5380:	4a08      	ldr	r2, [pc, #32]	; (d53a4 <_Z22__fetch_global_Serial1v+0x40>)
   d5382:	4b09      	ldr	r3, [pc, #36]	; (d53a8 <_Z22__fetch_global_Serial1v+0x44>)
   d5384:	4809      	ldr	r0, [pc, #36]	; (d53ac <_Z22__fetch_global_Serial1v+0x48>)
   d5386:	f7ff ffd7 	bl	d5338 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d538a:	4620      	mov	r0, r4
   d538c:	f7fe fe8e 	bl	d40ac <__cxa_guard_release>
   d5390:	4a07      	ldr	r2, [pc, #28]	; (d53b0 <_Z22__fetch_global_Serial1v+0x4c>)
   d5392:	4908      	ldr	r1, [pc, #32]	; (d53b4 <_Z22__fetch_global_Serial1v+0x50>)
   d5394:	4805      	ldr	r0, [pc, #20]	; (d53ac <_Z22__fetch_global_Serial1v+0x48>)
   d5396:	f000 f9e3 	bl	d5760 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d539a:	4804      	ldr	r0, [pc, #16]	; (d53ac <_Z22__fetch_global_Serial1v+0x48>)
   d539c:	b002      	add	sp, #8
   d539e:	bd10      	pop	{r4, pc}
   d53a0:	2003e698 	.word	0x2003e698
   d53a4:	2003e69c 	.word	0x2003e69c
   d53a8:	2003e720 	.word	0x2003e720
   d53ac:	2003e7a4 	.word	0x2003e7a4
   d53b0:	2003e5f4 	.word	0x2003e5f4
   d53b4:	000d52bd 	.word	0x000d52bd

000d53b8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d53b8:	4770      	bx	lr

000d53ba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d53ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53bc:	4606      	mov	r6, r0
   d53be:	4615      	mov	r5, r2
   d53c0:	460c      	mov	r4, r1
   d53c2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53c4:	42bc      	cmp	r4, r7
   d53c6:	d006      	beq.n	d53d6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d53c8:	6833      	ldr	r3, [r6, #0]
   d53ca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d53ce:	689b      	ldr	r3, [r3, #8]
   d53d0:	4630      	mov	r0, r6
   d53d2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d53d4:	e7f6      	b.n	d53c4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d53d6:	4628      	mov	r0, r5
   d53d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53da <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d53da:	7c00      	ldrb	r0, [r0, #16]
   d53dc:	2200      	movs	r2, #0
   d53de:	f7ff bb27 	b.w	d4a30 <hal_i2c_write>

000d53e2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d53e2:	7c00      	ldrb	r0, [r0, #16]
   d53e4:	2100      	movs	r1, #0
   d53e6:	f7ff bb2b 	b.w	d4a40 <hal_i2c_available>

000d53ea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d53ea:	7c00      	ldrb	r0, [r0, #16]
   d53ec:	2100      	movs	r1, #0
   d53ee:	f7ff bb2f 	b.w	d4a50 <hal_i2c_read>

000d53f2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d53f2:	7c00      	ldrb	r0, [r0, #16]
   d53f4:	2100      	movs	r1, #0
   d53f6:	f7ff bb33 	b.w	d4a60 <hal_i2c_peek>

000d53fa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d53fa:	7c00      	ldrb	r0, [r0, #16]
   d53fc:	2100      	movs	r1, #0
   d53fe:	f7ff bb37 	b.w	d4a70 <hal_i2c_flush>

000d5402 <_ZN7TwoWireD0Ev>:
   d5402:	b510      	push	{r4, lr}
   d5404:	2114      	movs	r1, #20
   d5406:	4604      	mov	r4, r0
   d5408:	f000 f9af 	bl	d576a <_ZdlPvj>
   d540c:	4620      	mov	r0, r4
   d540e:	bd10      	pop	{r4, pc}

000d5410 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5410:	b510      	push	{r4, lr}
   d5412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5416:	4604      	mov	r4, r0
   d5418:	4608      	mov	r0, r1
   d541a:	2100      	movs	r1, #0
   d541c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5420:	4b03      	ldr	r3, [pc, #12]	; (d5430 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5422:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5424:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5426:	4611      	mov	r1, r2
   d5428:	f7ff fb32 	bl	d4a90 <hal_i2c_init>
}
   d542c:	4620      	mov	r0, r4
   d542e:	bd10      	pop	{r4, pc}
   d5430:	000d62b8 	.word	0x000d62b8

000d5434 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5434:	2200      	movs	r2, #0
   d5436:	6840      	ldr	r0, [r0, #4]
   d5438:	4611      	mov	r1, r2
   d543a:	f7ff bbbd 	b.w	d4bb8 <network_ready>

000d543e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d543e:	2200      	movs	r2, #0
   d5440:	6840      	ldr	r0, [r0, #4]
   d5442:	4611      	mov	r1, r2
   d5444:	f7ff bbd8 	b.w	d4bf8 <network_listening>

000d5448 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5448:	2200      	movs	r2, #0
   d544a:	6840      	ldr	r0, [r0, #4]
   d544c:	4611      	mov	r1, r2
   d544e:	f7ff bbe3 	b.w	d4c18 <network_get_listen_timeout>

000d5452 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5452:	6840      	ldr	r0, [r0, #4]
   d5454:	2200      	movs	r2, #0
   d5456:	f7ff bbd7 	b.w	d4c08 <network_set_listen_timeout>

000d545a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d545a:	6840      	ldr	r0, [r0, #4]
   d545c:	2200      	movs	r2, #0
   d545e:	f081 0101 	eor.w	r1, r1, #1
   d5462:	f7ff bbc1 	b.w	d4be8 <network_listen>

000d5466 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5466:	2300      	movs	r3, #0
   d5468:	6840      	ldr	r0, [r0, #4]
   d546a:	461a      	mov	r2, r3
   d546c:	4619      	mov	r1, r3
   d546e:	f7ff bbb3 	b.w	d4bd8 <network_off>

000d5472 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5472:	2300      	movs	r3, #0
   d5474:	6840      	ldr	r0, [r0, #4]
   d5476:	461a      	mov	r2, r3
   d5478:	4619      	mov	r1, r3
   d547a:	f7ff bba5 	b.w	d4bc8 <network_on>

000d547e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d547e:	2200      	movs	r2, #0
   d5480:	6840      	ldr	r0, [r0, #4]
   d5482:	4611      	mov	r1, r2
   d5484:	f7ff bb88 	b.w	d4b98 <network_connecting>

000d5488 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5488:	6840      	ldr	r0, [r0, #4]
   d548a:	2200      	movs	r2, #0
   d548c:	2102      	movs	r1, #2
   d548e:	f7ff bb8b 	b.w	d4ba8 <network_disconnect>

000d5492 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5492:	2300      	movs	r3, #0
   d5494:	6840      	ldr	r0, [r0, #4]
   d5496:	461a      	mov	r2, r3
   d5498:	f7ff bb76 	b.w	d4b88 <network_connect>

000d549c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d549c:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d549e:	2204      	movs	r2, #4
   d54a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d54a2:	4a02      	ldr	r2, [pc, #8]	; (d54ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d54a4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d54a6:	4770      	bx	lr
   d54a8:	2003e7b8 	.word	0x2003e7b8
   d54ac:	000d62e0 	.word	0x000d62e0

000d54b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d54b0:	2300      	movs	r3, #0
   d54b2:	6840      	ldr	r0, [r0, #4]
   d54b4:	461a      	mov	r2, r3
   d54b6:	f7ff bb67 	b.w	d4b88 <network_connect>

000d54ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d54ba:	6840      	ldr	r0, [r0, #4]
   d54bc:	2200      	movs	r2, #0
   d54be:	2102      	movs	r1, #2
   d54c0:	f7ff bb72 	b.w	d4ba8 <network_disconnect>

000d54c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d54c4:	2200      	movs	r2, #0
   d54c6:	6840      	ldr	r0, [r0, #4]
   d54c8:	4611      	mov	r1, r2
   d54ca:	f7ff bb65 	b.w	d4b98 <network_connecting>

000d54ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d54ce:	2200      	movs	r2, #0
   d54d0:	6840      	ldr	r0, [r0, #4]
   d54d2:	4611      	mov	r1, r2
   d54d4:	f7ff bb70 	b.w	d4bb8 <network_ready>

000d54d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d54d8:	2300      	movs	r3, #0
   d54da:	6840      	ldr	r0, [r0, #4]
   d54dc:	461a      	mov	r2, r3
   d54de:	4619      	mov	r1, r3
   d54e0:	f7ff bb72 	b.w	d4bc8 <network_on>

000d54e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d54e4:	2300      	movs	r3, #0
   d54e6:	6840      	ldr	r0, [r0, #4]
   d54e8:	461a      	mov	r2, r3
   d54ea:	4619      	mov	r1, r3
   d54ec:	f7ff bb74 	b.w	d4bd8 <network_off>

000d54f0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d54f0:	6840      	ldr	r0, [r0, #4]
   d54f2:	2100      	movs	r1, #0
   d54f4:	f7ff bb98 	b.w	d4c28 <network_is_on>

000d54f8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d54f8:	6840      	ldr	r0, [r0, #4]
   d54fa:	2100      	movs	r1, #0
   d54fc:	f7ff bb9c 	b.w	d4c38 <network_is_off>

000d5500 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5500:	6840      	ldr	r0, [r0, #4]
   d5502:	2200      	movs	r2, #0
   d5504:	f081 0101 	eor.w	r1, r1, #1
   d5508:	f7ff bb6e 	b.w	d4be8 <network_listen>

000d550c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d550c:	6840      	ldr	r0, [r0, #4]
   d550e:	2200      	movs	r2, #0
   d5510:	f7ff bb7a 	b.w	d4c08 <network_set_listen_timeout>

000d5514 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5514:	2200      	movs	r2, #0
   d5516:	6840      	ldr	r0, [r0, #4]
   d5518:	4611      	mov	r1, r2
   d551a:	f7ff bb7d 	b.w	d4c18 <network_get_listen_timeout>

000d551e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d551e:	2200      	movs	r2, #0
   d5520:	6840      	ldr	r0, [r0, #4]
   d5522:	4611      	mov	r1, r2
   d5524:	f7ff bb68 	b.w	d4bf8 <network_listening>

000d5528 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d552c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d552e:	b095      	sub	sp, #84	; 0x54
   d5530:	4616      	mov	r6, r2
   d5532:	460d      	mov	r5, r1
   d5534:	4607      	mov	r7, r0
    IPAddress addr;
   d5536:	f7ff fdd3 	bl	d50e0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d553a:	4621      	mov	r1, r4
   d553c:	2218      	movs	r2, #24
   d553e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5540:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5542:	f000 fd2d 	bl	d5fa0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5546:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5548:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d554c:	4621      	mov	r1, r4
   d554e:	466b      	mov	r3, sp
   d5550:	aa0c      	add	r2, sp, #48	; 0x30
   d5552:	4630      	mov	r0, r6
   d5554:	f7ff f994 	bl	d4880 <netdb_getaddrinfo>
    if (!r) {
   d5558:	4604      	mov	r4, r0
   d555a:	2800      	cmp	r0, #0
   d555c:	d146      	bne.n	d55ec <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d555e:	4602      	mov	r2, r0
   d5560:	2101      	movs	r1, #1
   d5562:	6868      	ldr	r0, [r5, #4]
   d5564:	f7ff fb28 	bl	d4bb8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5568:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d556a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d556c:	4622      	mov	r2, r4
   d556e:	6868      	ldr	r0, [r5, #4]
   d5570:	f7ff fb22 	bl	d4bb8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5574:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5576:	4681      	mov	r9, r0
        bool ok = false;
   d5578:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d557a:	2e00      	cmp	r6, #0
   d557c:	d036      	beq.n	d55ec <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d557e:	2900      	cmp	r1, #0
   d5580:	d134      	bne.n	d55ec <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5582:	6873      	ldr	r3, [r6, #4]
   d5584:	2b02      	cmp	r3, #2
   d5586:	d003      	beq.n	d5590 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5588:	2b0a      	cmp	r3, #10
   d558a:	d00b      	beq.n	d55a4 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d558c:	69f6      	ldr	r6, [r6, #28]
   d558e:	e7f4      	b.n	d557a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5590:	f1b8 0f00 	cmp.w	r8, #0
   d5594:	d004      	beq.n	d55a0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5596:	6971      	ldr	r1, [r6, #20]
   d5598:	4638      	mov	r0, r7
   d559a:	3104      	adds	r1, #4
   d559c:	f7ff fdcd 	bl	d513a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d55a0:	4641      	mov	r1, r8
   d55a2:	e7f3      	b.n	d558c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d55a4:	f1b9 0f00 	cmp.w	r9, #0
   d55a8:	d101      	bne.n	d55ae <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d55aa:	4649      	mov	r1, r9
   d55ac:	e7ee      	b.n	d558c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d55ae:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d55b0:	2210      	movs	r2, #16
   d55b2:	a801      	add	r0, sp, #4
   d55b4:	f000 fcf4 	bl	d5fa0 <memset>
                    a.v = 6;
   d55b8:	2306      	movs	r3, #6
   d55ba:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d55be:	ad01      	add	r5, sp, #4
   d55c0:	f104 0308 	add.w	r3, r4, #8
   d55c4:	3418      	adds	r4, #24
   d55c6:	6818      	ldr	r0, [r3, #0]
   d55c8:	6859      	ldr	r1, [r3, #4]
   d55ca:	462a      	mov	r2, r5
   d55cc:	c203      	stmia	r2!, {r0, r1}
   d55ce:	3308      	adds	r3, #8
   d55d0:	42a3      	cmp	r3, r4
   d55d2:	4615      	mov	r5, r2
   d55d4:	d1f7      	bne.n	d55c6 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d55d6:	a901      	add	r1, sp, #4
   d55d8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d55da:	ad07      	add	r5, sp, #28
   d55dc:	f7ff fd8e 	bl	d50fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d55e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d55e2:	1d3c      	adds	r4, r7, #4
   d55e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d55e6:	682b      	ldr	r3, [r5, #0]
   d55e8:	7023      	strb	r3, [r4, #0]
   d55ea:	e7de      	b.n	d55aa <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d55ec:	9800      	ldr	r0, [sp, #0]
   d55ee:	f7ff f93f 	bl	d4870 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d55f2:	4638      	mov	r0, r7
   d55f4:	b015      	add	sp, #84	; 0x54
   d55f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d55fc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d55fc:	4b02      	ldr	r3, [pc, #8]	; (d5608 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d55fe:	4a03      	ldr	r2, [pc, #12]	; (d560c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5600:	601a      	str	r2, [r3, #0]
   d5602:	2200      	movs	r2, #0
   d5604:	605a      	str	r2, [r3, #4]

} // spark
   d5606:	4770      	bx	lr
   d5608:	2003e7c0 	.word	0x2003e7c0
   d560c:	000d631c 	.word	0x000d631c

000d5610 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5610:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5612:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5614:	d902      	bls.n	d561c <pinAvailable+0xc>
    return false;
   d5616:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5618:	b002      	add	sp, #8
   d561a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d561c:	f1a0 030b 	sub.w	r3, r0, #11
   d5620:	2b02      	cmp	r3, #2
   d5622:	d81a      	bhi.n	d565a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5624:	4c17      	ldr	r4, [pc, #92]	; (d5684 <pinAvailable+0x74>)
   d5626:	7821      	ldrb	r1, [r4, #0]
   d5628:	f3bf 8f5b 	dmb	ish
   d562c:	f011 0101 	ands.w	r1, r1, #1
   d5630:	d10b      	bne.n	d564a <pinAvailable+0x3a>
   d5632:	4620      	mov	r0, r4
   d5634:	9101      	str	r1, [sp, #4]
   d5636:	f7fe fd34 	bl	d40a2 <__cxa_guard_acquire>
   d563a:	9901      	ldr	r1, [sp, #4]
   d563c:	b128      	cbz	r0, d564a <pinAvailable+0x3a>
   d563e:	4812      	ldr	r0, [pc, #72]	; (d5688 <pinAvailable+0x78>)
   d5640:	f7ff fb78 	bl	d4d34 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5644:	4620      	mov	r0, r4
   d5646:	f7fe fd31 	bl	d40ac <__cxa_guard_release>
   d564a:	4b0f      	ldr	r3, [pc, #60]	; (d5688 <pinAvailable+0x78>)
   d564c:	7818      	ldrb	r0, [r3, #0]
   d564e:	f7ff fa2f 	bl	d4ab0 <hal_spi_is_enabled>
   d5652:	2800      	cmp	r0, #0
   d5654:	d1df      	bne.n	d5616 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5656:	2001      	movs	r0, #1
   d5658:	e7de      	b.n	d5618 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d565a:	2801      	cmp	r0, #1
   d565c:	d809      	bhi.n	d5672 <pinAvailable+0x62>
   d565e:	f000 f857 	bl	d5710 <_Z19__fetch_global_Wirev>
   d5662:	2100      	movs	r1, #0
   d5664:	7c00      	ldrb	r0, [r0, #16]
   d5666:	f7ff fa0b 	bl	d4a80 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d566a:	f080 0001 	eor.w	r0, r0, #1
   d566e:	b2c0      	uxtb	r0, r0
   d5670:	e7d2      	b.n	d5618 <pinAvailable+0x8>
   d5672:	3809      	subs	r0, #9
   d5674:	2801      	cmp	r0, #1
   d5676:	d8ee      	bhi.n	d5656 <pinAvailable+0x46>
   d5678:	f7ff fe74 	bl	d5364 <_Z22__fetch_global_Serial1v>
   d567c:	7c00      	ldrb	r0, [r0, #16]
   d567e:	f7ff f9c7 	bl	d4a10 <hal_usart_is_enabled>
   d5682:	e7f2      	b.n	d566a <pinAvailable+0x5a>
   d5684:	2003e7c8 	.word	0x2003e7c8
   d5688:	2003e7cc 	.word	0x2003e7cc

000d568c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d568c:	2823      	cmp	r0, #35	; 0x23
{
   d568e:	b538      	push	{r3, r4, r5, lr}
   d5690:	4604      	mov	r4, r0
   d5692:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5694:	d80a      	bhi.n	d56ac <pinMode+0x20>
   d5696:	29ff      	cmp	r1, #255	; 0xff
   d5698:	d008      	beq.n	d56ac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d569a:	f7ff ffb9 	bl	d5610 <pinAvailable>
   d569e:	b128      	cbz	r0, d56ac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d56a0:	4629      	mov	r1, r5
   d56a2:	4620      	mov	r0, r4
}
   d56a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d56a8:	f7ff b8f2 	b.w	d4890 <HAL_Pin_Mode>
}
   d56ac:	bd38      	pop	{r3, r4, r5, pc}

000d56ae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d56ae:	b538      	push	{r3, r4, r5, lr}
   d56b0:	4604      	mov	r4, r0
   d56b2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d56b4:	f7ff f8f4 	bl	d48a0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d56b8:	28ff      	cmp	r0, #255	; 0xff
   d56ba:	d010      	beq.n	d56de <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d56bc:	2806      	cmp	r0, #6
   d56be:	d804      	bhi.n	d56ca <digitalWrite+0x1c>
   d56c0:	234d      	movs	r3, #77	; 0x4d
   d56c2:	fa23 f000 	lsr.w	r0, r3, r0
   d56c6:	07c3      	lsls	r3, r0, #31
   d56c8:	d409      	bmi.n	d56de <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d56ca:	4620      	mov	r0, r4
   d56cc:	f7ff ffa0 	bl	d5610 <pinAvailable>
   d56d0:	b128      	cbz	r0, d56de <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d56d2:	4629      	mov	r1, r5
   d56d4:	4620      	mov	r0, r4
}
   d56d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d56da:	f7ff b8e9 	b.w	d48b0 <HAL_GPIO_Write>
}
   d56de:	bd38      	pop	{r3, r4, r5, pc}

000d56e0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d56e0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d56e2:	2300      	movs	r3, #0
   d56e4:	2520      	movs	r5, #32
   d56e6:	8043      	strh	r3, [r0, #2]
   d56e8:	2314      	movs	r3, #20
{
   d56ea:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d56ec:	8003      	strh	r3, [r0, #0]
   d56ee:	6085      	str	r5, [r0, #8]
   d56f0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d56f2:	4906      	ldr	r1, [pc, #24]	; (d570c <_Z17acquireWireBufferv+0x2c>)
   d56f4:	4628      	mov	r0, r5
   d56f6:	f000 f83c 	bl	d5772 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d56fa:	4904      	ldr	r1, [pc, #16]	; (d570c <_Z17acquireWireBufferv+0x2c>)
	};
   d56fc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d56fe:	4628      	mov	r0, r5
   d5700:	f000 f837 	bl	d5772 <_ZnajRKSt9nothrow_t>
	};
   d5704:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5706:	4620      	mov	r0, r4
   d5708:	bd38      	pop	{r3, r4, r5, pc}
   d570a:	bf00      	nop
   d570c:	000d6350 	.word	0x000d6350

000d5710 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5710:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5712:	4d0f      	ldr	r5, [pc, #60]	; (d5750 <_Z19__fetch_global_Wirev+0x40>)
   d5714:	7829      	ldrb	r1, [r5, #0]
   d5716:	f3bf 8f5b 	dmb	ish
   d571a:	f011 0401 	ands.w	r4, r1, #1
{
   d571e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5720:	d113      	bne.n	d574a <_Z19__fetch_global_Wirev+0x3a>
   d5722:	4628      	mov	r0, r5
   d5724:	f7fe fcbd 	bl	d40a2 <__cxa_guard_acquire>
   d5728:	b178      	cbz	r0, d574a <_Z19__fetch_global_Wirev+0x3a>
   d572a:	a801      	add	r0, sp, #4
   d572c:	f7ff ffd8 	bl	d56e0 <_Z17acquireWireBufferv>
   d5730:	aa01      	add	r2, sp, #4
   d5732:	4621      	mov	r1, r4
   d5734:	4807      	ldr	r0, [pc, #28]	; (d5754 <_Z19__fetch_global_Wirev+0x44>)
   d5736:	f7ff fe6b 	bl	d5410 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d573a:	4628      	mov	r0, r5
   d573c:	f7fe fcb6 	bl	d40ac <__cxa_guard_release>
   d5740:	4a05      	ldr	r2, [pc, #20]	; (d5758 <_Z19__fetch_global_Wirev+0x48>)
   d5742:	4906      	ldr	r1, [pc, #24]	; (d575c <_Z19__fetch_global_Wirev+0x4c>)
   d5744:	4803      	ldr	r0, [pc, #12]	; (d5754 <_Z19__fetch_global_Wirev+0x44>)
   d5746:	f000 f80b 	bl	d5760 <__aeabi_atexit>
	return wire;
}
   d574a:	4802      	ldr	r0, [pc, #8]	; (d5754 <_Z19__fetch_global_Wirev+0x44>)
   d574c:	b007      	add	sp, #28
   d574e:	bd30      	pop	{r4, r5, pc}
   d5750:	2003e7d8 	.word	0x2003e7d8
   d5754:	2003e7dc 	.word	0x2003e7dc
   d5758:	2003e5f4 	.word	0x2003e5f4
   d575c:	000d53b9 	.word	0x000d53b9

000d5760 <__aeabi_atexit>:
   d5760:	460b      	mov	r3, r1
   d5762:	4601      	mov	r1, r0
   d5764:	4618      	mov	r0, r3
   d5766:	f000 bbff 	b.w	d5f68 <__cxa_atexit>

000d576a <_ZdlPvj>:
   d576a:	f7fe bc98 	b.w	d409e <_ZdlPv>

000d576e <_ZnwjRKSt9nothrow_t>:
   d576e:	f7fe bc92 	b.w	d4096 <_Znwj>

000d5772 <_ZnajRKSt9nothrow_t>:
   d5772:	f7fe bc92 	b.w	d409a <_Znaj>

000d5776 <_ZSt25__throw_bad_function_callv>:
   d5776:	b508      	push	{r3, lr}
   d5778:	f7ff fa8e 	bl	d4c98 <abort>

000d577c <__aeabi_drsub>:
   d577c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5780:	e002      	b.n	d5788 <__adddf3>
   d5782:	bf00      	nop

000d5784 <__aeabi_dsub>:
   d5784:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5788 <__adddf3>:
   d5788:	b530      	push	{r4, r5, lr}
   d578a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d578e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5792:	ea94 0f05 	teq	r4, r5
   d5796:	bf08      	it	eq
   d5798:	ea90 0f02 	teqeq	r0, r2
   d579c:	bf1f      	itttt	ne
   d579e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d57a2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d57a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d57aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d57ae:	f000 80e2 	beq.w	d5976 <__adddf3+0x1ee>
   d57b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d57b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d57ba:	bfb8      	it	lt
   d57bc:	426d      	neglt	r5, r5
   d57be:	dd0c      	ble.n	d57da <__adddf3+0x52>
   d57c0:	442c      	add	r4, r5
   d57c2:	ea80 0202 	eor.w	r2, r0, r2
   d57c6:	ea81 0303 	eor.w	r3, r1, r3
   d57ca:	ea82 0000 	eor.w	r0, r2, r0
   d57ce:	ea83 0101 	eor.w	r1, r3, r1
   d57d2:	ea80 0202 	eor.w	r2, r0, r2
   d57d6:	ea81 0303 	eor.w	r3, r1, r3
   d57da:	2d36      	cmp	r5, #54	; 0x36
   d57dc:	bf88      	it	hi
   d57de:	bd30      	pophi	{r4, r5, pc}
   d57e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d57e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d57e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d57ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d57f0:	d002      	beq.n	d57f8 <__adddf3+0x70>
   d57f2:	4240      	negs	r0, r0
   d57f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d57f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d57fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5800:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5804:	d002      	beq.n	d580c <__adddf3+0x84>
   d5806:	4252      	negs	r2, r2
   d5808:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d580c:	ea94 0f05 	teq	r4, r5
   d5810:	f000 80a7 	beq.w	d5962 <__adddf3+0x1da>
   d5814:	f1a4 0401 	sub.w	r4, r4, #1
   d5818:	f1d5 0e20 	rsbs	lr, r5, #32
   d581c:	db0d      	blt.n	d583a <__adddf3+0xb2>
   d581e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5822:	fa22 f205 	lsr.w	r2, r2, r5
   d5826:	1880      	adds	r0, r0, r2
   d5828:	f141 0100 	adc.w	r1, r1, #0
   d582c:	fa03 f20e 	lsl.w	r2, r3, lr
   d5830:	1880      	adds	r0, r0, r2
   d5832:	fa43 f305 	asr.w	r3, r3, r5
   d5836:	4159      	adcs	r1, r3
   d5838:	e00e      	b.n	d5858 <__adddf3+0xd0>
   d583a:	f1a5 0520 	sub.w	r5, r5, #32
   d583e:	f10e 0e20 	add.w	lr, lr, #32
   d5842:	2a01      	cmp	r2, #1
   d5844:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5848:	bf28      	it	cs
   d584a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d584e:	fa43 f305 	asr.w	r3, r3, r5
   d5852:	18c0      	adds	r0, r0, r3
   d5854:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5858:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d585c:	d507      	bpl.n	d586e <__adddf3+0xe6>
   d585e:	f04f 0e00 	mov.w	lr, #0
   d5862:	f1dc 0c00 	rsbs	ip, ip, #0
   d5866:	eb7e 0000 	sbcs.w	r0, lr, r0
   d586a:	eb6e 0101 	sbc.w	r1, lr, r1
   d586e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5872:	d31b      	bcc.n	d58ac <__adddf3+0x124>
   d5874:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5878:	d30c      	bcc.n	d5894 <__adddf3+0x10c>
   d587a:	0849      	lsrs	r1, r1, #1
   d587c:	ea5f 0030 	movs.w	r0, r0, rrx
   d5880:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5884:	f104 0401 	add.w	r4, r4, #1
   d5888:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d588c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5890:	f080 809a 	bcs.w	d59c8 <__adddf3+0x240>
   d5894:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5898:	bf08      	it	eq
   d589a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d589e:	f150 0000 	adcs.w	r0, r0, #0
   d58a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d58a6:	ea41 0105 	orr.w	r1, r1, r5
   d58aa:	bd30      	pop	{r4, r5, pc}
   d58ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d58b0:	4140      	adcs	r0, r0
   d58b2:	eb41 0101 	adc.w	r1, r1, r1
   d58b6:	3c01      	subs	r4, #1
   d58b8:	bf28      	it	cs
   d58ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d58be:	d2e9      	bcs.n	d5894 <__adddf3+0x10c>
   d58c0:	f091 0f00 	teq	r1, #0
   d58c4:	bf04      	itt	eq
   d58c6:	4601      	moveq	r1, r0
   d58c8:	2000      	moveq	r0, #0
   d58ca:	fab1 f381 	clz	r3, r1
   d58ce:	bf08      	it	eq
   d58d0:	3320      	addeq	r3, #32
   d58d2:	f1a3 030b 	sub.w	r3, r3, #11
   d58d6:	f1b3 0220 	subs.w	r2, r3, #32
   d58da:	da0c      	bge.n	d58f6 <__adddf3+0x16e>
   d58dc:	320c      	adds	r2, #12
   d58de:	dd08      	ble.n	d58f2 <__adddf3+0x16a>
   d58e0:	f102 0c14 	add.w	ip, r2, #20
   d58e4:	f1c2 020c 	rsb	r2, r2, #12
   d58e8:	fa01 f00c 	lsl.w	r0, r1, ip
   d58ec:	fa21 f102 	lsr.w	r1, r1, r2
   d58f0:	e00c      	b.n	d590c <__adddf3+0x184>
   d58f2:	f102 0214 	add.w	r2, r2, #20
   d58f6:	bfd8      	it	le
   d58f8:	f1c2 0c20 	rsble	ip, r2, #32
   d58fc:	fa01 f102 	lsl.w	r1, r1, r2
   d5900:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5904:	bfdc      	itt	le
   d5906:	ea41 010c 	orrle.w	r1, r1, ip
   d590a:	4090      	lslle	r0, r2
   d590c:	1ae4      	subs	r4, r4, r3
   d590e:	bfa2      	ittt	ge
   d5910:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5914:	4329      	orrge	r1, r5
   d5916:	bd30      	popge	{r4, r5, pc}
   d5918:	ea6f 0404 	mvn.w	r4, r4
   d591c:	3c1f      	subs	r4, #31
   d591e:	da1c      	bge.n	d595a <__adddf3+0x1d2>
   d5920:	340c      	adds	r4, #12
   d5922:	dc0e      	bgt.n	d5942 <__adddf3+0x1ba>
   d5924:	f104 0414 	add.w	r4, r4, #20
   d5928:	f1c4 0220 	rsb	r2, r4, #32
   d592c:	fa20 f004 	lsr.w	r0, r0, r4
   d5930:	fa01 f302 	lsl.w	r3, r1, r2
   d5934:	ea40 0003 	orr.w	r0, r0, r3
   d5938:	fa21 f304 	lsr.w	r3, r1, r4
   d593c:	ea45 0103 	orr.w	r1, r5, r3
   d5940:	bd30      	pop	{r4, r5, pc}
   d5942:	f1c4 040c 	rsb	r4, r4, #12
   d5946:	f1c4 0220 	rsb	r2, r4, #32
   d594a:	fa20 f002 	lsr.w	r0, r0, r2
   d594e:	fa01 f304 	lsl.w	r3, r1, r4
   d5952:	ea40 0003 	orr.w	r0, r0, r3
   d5956:	4629      	mov	r1, r5
   d5958:	bd30      	pop	{r4, r5, pc}
   d595a:	fa21 f004 	lsr.w	r0, r1, r4
   d595e:	4629      	mov	r1, r5
   d5960:	bd30      	pop	{r4, r5, pc}
   d5962:	f094 0f00 	teq	r4, #0
   d5966:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d596a:	bf06      	itte	eq
   d596c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5970:	3401      	addeq	r4, #1
   d5972:	3d01      	subne	r5, #1
   d5974:	e74e      	b.n	d5814 <__adddf3+0x8c>
   d5976:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d597a:	bf18      	it	ne
   d597c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5980:	d029      	beq.n	d59d6 <__adddf3+0x24e>
   d5982:	ea94 0f05 	teq	r4, r5
   d5986:	bf08      	it	eq
   d5988:	ea90 0f02 	teqeq	r0, r2
   d598c:	d005      	beq.n	d599a <__adddf3+0x212>
   d598e:	ea54 0c00 	orrs.w	ip, r4, r0
   d5992:	bf04      	itt	eq
   d5994:	4619      	moveq	r1, r3
   d5996:	4610      	moveq	r0, r2
   d5998:	bd30      	pop	{r4, r5, pc}
   d599a:	ea91 0f03 	teq	r1, r3
   d599e:	bf1e      	ittt	ne
   d59a0:	2100      	movne	r1, #0
   d59a2:	2000      	movne	r0, #0
   d59a4:	bd30      	popne	{r4, r5, pc}
   d59a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d59aa:	d105      	bne.n	d59b8 <__adddf3+0x230>
   d59ac:	0040      	lsls	r0, r0, #1
   d59ae:	4149      	adcs	r1, r1
   d59b0:	bf28      	it	cs
   d59b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d59b6:	bd30      	pop	{r4, r5, pc}
   d59b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d59bc:	bf3c      	itt	cc
   d59be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d59c2:	bd30      	popcc	{r4, r5, pc}
   d59c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d59c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d59cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d59d0:	f04f 0000 	mov.w	r0, #0
   d59d4:	bd30      	pop	{r4, r5, pc}
   d59d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d59da:	bf1a      	itte	ne
   d59dc:	4619      	movne	r1, r3
   d59de:	4610      	movne	r0, r2
   d59e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d59e4:	bf1c      	itt	ne
   d59e6:	460b      	movne	r3, r1
   d59e8:	4602      	movne	r2, r0
   d59ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d59ee:	bf06      	itte	eq
   d59f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d59f4:	ea91 0f03 	teqeq	r1, r3
   d59f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d59fc:	bd30      	pop	{r4, r5, pc}
   d59fe:	bf00      	nop

000d5a00 <__aeabi_ui2d>:
   d5a00:	f090 0f00 	teq	r0, #0
   d5a04:	bf04      	itt	eq
   d5a06:	2100      	moveq	r1, #0
   d5a08:	4770      	bxeq	lr
   d5a0a:	b530      	push	{r4, r5, lr}
   d5a0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a10:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a14:	f04f 0500 	mov.w	r5, #0
   d5a18:	f04f 0100 	mov.w	r1, #0
   d5a1c:	e750      	b.n	d58c0 <__adddf3+0x138>
   d5a1e:	bf00      	nop

000d5a20 <__aeabi_i2d>:
   d5a20:	f090 0f00 	teq	r0, #0
   d5a24:	bf04      	itt	eq
   d5a26:	2100      	moveq	r1, #0
   d5a28:	4770      	bxeq	lr
   d5a2a:	b530      	push	{r4, r5, lr}
   d5a2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a30:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a34:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5a38:	bf48      	it	mi
   d5a3a:	4240      	negmi	r0, r0
   d5a3c:	f04f 0100 	mov.w	r1, #0
   d5a40:	e73e      	b.n	d58c0 <__adddf3+0x138>
   d5a42:	bf00      	nop

000d5a44 <__aeabi_f2d>:
   d5a44:	0042      	lsls	r2, r0, #1
   d5a46:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5a4a:	ea4f 0131 	mov.w	r1, r1, rrx
   d5a4e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5a52:	bf1f      	itttt	ne
   d5a54:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5a58:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5a5c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5a60:	4770      	bxne	lr
   d5a62:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5a66:	bf08      	it	eq
   d5a68:	4770      	bxeq	lr
   d5a6a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5a6e:	bf04      	itt	eq
   d5a70:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5a74:	4770      	bxeq	lr
   d5a76:	b530      	push	{r4, r5, lr}
   d5a78:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5a7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5a84:	e71c      	b.n	d58c0 <__adddf3+0x138>
   d5a86:	bf00      	nop

000d5a88 <__aeabi_ul2d>:
   d5a88:	ea50 0201 	orrs.w	r2, r0, r1
   d5a8c:	bf08      	it	eq
   d5a8e:	4770      	bxeq	lr
   d5a90:	b530      	push	{r4, r5, lr}
   d5a92:	f04f 0500 	mov.w	r5, #0
   d5a96:	e00a      	b.n	d5aae <__aeabi_l2d+0x16>

000d5a98 <__aeabi_l2d>:
   d5a98:	ea50 0201 	orrs.w	r2, r0, r1
   d5a9c:	bf08      	it	eq
   d5a9e:	4770      	bxeq	lr
   d5aa0:	b530      	push	{r4, r5, lr}
   d5aa2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5aa6:	d502      	bpl.n	d5aae <__aeabi_l2d+0x16>
   d5aa8:	4240      	negs	r0, r0
   d5aaa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5aae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ab2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ab6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5aba:	f43f aed8 	beq.w	d586e <__adddf3+0xe6>
   d5abe:	f04f 0203 	mov.w	r2, #3
   d5ac2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ac6:	bf18      	it	ne
   d5ac8:	3203      	addne	r2, #3
   d5aca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ace:	bf18      	it	ne
   d5ad0:	3203      	addne	r2, #3
   d5ad2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5ad6:	f1c2 0320 	rsb	r3, r2, #32
   d5ada:	fa00 fc03 	lsl.w	ip, r0, r3
   d5ade:	fa20 f002 	lsr.w	r0, r0, r2
   d5ae2:	fa01 fe03 	lsl.w	lr, r1, r3
   d5ae6:	ea40 000e 	orr.w	r0, r0, lr
   d5aea:	fa21 f102 	lsr.w	r1, r1, r2
   d5aee:	4414      	add	r4, r2
   d5af0:	e6bd      	b.n	d586e <__adddf3+0xe6>
   d5af2:	bf00      	nop

000d5af4 <__aeabi_dmul>:
   d5af4:	b570      	push	{r4, r5, r6, lr}
   d5af6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5afa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5afe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5b02:	bf1d      	ittte	ne
   d5b04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5b08:	ea94 0f0c 	teqne	r4, ip
   d5b0c:	ea95 0f0c 	teqne	r5, ip
   d5b10:	f000 f8de 	bleq	d5cd0 <__aeabi_dmul+0x1dc>
   d5b14:	442c      	add	r4, r5
   d5b16:	ea81 0603 	eor.w	r6, r1, r3
   d5b1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5b1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5b22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5b26:	bf18      	it	ne
   d5b28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5b2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5b30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5b34:	d038      	beq.n	d5ba8 <__aeabi_dmul+0xb4>
   d5b36:	fba0 ce02 	umull	ip, lr, r0, r2
   d5b3a:	f04f 0500 	mov.w	r5, #0
   d5b3e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5b42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5b46:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5b4a:	f04f 0600 	mov.w	r6, #0
   d5b4e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5b52:	f09c 0f00 	teq	ip, #0
   d5b56:	bf18      	it	ne
   d5b58:	f04e 0e01 	orrne.w	lr, lr, #1
   d5b5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5b60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5b64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5b68:	d204      	bcs.n	d5b74 <__aeabi_dmul+0x80>
   d5b6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5b6e:	416d      	adcs	r5, r5
   d5b70:	eb46 0606 	adc.w	r6, r6, r6
   d5b74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5b78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5b7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5b80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5b84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5b88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5b8c:	bf88      	it	hi
   d5b8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5b92:	d81e      	bhi.n	d5bd2 <__aeabi_dmul+0xde>
   d5b94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5b98:	bf08      	it	eq
   d5b9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5b9e:	f150 0000 	adcs.w	r0, r0, #0
   d5ba2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5ba6:	bd70      	pop	{r4, r5, r6, pc}
   d5ba8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5bac:	ea46 0101 	orr.w	r1, r6, r1
   d5bb0:	ea40 0002 	orr.w	r0, r0, r2
   d5bb4:	ea81 0103 	eor.w	r1, r1, r3
   d5bb8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5bbc:	bfc2      	ittt	gt
   d5bbe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5bc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5bc6:	bd70      	popgt	{r4, r5, r6, pc}
   d5bc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5bcc:	f04f 0e00 	mov.w	lr, #0
   d5bd0:	3c01      	subs	r4, #1
   d5bd2:	f300 80ab 	bgt.w	d5d2c <__aeabi_dmul+0x238>
   d5bd6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5bda:	bfde      	ittt	le
   d5bdc:	2000      	movle	r0, #0
   d5bde:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5be2:	bd70      	pople	{r4, r5, r6, pc}
   d5be4:	f1c4 0400 	rsb	r4, r4, #0
   d5be8:	3c20      	subs	r4, #32
   d5bea:	da35      	bge.n	d5c58 <__aeabi_dmul+0x164>
   d5bec:	340c      	adds	r4, #12
   d5bee:	dc1b      	bgt.n	d5c28 <__aeabi_dmul+0x134>
   d5bf0:	f104 0414 	add.w	r4, r4, #20
   d5bf4:	f1c4 0520 	rsb	r5, r4, #32
   d5bf8:	fa00 f305 	lsl.w	r3, r0, r5
   d5bfc:	fa20 f004 	lsr.w	r0, r0, r4
   d5c00:	fa01 f205 	lsl.w	r2, r1, r5
   d5c04:	ea40 0002 	orr.w	r0, r0, r2
   d5c08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5c0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5c10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5c14:	fa21 f604 	lsr.w	r6, r1, r4
   d5c18:	eb42 0106 	adc.w	r1, r2, r6
   d5c1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c20:	bf08      	it	eq
   d5c22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5c26:	bd70      	pop	{r4, r5, r6, pc}
   d5c28:	f1c4 040c 	rsb	r4, r4, #12
   d5c2c:	f1c4 0520 	rsb	r5, r4, #32
   d5c30:	fa00 f304 	lsl.w	r3, r0, r4
   d5c34:	fa20 f005 	lsr.w	r0, r0, r5
   d5c38:	fa01 f204 	lsl.w	r2, r1, r4
   d5c3c:	ea40 0002 	orr.w	r0, r0, r2
   d5c40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5c48:	f141 0100 	adc.w	r1, r1, #0
   d5c4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c50:	bf08      	it	eq
   d5c52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5c56:	bd70      	pop	{r4, r5, r6, pc}
   d5c58:	f1c4 0520 	rsb	r5, r4, #32
   d5c5c:	fa00 f205 	lsl.w	r2, r0, r5
   d5c60:	ea4e 0e02 	orr.w	lr, lr, r2
   d5c64:	fa20 f304 	lsr.w	r3, r0, r4
   d5c68:	fa01 f205 	lsl.w	r2, r1, r5
   d5c6c:	ea43 0302 	orr.w	r3, r3, r2
   d5c70:	fa21 f004 	lsr.w	r0, r1, r4
   d5c74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c78:	fa21 f204 	lsr.w	r2, r1, r4
   d5c7c:	ea20 0002 	bic.w	r0, r0, r2
   d5c80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5c84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c88:	bf08      	it	eq
   d5c8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5c8e:	bd70      	pop	{r4, r5, r6, pc}
   d5c90:	f094 0f00 	teq	r4, #0
   d5c94:	d10f      	bne.n	d5cb6 <__aeabi_dmul+0x1c2>
   d5c96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5c9a:	0040      	lsls	r0, r0, #1
   d5c9c:	eb41 0101 	adc.w	r1, r1, r1
   d5ca0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5ca4:	bf08      	it	eq
   d5ca6:	3c01      	subeq	r4, #1
   d5ca8:	d0f7      	beq.n	d5c9a <__aeabi_dmul+0x1a6>
   d5caa:	ea41 0106 	orr.w	r1, r1, r6
   d5cae:	f095 0f00 	teq	r5, #0
   d5cb2:	bf18      	it	ne
   d5cb4:	4770      	bxne	lr
   d5cb6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5cba:	0052      	lsls	r2, r2, #1
   d5cbc:	eb43 0303 	adc.w	r3, r3, r3
   d5cc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5cc4:	bf08      	it	eq
   d5cc6:	3d01      	subeq	r5, #1
   d5cc8:	d0f7      	beq.n	d5cba <__aeabi_dmul+0x1c6>
   d5cca:	ea43 0306 	orr.w	r3, r3, r6
   d5cce:	4770      	bx	lr
   d5cd0:	ea94 0f0c 	teq	r4, ip
   d5cd4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5cd8:	bf18      	it	ne
   d5cda:	ea95 0f0c 	teqne	r5, ip
   d5cde:	d00c      	beq.n	d5cfa <__aeabi_dmul+0x206>
   d5ce0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5ce4:	bf18      	it	ne
   d5ce6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5cea:	d1d1      	bne.n	d5c90 <__aeabi_dmul+0x19c>
   d5cec:	ea81 0103 	eor.w	r1, r1, r3
   d5cf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5cf4:	f04f 0000 	mov.w	r0, #0
   d5cf8:	bd70      	pop	{r4, r5, r6, pc}
   d5cfa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5cfe:	bf06      	itte	eq
   d5d00:	4610      	moveq	r0, r2
   d5d02:	4619      	moveq	r1, r3
   d5d04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5d08:	d019      	beq.n	d5d3e <__aeabi_dmul+0x24a>
   d5d0a:	ea94 0f0c 	teq	r4, ip
   d5d0e:	d102      	bne.n	d5d16 <__aeabi_dmul+0x222>
   d5d10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5d14:	d113      	bne.n	d5d3e <__aeabi_dmul+0x24a>
   d5d16:	ea95 0f0c 	teq	r5, ip
   d5d1a:	d105      	bne.n	d5d28 <__aeabi_dmul+0x234>
   d5d1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5d20:	bf1c      	itt	ne
   d5d22:	4610      	movne	r0, r2
   d5d24:	4619      	movne	r1, r3
   d5d26:	d10a      	bne.n	d5d3e <__aeabi_dmul+0x24a>
   d5d28:	ea81 0103 	eor.w	r1, r1, r3
   d5d2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5d34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5d38:	f04f 0000 	mov.w	r0, #0
   d5d3c:	bd70      	pop	{r4, r5, r6, pc}
   d5d3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5d42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5d46:	bd70      	pop	{r4, r5, r6, pc}

000d5d48 <__aeabi_ddiv>:
   d5d48:	b570      	push	{r4, r5, r6, lr}
   d5d4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5d4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5d52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5d56:	bf1d      	ittte	ne
   d5d58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5d5c:	ea94 0f0c 	teqne	r4, ip
   d5d60:	ea95 0f0c 	teqne	r5, ip
   d5d64:	f000 f8a7 	bleq	d5eb6 <__aeabi_ddiv+0x16e>
   d5d68:	eba4 0405 	sub.w	r4, r4, r5
   d5d6c:	ea81 0e03 	eor.w	lr, r1, r3
   d5d70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5d74:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5d78:	f000 8088 	beq.w	d5e8c <__aeabi_ddiv+0x144>
   d5d7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5d80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5d84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5d88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5d8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5d90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5d94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5d98:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5d9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5da0:	429d      	cmp	r5, r3
   d5da2:	bf08      	it	eq
   d5da4:	4296      	cmpeq	r6, r2
   d5da6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5daa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5dae:	d202      	bcs.n	d5db6 <__aeabi_ddiv+0x6e>
   d5db0:	085b      	lsrs	r3, r3, #1
   d5db2:	ea4f 0232 	mov.w	r2, r2, rrx
   d5db6:	1ab6      	subs	r6, r6, r2
   d5db8:	eb65 0503 	sbc.w	r5, r5, r3
   d5dbc:	085b      	lsrs	r3, r3, #1
   d5dbe:	ea4f 0232 	mov.w	r2, r2, rrx
   d5dc2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5dc6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5dca:	ebb6 0e02 	subs.w	lr, r6, r2
   d5dce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5dd2:	bf22      	ittt	cs
   d5dd4:	1ab6      	subcs	r6, r6, r2
   d5dd6:	4675      	movcs	r5, lr
   d5dd8:	ea40 000c 	orrcs.w	r0, r0, ip
   d5ddc:	085b      	lsrs	r3, r3, #1
   d5dde:	ea4f 0232 	mov.w	r2, r2, rrx
   d5de2:	ebb6 0e02 	subs.w	lr, r6, r2
   d5de6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5dea:	bf22      	ittt	cs
   d5dec:	1ab6      	subcs	r6, r6, r2
   d5dee:	4675      	movcs	r5, lr
   d5df0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5df4:	085b      	lsrs	r3, r3, #1
   d5df6:	ea4f 0232 	mov.w	r2, r2, rrx
   d5dfa:	ebb6 0e02 	subs.w	lr, r6, r2
   d5dfe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e02:	bf22      	ittt	cs
   d5e04:	1ab6      	subcs	r6, r6, r2
   d5e06:	4675      	movcs	r5, lr
   d5e08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5e0c:	085b      	lsrs	r3, r3, #1
   d5e0e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e12:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e16:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e1a:	bf22      	ittt	cs
   d5e1c:	1ab6      	subcs	r6, r6, r2
   d5e1e:	4675      	movcs	r5, lr
   d5e20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5e24:	ea55 0e06 	orrs.w	lr, r5, r6
   d5e28:	d018      	beq.n	d5e5c <__aeabi_ddiv+0x114>
   d5e2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5e2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5e32:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5e36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5e3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5e3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5e42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5e46:	d1c0      	bne.n	d5dca <__aeabi_ddiv+0x82>
   d5e48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5e4c:	d10b      	bne.n	d5e66 <__aeabi_ddiv+0x11e>
   d5e4e:	ea41 0100 	orr.w	r1, r1, r0
   d5e52:	f04f 0000 	mov.w	r0, #0
   d5e56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5e5a:	e7b6      	b.n	d5dca <__aeabi_ddiv+0x82>
   d5e5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5e60:	bf04      	itt	eq
   d5e62:	4301      	orreq	r1, r0
   d5e64:	2000      	moveq	r0, #0
   d5e66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5e6a:	bf88      	it	hi
   d5e6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5e70:	f63f aeaf 	bhi.w	d5bd2 <__aeabi_dmul+0xde>
   d5e74:	ebb5 0c03 	subs.w	ip, r5, r3
   d5e78:	bf04      	itt	eq
   d5e7a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5e7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5e82:	f150 0000 	adcs.w	r0, r0, #0
   d5e86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5e8a:	bd70      	pop	{r4, r5, r6, pc}
   d5e8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5e90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5e94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5e98:	bfc2      	ittt	gt
   d5e9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5e9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5ea2:	bd70      	popgt	{r4, r5, r6, pc}
   d5ea4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5ea8:	f04f 0e00 	mov.w	lr, #0
   d5eac:	3c01      	subs	r4, #1
   d5eae:	e690      	b.n	d5bd2 <__aeabi_dmul+0xde>
   d5eb0:	ea45 0e06 	orr.w	lr, r5, r6
   d5eb4:	e68d      	b.n	d5bd2 <__aeabi_dmul+0xde>
   d5eb6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5eba:	ea94 0f0c 	teq	r4, ip
   d5ebe:	bf08      	it	eq
   d5ec0:	ea95 0f0c 	teqeq	r5, ip
   d5ec4:	f43f af3b 	beq.w	d5d3e <__aeabi_dmul+0x24a>
   d5ec8:	ea94 0f0c 	teq	r4, ip
   d5ecc:	d10a      	bne.n	d5ee4 <__aeabi_ddiv+0x19c>
   d5ece:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5ed2:	f47f af34 	bne.w	d5d3e <__aeabi_dmul+0x24a>
   d5ed6:	ea95 0f0c 	teq	r5, ip
   d5eda:	f47f af25 	bne.w	d5d28 <__aeabi_dmul+0x234>
   d5ede:	4610      	mov	r0, r2
   d5ee0:	4619      	mov	r1, r3
   d5ee2:	e72c      	b.n	d5d3e <__aeabi_dmul+0x24a>
   d5ee4:	ea95 0f0c 	teq	r5, ip
   d5ee8:	d106      	bne.n	d5ef8 <__aeabi_ddiv+0x1b0>
   d5eea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5eee:	f43f aefd 	beq.w	d5cec <__aeabi_dmul+0x1f8>
   d5ef2:	4610      	mov	r0, r2
   d5ef4:	4619      	mov	r1, r3
   d5ef6:	e722      	b.n	d5d3e <__aeabi_dmul+0x24a>
   d5ef8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5efc:	bf18      	it	ne
   d5efe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5f02:	f47f aec5 	bne.w	d5c90 <__aeabi_dmul+0x19c>
   d5f06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5f0a:	f47f af0d 	bne.w	d5d28 <__aeabi_dmul+0x234>
   d5f0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5f12:	f47f aeeb 	bne.w	d5cec <__aeabi_dmul+0x1f8>
   d5f16:	e712      	b.n	d5d3e <__aeabi_dmul+0x24a>

000d5f18 <__aeabi_d2iz>:
   d5f18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5f1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5f20:	d215      	bcs.n	d5f4e <__aeabi_d2iz+0x36>
   d5f22:	d511      	bpl.n	d5f48 <__aeabi_d2iz+0x30>
   d5f24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5f28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5f2c:	d912      	bls.n	d5f54 <__aeabi_d2iz+0x3c>
   d5f2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5f32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5f36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5f3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5f3e:	fa23 f002 	lsr.w	r0, r3, r2
   d5f42:	bf18      	it	ne
   d5f44:	4240      	negne	r0, r0
   d5f46:	4770      	bx	lr
   d5f48:	f04f 0000 	mov.w	r0, #0
   d5f4c:	4770      	bx	lr
   d5f4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5f52:	d105      	bne.n	d5f60 <__aeabi_d2iz+0x48>
   d5f54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d5f58:	bf08      	it	eq
   d5f5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5f5e:	4770      	bx	lr
   d5f60:	f04f 0000 	mov.w	r0, #0
   d5f64:	4770      	bx	lr
   d5f66:	bf00      	nop

000d5f68 <__cxa_atexit>:
   d5f68:	b510      	push	{r4, lr}
   d5f6a:	4c05      	ldr	r4, [pc, #20]	; (d5f80 <__cxa_atexit+0x18>)
   d5f6c:	4613      	mov	r3, r2
   d5f6e:	b12c      	cbz	r4, d5f7c <__cxa_atexit+0x14>
   d5f70:	460a      	mov	r2, r1
   d5f72:	4601      	mov	r1, r0
   d5f74:	2002      	movs	r0, #2
   d5f76:	f3af 8000 	nop.w
   d5f7a:	bd10      	pop	{r4, pc}
   d5f7c:	4620      	mov	r0, r4
   d5f7e:	e7fc      	b.n	d5f7a <__cxa_atexit+0x12>
   d5f80:	00000000 	.word	0x00000000

000d5f84 <memcpy>:
   d5f84:	440a      	add	r2, r1
   d5f86:	4291      	cmp	r1, r2
   d5f88:	f100 33ff 	add.w	r3, r0, #4294967295
   d5f8c:	d100      	bne.n	d5f90 <memcpy+0xc>
   d5f8e:	4770      	bx	lr
   d5f90:	b510      	push	{r4, lr}
   d5f92:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5f96:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5f9a:	4291      	cmp	r1, r2
   d5f9c:	d1f9      	bne.n	d5f92 <memcpy+0xe>
   d5f9e:	bd10      	pop	{r4, pc}

000d5fa0 <memset>:
   d5fa0:	4402      	add	r2, r0
   d5fa2:	4603      	mov	r3, r0
   d5fa4:	4293      	cmp	r3, r2
   d5fa6:	d100      	bne.n	d5faa <memset+0xa>
   d5fa8:	4770      	bx	lr
   d5faa:	f803 1b01 	strb.w	r1, [r3], #1
   d5fae:	e7f9      	b.n	d5fa4 <memset+0x4>

000d5fb0 <srand>:
   d5fb0:	b538      	push	{r3, r4, r5, lr}
   d5fb2:	4b0d      	ldr	r3, [pc, #52]	; (d5fe8 <srand+0x38>)
   d5fb4:	681d      	ldr	r5, [r3, #0]
   d5fb6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5fb8:	4604      	mov	r4, r0
   d5fba:	b97b      	cbnz	r3, d5fdc <srand+0x2c>
   d5fbc:	2018      	movs	r0, #24
   d5fbe:	f7fe fe53 	bl	d4c68 <malloc>
   d5fc2:	4a0a      	ldr	r2, [pc, #40]	; (d5fec <srand+0x3c>)
   d5fc4:	4b0a      	ldr	r3, [pc, #40]	; (d5ff0 <srand+0x40>)
   d5fc6:	63a8      	str	r0, [r5, #56]	; 0x38
   d5fc8:	e9c0 2300 	strd	r2, r3, [r0]
   d5fcc:	4b09      	ldr	r3, [pc, #36]	; (d5ff4 <srand+0x44>)
   d5fce:	6083      	str	r3, [r0, #8]
   d5fd0:	230b      	movs	r3, #11
   d5fd2:	8183      	strh	r3, [r0, #12]
   d5fd4:	2201      	movs	r2, #1
   d5fd6:	2300      	movs	r3, #0
   d5fd8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5fdc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5fde:	2200      	movs	r2, #0
   d5fe0:	611c      	str	r4, [r3, #16]
   d5fe2:	615a      	str	r2, [r3, #20]
   d5fe4:	bd38      	pop	{r3, r4, r5, pc}
   d5fe6:	bf00      	nop
   d5fe8:	2003e590 	.word	0x2003e590
   d5fec:	abcd330e 	.word	0xabcd330e
   d5ff0:	e66d1234 	.word	0xe66d1234
   d5ff4:	0005deec 	.word	0x0005deec

000d5ff8 <strlen>:
   d5ff8:	4603      	mov	r3, r0
   d5ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5ffe:	2a00      	cmp	r2, #0
   d6000:	d1fb      	bne.n	d5ffa <strlen+0x2>
   d6002:	1a18      	subs	r0, r3, r0
   d6004:	3801      	subs	r0, #1
   d6006:	4770      	bx	lr

000d6008 <dynalib_user>:
   d6008:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d6018:	0000 0000 5553 4343 5345 203a 6552 6563     ....SUCCES: Rece
   d6028:	7669 6465 6620 726f 2520 3a73 0920 4520     ived for %s: . E
   d6038:	7078 6365 6574 2064 6425 202c 6552 6563     xpected %d, Rece
   d6048:	7669 6465 2520 2e64 4500 5252 524f 203a     ived %d..ERROR: 
   d6058:	6552 6563 7669 6465 6620 726f 2520 3a73     Received for %s:
   d6068:	0920 4520 7078 6365 6574 2064 6425 202c      . Expected %d, 
   d6078:	6552 6563 7669 6465 2520 2e64 5200 6365     Received %d..Rec
   d6088:	6965 6576 2064 7962 6574 2520 0064 7250     eived byte %d.Pr
   d6098:	6165 626d 6c75 0065 7453 7261 0074 6e45     eambule.Start.En
   d60a8:	6574 6574 2820 7974 6570 6c46 6761 2973     tete (typeFlags)
   d60b8:	4500 746e 7465 2065 6c28 6e65 7467 2968     .Entete (length)
   d60c8:	4d00 7365 6173 6567 5200 6365 6965 6576     .Message.Receive
   d60d8:	2064 6962 2074 756e 626d 7265 2520 0064     d bit number %d.
   d60e8:	6553 6972 6c61 6320 6e6f 656e 7463 6465     Serial connected
   d60f8:	203a 7473 7261 6974 676e 6f00 7475 7570     : starting.outpu
   d6108:	5474 7268 6165 0064 4552 4441 203a 0030     tThread.READ: 0.
   d6118:	4552 4441 203a 0031 5245 4f52 3a52 6920     READ: 1.ERROR: i
   d6128:	696e 6974 6c61 7320 6174 6574 6720 746f     nitial state got
   d6138:	6c20 6e6f 5067 7265 6f69 0064 5245 4f52      longPeriod.ERRO
   d6148:	3a52 6520 7078 6365 6574 2064 6873 726f     R: expected shor
   d6158:	5074 7265 6f69 2064 6e69 7720 6961 2074     tPeriod in wait 
   d6168:	7473 7461 2065 6f67 2074 2523 0064 4e55     state got #%d.UN
   d6178:	4544 4946 454e 2044 6562 6168 6976 756f     DEFINED behaviou
   d6188:	2072 6f66 2072 6576 7972 6f4c 676e 6550     r for veryLongPe
   d6198:	6972 646f 6920 206e 6e69 7570 5374 6174     riod in inputSta
   d61a8:	6574 2720 756f 7074 7475 2731 5300 6174     te 'output1'.Sta
   d61b8:	7472 6e69 2067 756f 7074 7475 6c20 6f6f     rting output loo
   d61c8:	0070 2d2d 2d2d 2d2d 2d2d 002d 0001 0000     p.---------.....
   d61d8:	000a 0000 0064 0000                         ....d...

000d61e0 <_ZTVN5spark13EthernetClassE>:
	...
   d61e8:	4d17 000d 4d0d 000d 4d03 000d 4cf9 000d     .M...M...M...L..
   d61f8:	4ced 000d 4ce1 000d 54f1 000d 54f9 000d     .L...L...T...T..
   d6208:	4cd5 000d 4ccd 000d 4cc3 000d 4cb9 000d     .L...L...L...L..
   d6218:	5529 000d 7061 0070 5925 252d 2d6d 6425     )U..app.%Y-%m-%d
   d6228:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d6238:	6d69 0065                                   ime.

000d623c <_ZTV9IPAddress>:
	...
   d6244:	507d 000d 506d 000d 506f 000d               }P..mP..oP..

000d6250 <_ZTV9USBSerial>:
	...
   d6258:	5153 000d 51bb 000d 5191 000d 4ddd 000d     SQ...Q...Q...M..
   d6268:	5183 000d 5155 000d 5165 000d 51b5 000d     .Q..UQ..eQ...Q..
   d6278:	5175 000d 514f 000d                         uQ..OQ..

000d6280 <_ZTV11USARTSerial>:
	...
   d6288:	52bd 000d 5329 000d 5301 000d 4ddd 000d     .R..)S...S...M..
   d6298:	52d1 000d 52ed 000d 52df 000d 52fb 000d     .R...R...R...R..
   d62a8:	52bf 000d 52c3 000d                         .R...R..

000d62b0 <_ZTV7TwoWire>:
	...
   d62b8:	53b9 000d 5403 000d 53db 000d 53bb 000d     .S...T...S...S..
   d62c8:	53e3 000d 53eb 000d 53f3 000d 53fb 000d     .S...S...S...S..

000d62d8 <_ZTVN5spark9WiFiClassE>:
	...
   d62e0:	5493 000d 5489 000d 547f 000d 5435 000d     .T...T...T..5T..
   d62f0:	5473 000d 5467 000d 54f1 000d 54f9 000d     sT..gT...T...T..
   d6300:	545b 000d 5453 000d 5449 000d 543f 000d     [T..ST..IT..?T..
   d6310:	5529 000d                                   )U..

000d6314 <_ZTVN5spark12NetworkClassE>:
	...
   d631c:	54b1 000d 54bb 000d 54c5 000d 54cf 000d     .T...T...T...T..
   d632c:	54d9 000d 54e5 000d 54f1 000d 54f9 000d     .T...T...T...T..
   d633c:	5501 000d 550d 000d 5515 000d 551f 000d     .U...U...U...U..
   d634c:	5529 000d                                   )U..

000d6350 <_ZSt7nothrow>:
	...

000d6351 <link_const_variable_data_end>:
   d6351:	00          	.byte	0x00
	...

000d6354 <link_constructors_location>:
   d6354:	000d4859 	.word	0x000d4859
   d6358:	000d4d21 	.word	0x000d4d21
   d635c:	000d4d69 	.word	0x000d4d69
   d6360:	000d4db5 	.word	0x000d4db5
   d6364:	000d4efd 	.word	0x000d4efd
   d6368:	000d4f0d 	.word	0x000d4f0d
   d636c:	000d4f2d 	.word	0x000d4f2d
   d6370:	000d549d 	.word	0x000d549d
   d6374:	000d55fd 	.word	0x000d55fd

000d6378 <link_constructors_end>:
	...
