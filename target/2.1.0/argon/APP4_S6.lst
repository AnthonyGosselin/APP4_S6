
c:/_Projects/APP4_S6/target/2.1.0/argon/APP4_S6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000020c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d60e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  2003e56c  000d60e4  0001e56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000208  2003e5e8  2003e5e8  0002e5e8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6160  000d6160  00026160  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6188  000d6188  00026188  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00100953  00000000  00000000  0002618c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011f24  00000000  00000000  00126adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00022c86  00000000  00000000  00138a03  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002198  00000000  00000000  0015b689  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000064c0  00000000  00000000  0015d821  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003344d  00000000  00000000  00163ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002cae1  00000000  00000000  0019712e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00103434  00000000  00000000  001c3c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005a58  00000000  00000000  002c7044  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f001 fe75 	bl	d5d20 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f001 fe7d 	bl	d5d3c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e56c 	.word	0x2003e56c
   d404c:	000d60e4 	.word	0x000d60e4
   d4050:	2003e5e8 	.word	0x2003e5e8
   d4054:	2003e5e8 	.word	0x2003e5e8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f000 fe9f 	bl	d4da4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d60b0 	.word	0x000d60b0
   d4080:	000d60d4 	.word	0x000d60d4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b900 	b.w	d4288 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f97b 	bl	d4384 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f000 be49 	b.w	d4d28 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f000 bcb5 	b.w	d4a04 <malloc>

000d409a <_Znaj>:
   d409a:	f000 bcb3 	b.w	d4a04 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f000 bcb9 	b.w	d4a14 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	4718      	bx	r3

000d40b6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40b6:	2a01      	cmp	r2, #1
   d40b8:	d003      	beq.n	d40c2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40ba:	2a02      	cmp	r2, #2
   d40bc:	d003      	beq.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40be:	2000      	movs	r0, #0
   d40c0:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c2:	6001      	str	r1, [r0, #0]
	      break;
   d40c4:	e7fb      	b.n	d40be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c6:	680b      	ldr	r3, [r1, #0]
   d40c8:	6003      	str	r3, [r0, #0]
	}
   d40ca:	e7f8      	b.n	d40be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d40cc <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d40cc:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d40ce:	2301      	movs	r3, #1
   d40d0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d40d2:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d40d4:	4604      	mov	r4, r0
        if (th->func) {
   d40d6:	b143      	cbz	r3, d40ea <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d40d8:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40da:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d40dc:	2301      	movs	r3, #1
   d40de:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d40e0:	2000      	movs	r0, #0
    }
   d40e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d40e6:	f000 bb21 	b.w	d472c <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d40ea:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d40ec:	2800      	cmp	r0, #0
   d40ee:	d0f5      	beq.n	d40dc <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d40f0:	6883      	ldr	r3, [r0, #8]
   d40f2:	b90b      	cbnz	r3, d40f8 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d40f4:	f001 fa0d 	bl	d5512 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40f8:	68c3      	ldr	r3, [r0, #12]
   d40fa:	e7ee      	b.n	d40da <_ZN6Thread3runEPv+0xe>

000d40fc <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40fc:	b40e      	push	{r1, r2, r3}
   d40fe:	b503      	push	{r0, r1, lr}
   d4100:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d4102:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4104:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4108:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d410a:	f000 fd94 	bl	d4c36 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d410e:	b002      	add	sp, #8
   d4110:	f85d eb04 	ldr.w	lr, [sp], #4
   d4114:	b003      	add	sp, #12
   d4116:	4770      	bx	lr

000d4118 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4118:	b510      	push	{r4, lr}
      if (_M_manager)
   d411a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d411c:	4604      	mov	r4, r0
      if (_M_manager)
   d411e:	b113      	cbz	r3, d4126 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4120:	2203      	movs	r2, #3
   d4122:	4601      	mov	r1, r0
   d4124:	4798      	blx	r3
    }
   d4126:	4620      	mov	r0, r4
   d4128:	bd10      	pop	{r4, pc}

000d412a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d412a:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d412c:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   d412e:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   d4130:	b135      	cbz	r5, d4140 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   d4132:	4628      	mov	r0, r5
   d4134:	f7ff fff0 	bl	d4118 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d4138:	2110      	movs	r1, #16
   d413a:	4628      	mov	r0, r5
   d413c:	f001 f9e3 	bl	d5506 <_ZdlPvj>
   d4140:	4620      	mov	r0, r4
   d4142:	2114      	movs	r1, #20
      }
   d4144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d4148:	f001 b9dd 	b.w	d5506 <_ZdlPvj>

000d414c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   d414c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4150:	4607      	mov	r7, r0
   d4152:	b085      	sub	sp, #20
   d4154:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   d4156:	2014      	movs	r0, #20
   d4158:	4929      	ldr	r1, [pc, #164]	; (d4200 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
    Thread(const char *name, wiring_thread_fn_t function,
   d415a:	4616      	mov	r6, r2
   d415c:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   d415e:	f001 f9d4 	bl	d550a <_ZnwjRKSt9nothrow_t>
   d4162:	4604      	mov	r4, r0
   d4164:	b130      	cbz	r0, d4174 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x28>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4166:	2200      	movs	r2, #0
            exited(false) {
   d4168:	e9c0 2200 	strd	r2, r2, [r0]
   d416c:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d4170:	7402      	strb	r2, [r0, #16]
   d4172:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d4174:	603c      	str	r4, [r7, #0]
        if (!d_) {
   d4176:	2c00      	cmp	r4, #0
   d4178:	d038      	beq.n	d41ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d417a:	4921      	ldr	r1, [pc, #132]	; (d4200 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
   d417c:	2010      	movs	r0, #16
   d417e:	f001 f9c4 	bl	d550a <_ZnwjRKSt9nothrow_t>
   d4182:	4605      	mov	r5, r0
   d4184:	b1a0      	cbz	r0, d41b0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x64>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4186:	e896 0003 	ldmia.w	r6, {r0, r1}
   d418a:	ab02      	add	r3, sp, #8
   d418c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4190:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4194:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4198:	e893 0003 	ldmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d419c:	2200      	movs	r2, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d419e:	68b3      	ldr	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d41a0:	60ab      	str	r3, [r5, #8]
   d41a2:	e885 0003 	stmia.w	r5, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d41a6:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d41a8:	60b2      	str	r2, [r6, #8]
   d41aa:	68ea      	ldr	r2, [r5, #12]
   d41ac:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d41ae:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d41b0:	6826      	ldr	r6, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d41b2:	6025      	str	r5, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d41b4:	b136      	cbz	r6, d41c4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x78>
   d41b6:	4630      	mov	r0, r6
   d41b8:	f7ff ffae 	bl	d4118 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d41bc:	2110      	movs	r1, #16
   d41be:	4630      	mov	r0, r6
   d41c0:	f001 f9a1 	bl	d5506 <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d41c4:	6838      	ldr	r0, [r7, #0]
        if (!d_->wrapper) {
   d41c6:	6803      	ldr	r3, [r0, #0]
   d41c8:	b183      	cbz	r3, d41ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d41ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d41cc:	464a      	mov	r2, r9
   d41ce:	e9cd 0300 	strd	r0, r3, [sp]
   d41d2:	4641      	mov	r1, r8
   d41d4:	4b0b      	ldr	r3, [pc, #44]	; (d4204 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb8>)
   d41d6:	3004      	adds	r0, #4
   d41d8:	f000 fa70 	bl	d46bc <os_thread_create>
   d41dc:	b930      	cbnz	r0, d41ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
   d41de:	683b      	ldr	r3, [r7, #0]
        while (!d_->started) {
   d41e0:	7c1b      	ldrb	r3, [r3, #16]
   d41e2:	b94b      	cbnz	r3, d41f8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
            HAL_Delay_Milliseconds(1);
   d41e4:	2001      	movs	r0, #1
   d41e6:	f000 fa51 	bl	d468c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d41ea:	e7f8      	b.n	d41de <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x92>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d41ec:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d41ee:	2300      	movs	r3, #0
   d41f0:	603b      	str	r3, [r7, #0]
	if (__p != pointer())
   d41f2:	b108      	cbz	r0, d41f8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
      operator()(_Tp* __ptr) const
   d41f4:	f7ff ff99 	bl	d412a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d41f8:	4638      	mov	r0, r7
   d41fa:	b005      	add	sp, #20
   d41fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4200:	000d60ac 	.word	0x000d60ac
   d4204:	000d40cd 	.word	0x000d40cd

000d4208 <_ZN6ThreadD1Ev>:
    ~Thread()
   d4208:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d420a:	6803      	ldr	r3, [r0, #0]
   d420c:	4604      	mov	r4, r0
        if (!isValid())
   d420e:	b19b      	cbz	r3, d4238 <_ZN6ThreadD1Ev+0x30>
        return isValid() && os_thread_is_current(d_->handle);
   d4210:	6858      	ldr	r0, [r3, #4]
   d4212:	f000 fa5b 	bl	d46cc <os_thread_is_current>
   d4216:	b978      	cbnz	r0, d4238 <_ZN6ThreadD1Ev+0x30>
   d4218:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d421a:	7c5a      	ldrb	r2, [r3, #17]
   d421c:	b912      	cbnz	r2, d4224 <_ZN6ThreadD1Ev+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d421e:	6858      	ldr	r0, [r3, #4]
   d4220:	f000 fa5c 	bl	d46dc <os_thread_join>
        os_thread_cleanup(d_->handle);
   d4224:	6823      	ldr	r3, [r4, #0]
   d4226:	6858      	ldr	r0, [r3, #4]
   d4228:	f000 fa60 	bl	d46ec <os_thread_cleanup>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d422c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d422e:	2300      	movs	r3, #0
   d4230:	6023      	str	r3, [r4, #0]
	if (__p != pointer())
   d4232:	b108      	cbz	r0, d4238 <_ZN6ThreadD1Ev+0x30>
      operator()(_Tp* __ptr) const
   d4234:	f7ff ff79 	bl	d412a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
	if (__ptr != nullptr)
   d4238:	6820      	ldr	r0, [r4, #0]
   d423a:	b108      	cbz	r0, d4240 <_ZN6ThreadD1Ev+0x38>
      operator()(_Tp* __ptr) const
   d423c:	f7ff ff75 	bl	d412a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d4240:	4620      	mov	r0, r4
   d4242:	bd10      	pop	{r4, pc}

000d4244 <_ZN14MessageManagerC1Ev>:
#include "FrameManager.cpp"

class MessageManager {
   d4244:	b510      	push	{r4, lr}
   d4246:	2244      	movs	r2, #68	; 0x44
   d4248:	4604      	mov	r4, r0
   d424a:	2100      	movs	r1, #0
   d424c:	f001 fd76 	bl	d5d3c <memset>
#include "Particle.h"

enum FrameManagerState { preambule, start, entete, message, controle, end };

struct frame {
   d4250:	f647 6255 	movw	r2, #32341	; 0x7e55
   d4254:	61e2      	str	r2, [r4, #28]
   d4256:	62a2      	str	r2, [r4, #40]	; 0x28
    uint8_t* message;
    uint8_t crc16[2];
    bool crcCorrect = false;
};

class FrameManager {
   d4258:	4a0a      	ldr	r2, [pc, #40]	; (d4284 <_ZN14MessageManagerC1Ev+0x40>)
   d425a:	ca07      	ldmia	r2, {r0, r1, r2}
   d425c:	f44f 7380 	mov.w	r3, #256	; 0x100
   d4260:	8023      	strh	r3, [r4, #0]
   d4262:	2300      	movs	r3, #0
   d4264:	7623      	strb	r3, [r4, #24]
struct frame {
   d4266:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
   d426a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
class FrameManager {
   d426e:	86a3      	strh	r3, [r4, #52]	; 0x34
   d4270:	f104 0338 	add.w	r3, r4, #56	; 0x38
   d4274:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d4278:	2301      	movs	r3, #1
   d427a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   d427e:	4620      	mov	r0, r4
   d4280:	bd10      	pop	{r4, pc}
   d4282:	bf00      	nop
   d4284:	000d5f30 	.word	0x000d5f30

000d4288 <setup>:
int outputClockPeriod = 500;

system_tick_t lastThreadTime = 0;
system_tick_t lastMessageTime = 0;

void setup() {
   d4288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	Serial.begin(9600);

    pinMode(outputPin, OUTPUT);
   d428c:	4c33      	ldr	r4, [pc, #204]	; (d435c <setup+0xd4>)
    pinMode(inputPin, INPUT);
   d428e:	4d34      	ldr	r5, [pc, #208]	; (d4360 <setup+0xd8>)
void setup() {
   d4290:	b097      	sub	sp, #92	; 0x5c
	Serial.begin(9600);
   d4292:	f000 fe8b 	bl	d4fac <_Z16_fetch_usbserialv>
   d4296:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d429a:	f000 fe77 	bl	d4f8c <_ZN9USBSerial5beginEl>
    pinMode(outputPin, OUTPUT);
   d429e:	8820      	ldrh	r0, [r4, #0]
   d42a0:	2101      	movs	r1, #1
   d42a2:	f001 f8c1 	bl	d5428 <pinMode>
    pinMode(inputPin, INPUT);
   d42a6:	8828      	ldrh	r0, [r5, #0]
   d42a8:	2100      	movs	r1, #0
   d42aa:	f001 f8bd 	bl	d5428 <pinMode>

    digitalWrite(outputPin, LOW);
   d42ae:	8820      	ldrh	r0, [r4, #0]
   d42b0:	2100      	movs	r1, #0

    attachInterrupt(inputPin, inputEvent, CHANGE);
   d42b2:	2400      	movs	r4, #0
    digitalWrite(outputPin, LOW);
   d42b4:	f001 f8c9 	bl	d544a <digitalWrite>
    attachInterrupt(inputPin, inputEvent, CHANGE);
   d42b8:	9400      	str	r4, [sp, #0]
   d42ba:	492a      	ldr	r1, [pc, #168]	; (d4364 <setup+0xdc>)
   d42bc:	8828      	ldrh	r0, [r5, #0]
   d42be:	f04f 33ff 	mov.w	r3, #4294967295
   d42c2:	4622      	mov	r2, r4
   d42c4:	f000 fe9e 	bl	d5004 <_Z15attachInterrupttPFvvE13InterruptModeah>
    CurrentInputState = initial;
   d42c8:	4b27      	ldr	r3, [pc, #156]	; (d4368 <setup+0xe0>)

    msgManager = MessageManager();
   d42ca:	224c      	movs	r2, #76	; 0x4c
   d42cc:	4621      	mov	r1, r4
   d42ce:	a803      	add	r0, sp, #12
    CurrentInputState = initial;
   d42d0:	701c      	strb	r4, [r3, #0]
    msgManager = MessageManager();
   d42d2:	f001 fd33 	bl	d5d3c <memset>
   d42d6:	a803      	add	r0, sp, #12
   d42d8:	f7ff ffb4 	bl	d4244 <_ZN14MessageManagerC1Ev>
   d42dc:	2249      	movs	r2, #73	; 0x49
   d42de:	a903      	add	r1, sp, #12
   d42e0:	4822      	ldr	r0, [pc, #136]	; (d436c <setup+0xe4>)
   d42e2:	f001 fd1d 	bl	d5d20 <memcpy>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d42e6:	4620      	mov	r0, r4
   d42e8:	f000 f9e0 	bl	d46ac <hal_timer_millis>
        while (_while() && !_condition()) {
   d42ec:	f247 582f 	movw	r8, #29999	; 0x752f
        return hal_timer_millis(nullptr);
   d42f0:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d42f2:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d42f6:	2000      	movs	r0, #0
   d42f8:	f000 f9d8 	bl	d46ac <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d42fc:	1b46      	subs	r6, r0, r5
   d42fe:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d4302:	45b9      	cmp	r9, r7
   d4304:	bf08      	it	eq
   d4306:	45b0      	cmpeq	r8, r6
   d4308:	d307      	bcc.n	d431a <setup+0x92>

    waitFor(Serial.isConnected, 30000);
   d430a:	f000 fe4f 	bl	d4fac <_Z16_fetch_usbserialv>
   d430e:	f000 fe41 	bl	d4f94 <_ZN9USBSerial11isConnectedEv>
   d4312:	b910      	cbnz	r0, d431a <setup+0x92>
            spark_process();
   d4314:	f000 fb66 	bl	d49e4 <spark_process>
        while (_while() && !_condition()) {
   d4318:	e7ed      	b.n	d42f6 <setup+0x6e>
   d431a:	f000 fe47 	bl	d4fac <_Z16_fetch_usbserialv>
   d431e:	f000 fe39 	bl	d4f94 <_ZN9USBSerial11isConnectedEv>
    Serial.println("Serial connected: starting");
   d4322:	f000 fe43 	bl	d4fac <_Z16_fetch_usbserialv>
   d4326:	4912      	ldr	r1, [pc, #72]	; (d4370 <setup+0xe8>)
   d4328:	f000 fc5d 	bl	d4be6 <_ZN5Print7printlnEPKc>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d432c:	4b11      	ldr	r3, [pc, #68]	; (d4374 <setup+0xec>)
   d432e:	9303      	str	r3, [sp, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   d4330:	4b11      	ldr	r3, [pc, #68]	; (d4378 <setup+0xf0>)
   d4332:	9306      	str	r3, [sp, #24]
	    _M_manager = &_My_handler::_M_manager;
   d4334:	4b11      	ldr	r3, [pc, #68]	; (d437c <setup+0xf4>)
   d4336:	9305      	str	r3, [sp, #20]
    Thread thread("outputThread", outputThread);
   d4338:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d433c:	4910      	ldr	r1, [pc, #64]	; (d4380 <setup+0xf8>)
   d433e:	9300      	str	r3, [sp, #0]
   d4340:	aa03      	add	r2, sp, #12
   d4342:	2302      	movs	r3, #2
   d4344:	a802      	add	r0, sp, #8
   d4346:	f7ff ff01 	bl	d414c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
    class function<_Res(_ArgTypes...)>
   d434a:	a803      	add	r0, sp, #12
   d434c:	f7ff fee4 	bl	d4118 <_ZNSt14_Function_baseD1Ev>
   d4350:	a802      	add	r0, sp, #8
   d4352:	f7ff ff59 	bl	d4208 <_ZN6ThreadD1Ev>
}
   d4356:	b017      	add	sp, #92	; 0x5c
   d4358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d435c:	2003e57c 	.word	0x2003e57c
   d4360:	2003e574 	.word	0x2003e574
   d4364:	000d43c1 	.word	0x000d43c1
   d4368:	2003e5ed 	.word	0x2003e5ed
   d436c:	2003e5f8 	.word	0x2003e5f8
   d4370:	000d5db8 	.word	0x000d5db8
   d4374:	000d458d 	.word	0x000d458d
   d4378:	000d40b3 	.word	0x000d40b3
   d437c:	000d40b7 	.word	0x000d40b7
   d4380:	000d5dd3 	.word	0x000d5dd3

000d4384 <loop>:

    // Call messages to send here, split by long delays?
    // char* message1 = [H, e, l, l, o, , W, o, r, l, d, !];
    // ex. msgManager.sendMessage(message1);
    // delay(10000); OR os_thread_delay_until(&lastMessageTime, 10000)
}
   d4384:	4770      	bx	lr
	...

000d4388 <_Z16changeInputState10InputState>:
    }
};

// Function used to change state and perform necessary actions right away (like outputing)
void changeInputState(InputState newInputState) {
    switch (newInputState) {
   d4388:	2801      	cmp	r0, #1
void changeInputState(InputState newInputState) {
   d438a:	b510      	push	{r4, lr}
   d438c:	4604      	mov	r4, r0
    switch (newInputState) {
   d438e:	d004      	beq.n	d439a <_Z16changeInputState10InputState+0x12>
   d4390:	2803      	cmp	r0, #3
   d4392:	d008      	beq.n	d43a6 <_Z16changeInputState10InputState+0x1e>
            // Register that a 1 has been read
            Serial.println("READ: 1");
            //msgManager.frameManager.receiveBit(0b1);
            break;
    }
    CurrentInputState = newInputState; // Change to new state for next event
   d4394:	4b06      	ldr	r3, [pc, #24]	; (d43b0 <_Z16changeInputState10InputState+0x28>)
   d4396:	701c      	strb	r4, [r3, #0]
}
   d4398:	bd10      	pop	{r4, pc}
            Serial.println("READ: 0");
   d439a:	f000 fe07 	bl	d4fac <_Z16_fetch_usbserialv>
   d439e:	4905      	ldr	r1, [pc, #20]	; (d43b4 <_Z16changeInputState10InputState+0x2c>)
            Serial.println("READ: 1");
   d43a0:	f000 fc21 	bl	d4be6 <_ZN5Print7printlnEPKc>
            break;
   d43a4:	e7f6      	b.n	d4394 <_Z16changeInputState10InputState+0xc>
            Serial.println("READ: 1");
   d43a6:	f000 fe01 	bl	d4fac <_Z16_fetch_usbserialv>
   d43aa:	4903      	ldr	r1, [pc, #12]	; (d43b8 <_Z16changeInputState10InputState+0x30>)
   d43ac:	e7f8      	b.n	d43a0 <_Z16changeInputState10InputState+0x18>
   d43ae:	bf00      	nop
   d43b0:	2003e5ed 	.word	0x2003e5ed
   d43b4:	000d5de0 	.word	0x000d5de0
   d43b8:	000d5de8 	.word	0x000d5de8
   d43bc:	00000000 	.word	0x00000000

000d43c0 <_Z10inputEventv>:

void inputEvent() {
   d43c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    //     }
    //     return;
    // }
    //----------

    int duration = millis() - lastChangeTime;
   d43c4:	4e4e      	ldr	r6, [pc, #312]	; (d4500 <_Z10inputEventv+0x140>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d43c6:	f000 f969 	bl	d469c <HAL_Timer_Get_Milli_Seconds>
   d43ca:	6833      	ldr	r3, [r6, #0]
   d43cc:	1ac5      	subs	r5, r0, r3
   d43ce:	f000 f965 	bl	d469c <HAL_Timer_Get_Milli_Seconds>
    lastChangeTime = millis();

    // If 80% higher than one clock period: must be two periods (AKA: long period)
    int longPeriodMin = inputClockPeriod * 1.8;
   d43d2:	4b4c      	ldr	r3, [pc, #304]	; (d4504 <_Z10inputEventv+0x144>)
    lastChangeTime = millis();
   d43d4:	6030      	str	r0, [r6, #0]
    int longPeriodMin = inputClockPeriod * 1.8;
   d43d6:	6818      	ldr	r0, [r3, #0]
   d43d8:	f001 f9f0 	bl	d57bc <__aeabi_i2d>
    int longPeriodMax = inputClockPeriod * 2.2;
    int shortPeriodMin = inputClockPeriod * 0.8;
   d43dc:	a342      	add	r3, pc, #264	; (adr r3, d44e8 <_Z10inputEventv+0x128>)
   d43de:	e9d3 2300 	ldrd	r2, r3, [r3]
    int longPeriodMin = inputClockPeriod * 1.8;
   d43e2:	4680      	mov	r8, r0
   d43e4:	4689      	mov	r9, r1
    int shortPeriodMin = inputClockPeriod * 0.8;
   d43e6:	f001 fa53 	bl	d5890 <__aeabi_dmul>
   d43ea:	f001 fc63 	bl	d5cb4 <__aeabi_d2iz>

    if (duration < shortPeriodMin) {
   d43ee:	4285      	cmp	r5, r0
void inputEvent() {
   d43f0:	f04f 0400 	mov.w	r4, #0
    if (duration < shortPeriodMin) {
   d43f4:	db54      	blt.n	d44a0 <_Z10inputEventv+0xe0>
    int longPeriodMax = inputClockPeriod * 2.2;
   d43f6:	a33e      	add	r3, pc, #248	; (adr r3, d44f0 <_Z10inputEventv+0x130>)
   d43f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43fc:	4640      	mov	r0, r8
   d43fe:	4649      	mov	r1, r9
   d4400:	f001 fa46 	bl	d5890 <__aeabi_dmul>
   d4404:	f001 fc56 	bl	d5cb4 <__aeabi_d2iz>
        return;
    }

    // Determine newStateDuration (time since last change event)
    StateDuration newStateDuration;
    if (duration > longPeriodMax) {
   d4408:	4285      	cmp	r5, r0
   d440a:	4e3f      	ldr	r6, [pc, #252]	; (d4508 <_Z10inputEventv+0x148>)
    int longPeriodMax = inputClockPeriod * 2.2;
   d440c:	4607      	mov	r7, r0
    if (duration > longPeriodMax) {
   d440e:	dd24      	ble.n	d445a <_Z10inputEventv+0x9a>
        newStateDuration = veryLongPeriod;

        Serial.println("Setting CurrentInputState to 'initial' because long period detected");
   d4410:	f000 fdcc 	bl	d4fac <_Z16_fetch_usbserialv>
   d4414:	493d      	ldr	r1, [pc, #244]	; (d450c <_Z10inputEventv+0x14c>)
   d4416:	f000 fbe6 	bl	d4be6 <_ZN5Print7printlnEPKc>
        CurrentInputState = initial;
   d441a:	7034      	strb	r4, [r6, #0]
        newStateDuration = veryLongPeriod;
   d441c:	2402      	movs	r4, #2
    else if (duration >= shortPeriod && duration < longPeriodMin) {
        newStateDuration = shortPeriod;
    }
    
    // Printing (debug)
    Serial.printlnf("Read %s impulse duration: %d ms -> #%d (CurrentInputState: %d)", inputCurrentStateHigh ? "HIGH" : "LOW", duration, newStateDuration, CurrentInputState);
   d441e:	4f3c      	ldr	r7, [pc, #240]	; (d4510 <_Z10inputEventv+0x150>)
   d4420:	f000 fdc4 	bl	d4fac <_Z16_fetch_usbserialv>
   d4424:	f897 c000 	ldrb.w	ip, [r7]
   d4428:	7833      	ldrb	r3, [r6, #0]
   d442a:	493a      	ldr	r1, [pc, #232]	; (d4514 <_Z10inputEventv+0x154>)
   d442c:	4a3a      	ldr	r2, [pc, #232]	; (d4518 <_Z10inputEventv+0x158>)
   d442e:	e9cd 4300 	strd	r4, r3, [sp]
   d4432:	f1bc 0f00 	cmp.w	ip, #0
   d4436:	bf08      	it	eq
   d4438:	460a      	moveq	r2, r1
   d443a:	462b      	mov	r3, r5
   d443c:	4937      	ldr	r1, [pc, #220]	; (d451c <_Z10inputEventv+0x15c>)
   d443e:	f7ff fe5d 	bl	d40fc <_ZN5Print8printlnfEPKcz>
    inputCurrentStateHigh = !inputCurrentStateHigh;
   d4442:	783b      	ldrb	r3, [r7, #0]
   d4444:	f083 0301 	eor.w	r3, r3, #1
   d4448:	703b      	strb	r3, [r7, #0]

    // STATE MACHINE: Decode Manchester
    switch (CurrentInputState) {
   d444a:	7833      	ldrb	r3, [r6, #0]
   d444c:	2b04      	cmp	r3, #4
   d444e:	d827      	bhi.n	d44a0 <_Z10inputEventv+0xe0>
   d4450:	e8df f003 	tbb	[pc, r3]
   d4454:	362d2312 	.word	0x362d2312
   d4458:	3f          	.byte	0x3f
   d4459:	00          	.byte	0x00
    int longPeriodMin = inputClockPeriod * 1.8;
   d445a:	a327      	add	r3, pc, #156	; (adr r3, d44f8 <_Z10inputEventv+0x138>)
   d445c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4460:	4640      	mov	r0, r8
   d4462:	4649      	mov	r1, r9
   d4464:	f001 fa14 	bl	d5890 <__aeabi_dmul>
   d4468:	f001 fc24 	bl	d5cb4 <__aeabi_d2iz>
    else if (duration >= longPeriodMin && duration < longPeriodMax) {
   d446c:	4285      	cmp	r5, r0
   d446e:	dbd6      	blt.n	d441e <_Z10inputEventv+0x5e>
        newStateDuration = longPeriod;
   d4470:	42bd      	cmp	r5, r7
   d4472:	bfb8      	it	lt
   d4474:	2401      	movlt	r4, #1
   d4476:	e7d2      	b.n	d441e <_Z10inputEventv+0x5e>
        case initial:
            if (newStateDuration == shortPeriod || newStateDuration == veryLongPeriod) {
   d4478:	f014 0ffd 	tst.w	r4, #253	; 0xfd
   d447c:	d105      	bne.n	d448a <_Z10inputEventv+0xca>
                changeInputState(output0);
   d447e:	2001      	movs	r0, #1
                Serial.printlnf("ERROR: expected shortPeriod in wait state got #%d", newStateDuration);
            }
            changeInputState(output1);
            break;
    }
}
   d4480:	b003      	add	sp, #12
   d4482:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
               changeInputState(output1);
   d4486:	f7ff bf7f 	b.w	d4388 <_Z16changeInputState10InputState>
                Serial.println("ERROR: initial state got longPeriod");
   d448a:	f000 fd8f 	bl	d4fac <_Z16_fetch_usbserialv>
   d448e:	4924      	ldr	r1, [pc, #144]	; (d4520 <_Z10inputEventv+0x160>)
}
   d4490:	b003      	add	sp, #12
   d4492:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                Serial.println("UNDEFINED behaviour for veryLongPeriod in inputState 'output1'");
   d4496:	f000 bba6 	b.w	d4be6 <_ZN5Print7printlnEPKc>
            if (newStateDuration == shortPeriod) {
   d449a:	b924      	cbnz	r4, d44a6 <_Z10inputEventv+0xe6>
    CurrentInputState = newInputState; // Change to new state for next event
   d449c:	2302      	movs	r3, #2
   d449e:	7033      	strb	r3, [r6, #0]
}
   d44a0:	b003      	add	sp, #12
   d44a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            else if (newStateDuration == longPeriod) {
   d44a6:	2c01      	cmp	r4, #1
   d44a8:	d1fa      	bne.n	d44a0 <_Z10inputEventv+0xe0>
               changeInputState(output1);
   d44aa:	2003      	movs	r0, #3
   d44ac:	e7e8      	b.n	d4480 <_Z10inputEventv+0xc0>
            if (newStateDuration != shortPeriod) {
   d44ae:	2c00      	cmp	r4, #0
   d44b0:	d0e5      	beq.n	d447e <_Z10inputEventv+0xbe>
                Serial.printlnf("ERROR: expected shortPeriod in wait state got #%d", newStateDuration);
   d44b2:	f000 fd7b 	bl	d4fac <_Z16_fetch_usbserialv>
   d44b6:	491b      	ldr	r1, [pc, #108]	; (d4524 <_Z10inputEventv+0x164>)
   d44b8:	4622      	mov	r2, r4
   d44ba:	f7ff fe1f 	bl	d40fc <_ZN5Print8printlnfEPKcz>
   d44be:	e7de      	b.n	d447e <_Z10inputEventv+0xbe>
            if (newStateDuration == shortPeriod) {
   d44c0:	b90c      	cbnz	r4, d44c6 <_Z10inputEventv+0x106>
    CurrentInputState = newInputState; // Change to new state for next event
   d44c2:	2304      	movs	r3, #4
   d44c4:	e7eb      	b.n	d449e <_Z10inputEventv+0xde>
            else if (newStateDuration == longPeriod) {
   d44c6:	2c01      	cmp	r4, #1
   d44c8:	d0d9      	beq.n	d447e <_Z10inputEventv+0xbe>
                Serial.println("UNDEFINED behaviour for veryLongPeriod in inputState 'output1'");
   d44ca:	f000 fd6f 	bl	d4fac <_Z16_fetch_usbserialv>
   d44ce:	4916      	ldr	r1, [pc, #88]	; (d4528 <_Z10inputEventv+0x168>)
   d44d0:	e7de      	b.n	d4490 <_Z10inputEventv+0xd0>
            if (newStateDuration != shortPeriod) {
   d44d2:	2c00      	cmp	r4, #0
   d44d4:	d0e9      	beq.n	d44aa <_Z10inputEventv+0xea>
                Serial.printlnf("ERROR: expected shortPeriod in wait state got #%d", newStateDuration);
   d44d6:	f000 fd69 	bl	d4fac <_Z16_fetch_usbserialv>
   d44da:	4912      	ldr	r1, [pc, #72]	; (d4524 <_Z10inputEventv+0x164>)
   d44dc:	4622      	mov	r2, r4
   d44de:	f7ff fe0d 	bl	d40fc <_ZN5Print8printlnfEPKcz>
   d44e2:	e7e2      	b.n	d44aa <_Z10inputEventv+0xea>
   d44e4:	f3af 8000 	nop.w
   d44e8:	9999999a 	.word	0x9999999a
   d44ec:	3fe99999 	.word	0x3fe99999
   d44f0:	9999999a 	.word	0x9999999a
   d44f4:	40019999 	.word	0x40019999
   d44f8:	cccccccd 	.word	0xcccccccd
   d44fc:	3ffccccc 	.word	0x3ffccccc
   d4500:	2003e5f0 	.word	0x2003e5f0
   d4504:	2003e570 	.word	0x2003e570
   d4508:	2003e5ed 	.word	0x2003e5ed
   d450c:	000d5df9 	.word	0x000d5df9
   d4510:	2003e5ee 	.word	0x2003e5ee
   d4514:	000d5df5 	.word	0x000d5df5
   d4518:	000d5df0 	.word	0x000d5df0
   d451c:	000d5e3d 	.word	0x000d5e3d
   d4520:	000d5e7c 	.word	0x000d5e7c
   d4524:	000d5ea0 	.word	0x000d5ea0
   d4528:	000d5ed2 	.word	0x000d5ed2

000d452c <_Z6output8PinState>:
// ----------
// HANDLE OUTPUT 
// ----------


void output(PinState level) {
   d452c:	b508      	push	{r3, lr}
    digitalWrite(outputPin, level);
   d452e:	4b06      	ldr	r3, [pc, #24]	; (d4548 <_Z6output8PinState+0x1c>)
void output(PinState level) {
   d4530:	4601      	mov	r1, r0
    digitalWrite(outputPin, level);
   d4532:	8818      	ldrh	r0, [r3, #0]
   d4534:	f000 ff89 	bl	d544a <digitalWrite>
    os_thread_delay_until(&lastThreadTime, outputClockPeriod);
   d4538:	4b04      	ldr	r3, [pc, #16]	; (d454c <_Z6output8PinState+0x20>)
   d453a:	4805      	ldr	r0, [pc, #20]	; (d4550 <_Z6output8PinState+0x24>)
   d453c:	6819      	ldr	r1, [r3, #0]
}
   d453e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_thread_delay_until(&lastThreadTime, outputClockPeriod);
   d4542:	f000 b8db 	b.w	d46fc <os_thread_delay_until>
   d4546:	bf00      	nop
   d4548:	2003e57c 	.word	0x2003e57c
   d454c:	2003e578 	.word	0x2003e578
   d4550:	2003e5f4 	.word	0x2003e5f4

000d4554 <_Z18sendBitsManchesterPbi>:

void sendBitsManchester(bool bits[], int bitCount) {
   d4554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (int i = 0; i < bitCount; i++) {
        if (bits[i] == BIT1) {
   d4556:	4f0c      	ldr	r7, [pc, #48]	; (d4588 <_Z18sendBitsManchesterPbi+0x34>)
void sendBitsManchester(bool bits[], int bitCount) {
   d4558:	4605      	mov	r5, r0
   d455a:	460e      	mov	r6, r1
    for (int i = 0; i < bitCount; i++) {
   d455c:	2400      	movs	r4, #0
   d455e:	42b4      	cmp	r4, r6
   d4560:	da10      	bge.n	d4584 <_Z18sendBitsManchesterPbi+0x30>
        if (bits[i] == BIT1) {
   d4562:	5d2a      	ldrb	r2, [r5, r4]
   d4564:	783b      	ldrb	r3, [r7, #0]
   d4566:	429a      	cmp	r2, r3
   d4568:	d107      	bne.n	d457a <_Z18sendBitsManchesterPbi+0x26>
            // Send 1 in Manchester
            //Serial.println("SEND: 1");
            output(HIGH);
   d456a:	2001      	movs	r0, #1
   d456c:	f7ff ffde 	bl	d452c <_Z6output8PinState>
            output(LOW);
   d4570:	2000      	movs	r0, #0
        }
        else {
            // Send 0 in Manchester
            //Serial.println("SEND: 0");
            output(LOW);
            output(HIGH);
   d4572:	f7ff ffdb 	bl	d452c <_Z6output8PinState>
    for (int i = 0; i < bitCount; i++) {
   d4576:	3401      	adds	r4, #1
   d4578:	e7f1      	b.n	d455e <_Z18sendBitsManchesterPbi+0xa>
            output(LOW);
   d457a:	2000      	movs	r0, #0
   d457c:	f7ff ffd6 	bl	d452c <_Z6output8PinState>
            output(HIGH);
   d4580:	2001      	movs	r0, #1
   d4582:	e7f6      	b.n	d4572 <_Z18sendBitsManchesterPbi+0x1e>
        }
    }
}
   d4584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4586:	bf00      	nop
   d4588:	2003e56c 	.word	0x2003e56c

000d458c <_Z12outputThreadv>:

void outputThread() {
   d458c:	b507      	push	{r0, r1, r2, lr}
    Serial.println("Starting output loop");
   d458e:	f000 fd0d 	bl	d4fac <_Z16_fetch_usbserialv>
   d4592:	4913      	ldr	r1, [pc, #76]	; (d45e0 <_Z12outputThreadv+0x54>)
        // Call messages to send here, split by long delays?
        // uint8_t message1[12] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd','!'};
        // msgManager.sendMessage(message1);
        // os_thread_delay_until(&lastMessageTime, 10000);

        bool bitsToSend[] = {BIT0, BIT1, BIT0, BIT1, BIT0, BIT1, BIT1, BIT1};
   d4594:	4e13      	ldr	r6, [pc, #76]	; (d45e4 <_Z12outputThreadv+0x58>)
   d4596:	4d14      	ldr	r5, [pc, #80]	; (d45e8 <_Z12outputThreadv+0x5c>)
        sendBitsManchester(bitsToSend, 8);
        Serial.println("---------");
   d4598:	4c14      	ldr	r4, [pc, #80]	; (d45ec <_Z12outputThreadv+0x60>)
    Serial.println("Starting output loop");
   d459a:	f000 fb24 	bl	d4be6 <_ZN5Print7printlnEPKc>
        bool bitsToSend[] = {BIT0, BIT1, BIT0, BIT1, BIT0, BIT1, BIT1, BIT1};
   d459e:	782b      	ldrb	r3, [r5, #0]
   d45a0:	7832      	ldrb	r2, [r6, #0]
   d45a2:	f88d 2000 	strb.w	r2, [sp]
        sendBitsManchester(bitsToSend, 8);
   d45a6:	2108      	movs	r1, #8
   d45a8:	4668      	mov	r0, sp
        bool bitsToSend[] = {BIT0, BIT1, BIT0, BIT1, BIT0, BIT1, BIT1, BIT1};
   d45aa:	f88d 3001 	strb.w	r3, [sp, #1]
   d45ae:	f88d 2002 	strb.w	r2, [sp, #2]
   d45b2:	f88d 3003 	strb.w	r3, [sp, #3]
   d45b6:	f88d 2004 	strb.w	r2, [sp, #4]
   d45ba:	f88d 3005 	strb.w	r3, [sp, #5]
   d45be:	f88d 3006 	strb.w	r3, [sp, #6]
   d45c2:	f88d 3007 	strb.w	r3, [sp, #7]
        sendBitsManchester(bitsToSend, 8);
   d45c6:	f7ff ffc5 	bl	d4554 <_Z18sendBitsManchesterPbi>
        Serial.println("---------");
   d45ca:	f000 fcef 	bl	d4fac <_Z16_fetch_usbserialv>
   d45ce:	4621      	mov	r1, r4
   d45d0:	f000 fb09 	bl	d4be6 <_ZN5Print7printlnEPKc>
        os_thread_delay_until(&lastThreadTime, 2000);
   d45d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d45d8:	4805      	ldr	r0, [pc, #20]	; (d45f0 <_Z12outputThreadv+0x64>)
   d45da:	f000 f88f 	bl	d46fc <os_thread_delay_until>
    while(true) {
   d45de:	e7de      	b.n	d459e <_Z12outputThreadv+0x12>
   d45e0:	000d5f11 	.word	0x000d5f11
   d45e4:	2003e5ec 	.word	0x2003e5ec
   d45e8:	2003e56c 	.word	0x2003e56c
   d45ec:	000d5f26 	.word	0x000d5f26
   d45f0:	2003e5f4 	.word	0x2003e5f4

000d45f4 <_GLOBAL__sub_I_outputPin>:
	}
}
   d45f4:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
   d45f6:	2100      	movs	r1, #0
   d45f8:	2001      	movs	r0, #1
   d45fa:	f000 f977 	bl	d48ec <system_thread_set_state>
MessageManager msgManager;
   d45fe:	4802      	ldr	r0, [pc, #8]	; (d4608 <_GLOBAL__sub_I_outputPin+0x14>)
   d4600:	f7ff fe20 	bl	d4244 <_ZN14MessageManagerC1Ev>
}
   d4604:	bd08      	pop	{r3, pc}
   d4606:	bf00      	nop
   d4608:	2003e5f8 	.word	0x2003e5f8

000d460c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <netdb_freeaddrinfo+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	689b      	ldr	r3, [r3, #8]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	00030268 	.word	0x00030268

000d461c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <netdb_getaddrinfo+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	68db      	ldr	r3, [r3, #12]
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	00030268 	.word	0x00030268

000d462c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <HAL_Pin_Mode+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	689b      	ldr	r3, [r3, #8]
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	0003022c 	.word	0x0003022c

000d463c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <HAL_Get_Pin_Mode+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	68db      	ldr	r3, [r3, #12]
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	0003022c 	.word	0x0003022c

000d464c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <HAL_GPIO_Write+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	691b      	ldr	r3, [r3, #16]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	0003022c 	.word	0x0003022c

000d465c <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <HAL_Interrupts_Attach+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	699b      	ldr	r3, [r3, #24]
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	0003022c 	.word	0x0003022c

000d466c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <HAL_Interrupts_Detach+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	69db      	ldr	r3, [r3, #28]
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	0003022c 	.word	0x0003022c

000d467c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <HAL_RNG_GetRandomNumber+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	685b      	ldr	r3, [r3, #4]
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	00030218 	.word	0x00030218

000d468c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <HAL_Delay_Milliseconds+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	689b      	ldr	r3, [r3, #8]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	00030218 	.word	0x00030218

000d469c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	695b      	ldr	r3, [r3, #20]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	00030218 	.word	0x00030218

000d46ac <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <hal_timer_millis+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	00030218 	.word	0x00030218

000d46bc <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <os_thread_create+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	685b      	ldr	r3, [r3, #4]
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	00030248 	.word	0x00030248

000d46cc <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <os_thread_is_current+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	689b      	ldr	r3, [r3, #8]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	00030248 	.word	0x00030248

000d46dc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <os_thread_join+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	691b      	ldr	r3, [r3, #16]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030248 	.word	0x00030248

000d46ec <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <os_thread_cleanup+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	695b      	ldr	r3, [r3, #20]
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	00030248 	.word	0x00030248

000d46fc <os_thread_delay_until>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <os_thread_delay_until+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	699b      	ldr	r3, [r3, #24]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	00030248 	.word	0x00030248

000d470c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <os_mutex_recursive_create+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	00030248 	.word	0x00030248

000d471c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <os_mutex_recursive_destroy+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030248 	.word	0x00030248

000d472c <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <os_thread_exit+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	00030248 	.word	0x00030248

000d473c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <inet_inet_ntop+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	695b      	ldr	r3, [r3, #20]
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	00030264 	.word	0x00030264

000d474c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <hal_usart_init+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	681b      	ldr	r3, [r3, #0]
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	0003023c 	.word	0x0003023c

000d475c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <hal_usart_write+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	68db      	ldr	r3, [r3, #12]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	0003023c 	.word	0x0003023c

000d476c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <hal_usart_available+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	691b      	ldr	r3, [r3, #16]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	0003023c 	.word	0x0003023c

000d477c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <hal_usart_read+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	695b      	ldr	r3, [r3, #20]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	0003023c 	.word	0x0003023c

000d478c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <hal_usart_peek+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	699b      	ldr	r3, [r3, #24]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	0003023c 	.word	0x0003023c

000d479c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <hal_usart_flush+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	69db      	ldr	r3, [r3, #28]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	0003023c 	.word	0x0003023c

000d47ac <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <hal_usart_is_enabled+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	6a1b      	ldr	r3, [r3, #32]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	0003023c 	.word	0x0003023c

000d47bc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <hal_usart_available_data_for_write+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	0003023c 	.word	0x0003023c

000d47cc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <hal_i2c_write+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6a1b      	ldr	r3, [r3, #32]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030228 	.word	0x00030228

000d47dc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <hal_i2c_available+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030228 	.word	0x00030228

000d47ec <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <hal_i2c_read+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030228 	.word	0x00030228

000d47fc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <hal_i2c_peek+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030228 	.word	0x00030228

000d480c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <hal_i2c_flush+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030228 	.word	0x00030228

000d481c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <hal_i2c_is_enabled+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030228 	.word	0x00030228

000d482c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <hal_i2c_init+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030228 	.word	0x00030228

000d483c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <hal_spi_init+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	69db      	ldr	r3, [r3, #28]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030230 	.word	0x00030230

000d484c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <hal_spi_is_enabled+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	6a1b      	ldr	r3, [r3, #32]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030230 	.word	0x00030230

000d485c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <HAL_USB_USART_Init+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	681b      	ldr	r3, [r3, #0]
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	0003024c 	.word	0x0003024c

000d486c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <HAL_USB_USART_Begin+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	685b      	ldr	r3, [r3, #4]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	0003024c 	.word	0x0003024c

000d487c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <HAL_USB_USART_Available_Data+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	691b      	ldr	r3, [r3, #16]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	0003024c 	.word	0x0003024c

000d488c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	695b      	ldr	r3, [r3, #20]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	0003024c 	.word	0x0003024c

000d489c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <HAL_USB_USART_Receive_Data+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	699b      	ldr	r3, [r3, #24]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	0003024c 	.word	0x0003024c

000d48ac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <HAL_USB_USART_Send_Data+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	69db      	ldr	r3, [r3, #28]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	0003024c 	.word	0x0003024c

000d48bc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <HAL_USB_USART_Flush_Data+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	6a1b      	ldr	r3, [r3, #32]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	0003024c 	.word	0x0003024c

000d48cc <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <HAL_USB_USART_Is_Connected+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	0003024c 	.word	0x0003024c

000d48dc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <set_system_mode+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	685b      	ldr	r3, [r3, #4]
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	00030220 	.word	0x00030220

000d48ec <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <system_thread_set_state+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	00030220 	.word	0x00030220

000d48fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b03      	ldr	r3, [pc, #12]	; (d490c <system_ctrl_set_app_request_handler+0x10>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4906:	9301      	str	r3, [sp, #4]
   d4908:	bd08      	pop	{r3, pc}
   d490a:	0000      	.short	0x0000
   d490c:	00030220 	.word	0x00030220

000d4910 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b03      	ldr	r3, [pc, #12]	; (d4920 <system_ctrl_set_result+0x10>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d491a:	9301      	str	r3, [sp, #4]
   d491c:	bd08      	pop	{r3, pc}
   d491e:	0000      	.short	0x0000
   d4920:	00030220 	.word	0x00030220

000d4924 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <network_connect+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	685b      	ldr	r3, [r3, #4]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030240 	.word	0x00030240

000d4934 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <network_connecting+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	689b      	ldr	r3, [r3, #8]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030240 	.word	0x00030240

000d4944 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <network_disconnect+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	68db      	ldr	r3, [r3, #12]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030240 	.word	0x00030240

000d4954 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <network_ready+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	691b      	ldr	r3, [r3, #16]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	00030240 	.word	0x00030240

000d4964 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <network_on+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	695b      	ldr	r3, [r3, #20]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	00030240 	.word	0x00030240

000d4974 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <network_off+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	699b      	ldr	r3, [r3, #24]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030240 	.word	0x00030240

000d4984 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <network_listen+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	69db      	ldr	r3, [r3, #28]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030240 	.word	0x00030240

000d4994 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <network_listening+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	6a1b      	ldr	r3, [r3, #32]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030240 	.word	0x00030240

000d49a4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <network_set_listen_timeout+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030240 	.word	0x00030240

000d49b4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <network_get_listen_timeout+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030240 	.word	0x00030240

000d49c4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <network_is_on+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030240 	.word	0x00030240

000d49d4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <network_is_off+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030240 	.word	0x00030240

000d49e4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <spark_process+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	689b      	ldr	r3, [r3, #8]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030244 	.word	0x00030244

000d49f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <spark_set_random_seed_from_cloud_handler+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030244 	.word	0x00030244

000d4a04 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <malloc+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	681b      	ldr	r3, [r3, #0]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	0003021c 	.word	0x0003021c

000d4a14 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <free+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	685b      	ldr	r3, [r3, #4]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	0003021c 	.word	0x0003021c

000d4a24 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <vsnprintf+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	0003021c 	.word	0x0003021c

000d4a34 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <abort+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	0003021c 	.word	0x0003021c

000d4a44 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <newlib_impure_ptr_callback+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	0003021c 	.word	0x0003021c

000d4a54 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a54:	2200      	movs	r2, #0
   d4a56:	6840      	ldr	r0, [r0, #4]
   d4a58:	4611      	mov	r1, r2
   d4a5a:	f7ff bf9b 	b.w	d4994 <network_listening>

000d4a5e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4a5e:	2200      	movs	r2, #0
   d4a60:	6840      	ldr	r0, [r0, #4]
   d4a62:	4611      	mov	r1, r2
   d4a64:	f7ff bfa6 	b.w	d49b4 <network_get_listen_timeout>

000d4a68 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4a68:	6840      	ldr	r0, [r0, #4]
   d4a6a:	2200      	movs	r2, #0
   d4a6c:	f7ff bf9a 	b.w	d49a4 <network_set_listen_timeout>

000d4a70 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a70:	6840      	ldr	r0, [r0, #4]
   d4a72:	2200      	movs	r2, #0
   d4a74:	f081 0101 	eor.w	r1, r1, #1
   d4a78:	f7ff bf84 	b.w	d4984 <network_listen>

000d4a7c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4a7c:	2300      	movs	r3, #0
   d4a7e:	6840      	ldr	r0, [r0, #4]
   d4a80:	461a      	mov	r2, r3
   d4a82:	4619      	mov	r1, r3
   d4a84:	f7ff bf76 	b.w	d4974 <network_off>

000d4a88 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4a88:	2300      	movs	r3, #0
   d4a8a:	6840      	ldr	r0, [r0, #4]
   d4a8c:	461a      	mov	r2, r3
   d4a8e:	4619      	mov	r1, r3
   d4a90:	f7ff bf68 	b.w	d4964 <network_on>

000d4a94 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4a94:	2200      	movs	r2, #0
   d4a96:	6840      	ldr	r0, [r0, #4]
   d4a98:	4611      	mov	r1, r2
   d4a9a:	f7ff bf5b 	b.w	d4954 <network_ready>

000d4a9e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4a9e:	2200      	movs	r2, #0
   d4aa0:	6840      	ldr	r0, [r0, #4]
   d4aa2:	4611      	mov	r1, r2
   d4aa4:	f7ff bf46 	b.w	d4934 <network_connecting>

000d4aa8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4aa8:	6840      	ldr	r0, [r0, #4]
   d4aaa:	2200      	movs	r2, #0
   d4aac:	2102      	movs	r1, #2
   d4aae:	f7ff bf49 	b.w	d4944 <network_disconnect>

000d4ab2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4ab2:	2300      	movs	r3, #0
   d4ab4:	6840      	ldr	r0, [r0, #4]
   d4ab6:	461a      	mov	r2, r3
   d4ab8:	f7ff bf34 	b.w	d4924 <network_connect>

000d4abc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4abc:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4abe:	2203      	movs	r2, #3
   d4ac0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4ac2:	4a02      	ldr	r2, [pc, #8]	; (d4acc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4ac4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4ac6:	4770      	bx	lr
   d4ac8:	2003e644 	.word	0x2003e644
   d4acc:	000d5f44 	.word	0x000d5f44

000d4ad0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4ad0:	b510      	push	{r4, lr}
   d4ad2:	4604      	mov	r4, r0
   d4ad4:	4608      	mov	r0, r1
{
    _spi = spi;
   d4ad6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4ad8:	f7ff feb0 	bl	d483c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4adc:	2300      	movs	r3, #0
   d4ade:	6063      	str	r3, [r4, #4]
}
   d4ae0:	4620      	mov	r0, r4
   d4ae2:	bd10      	pop	{r4, pc}

000d4ae4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4ae4:	b510      	push	{r4, lr}
   d4ae6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4ae8:	6800      	ldr	r0, [r0, #0]
   d4aea:	b118      	cbz	r0, d4af4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4aec:	f7ff ff92 	bl	d4a14 <free>
            wakeupSource_ = nullptr;
   d4af0:	2300      	movs	r3, #0
   d4af2:	6023      	str	r3, [r4, #0]
        }
    }
   d4af4:	bd10      	pop	{r4, pc}

000d4af6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4af6:	b510      	push	{r4, lr}
   d4af8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4afa:	f7ff fff3 	bl	d4ae4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4afe:	4620      	mov	r0, r4
   d4b00:	bd10      	pop	{r4, pc}
	...

000d4b04 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4b04:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4b06:	4b09      	ldr	r3, [pc, #36]	; (d4b2c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4b08:	4c09      	ldr	r4, [pc, #36]	; (d4b30 <_GLOBAL__sub_I_System+0x2c>)
   d4b0a:	2202      	movs	r2, #2
   d4b0c:	2000      	movs	r0, #0
   d4b0e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4b10:	4b08      	ldr	r3, [pc, #32]	; (d4b34 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4b12:	6020      	str	r0, [r4, #0]
   d4b14:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4b16:	71a0      	strb	r0, [r4, #6]
   d4b18:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b1a:	f7ff fedf 	bl	d48dc <set_system_mode>
SystemClass System;
   d4b1e:	4620      	mov	r0, r4
   d4b20:	4a05      	ldr	r2, [pc, #20]	; (d4b38 <_GLOBAL__sub_I_System+0x34>)
   d4b22:	4906      	ldr	r1, [pc, #24]	; (d4b3c <_GLOBAL__sub_I_System+0x38>)
   d4b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4b28:	f000 bce8 	b.w	d54fc <__aeabi_atexit>
   d4b2c:	2003e658 	.word	0x2003e658
   d4b30:	2003e64c 	.word	0x2003e64c
   d4b34:	ffff0000 	.word	0xffff0000
   d4b38:	2003e5e8 	.word	0x2003e5e8
   d4b3c:	000d4af7 	.word	0x000d4af7

000d4b40 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4b40:	b510      	push	{r4, lr}
   d4b42:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4b44:	6800      	ldr	r0, [r0, #0]
   d4b46:	b108      	cbz	r0, d4b4c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4b48:	f7ff fde8 	bl	d471c <os_mutex_recursive_destroy>
    }
   d4b4c:	4620      	mov	r0, r4
   d4b4e:	bd10      	pop	{r4, pc}

000d4b50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4b50:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4b52:	4c06      	ldr	r4, [pc, #24]	; (d4b6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4b54:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4b56:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4b58:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4b5a:	f7ff fdd7 	bl	d470c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4b5e:	4620      	mov	r0, r4
   d4b60:	4a03      	ldr	r2, [pc, #12]	; (d4b70 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4b62:	4904      	ldr	r1, [pc, #16]	; (d4b74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4b68:	f000 bcc8 	b.w	d54fc <__aeabi_atexit>
   d4b6c:	2003e65c 	.word	0x2003e65c
   d4b70:	2003e5e8 	.word	0x2003e5e8
   d4b74:	000d4b41 	.word	0x000d4b41

000d4b78 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b7a:	4606      	mov	r6, r0
   d4b7c:	460d      	mov	r5, r1
  size_t n = 0;
   d4b7e:	188f      	adds	r7, r1, r2
   d4b80:	2400      	movs	r4, #0
  while (size--) {
   d4b82:	42bd      	cmp	r5, r7
   d4b84:	d00c      	beq.n	d4ba0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4b86:	6833      	ldr	r3, [r6, #0]
   d4b88:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4b8c:	689b      	ldr	r3, [r3, #8]
   d4b8e:	4630      	mov	r0, r6
   d4b90:	4798      	blx	r3
     if (chunk>=0)
   d4b92:	1e03      	subs	r3, r0, #0
   d4b94:	db01      	blt.n	d4b9a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4b96:	441c      	add	r4, r3
  while (size--) {
   d4b98:	e7f3      	b.n	d4b82 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4b9a:	2c00      	cmp	r4, #0
   d4b9c:	bf08      	it	eq
   d4b9e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4ba0:	4620      	mov	r0, r4
   d4ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ba4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4ba4:	b513      	push	{r0, r1, r4, lr}
   d4ba6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4ba8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4baa:	b159      	cbz	r1, d4bc4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4bac:	9101      	str	r1, [sp, #4]
   d4bae:	f001 f8f1 	bl	d5d94 <strlen>
   d4bb2:	6823      	ldr	r3, [r4, #0]
   d4bb4:	9901      	ldr	r1, [sp, #4]
   d4bb6:	68db      	ldr	r3, [r3, #12]
   d4bb8:	4602      	mov	r2, r0
   d4bba:	4620      	mov	r0, r4
    }
   d4bbc:	b002      	add	sp, #8
   d4bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4bc2:	4718      	bx	r3
    }
   d4bc4:	b002      	add	sp, #8
   d4bc6:	bd10      	pop	{r4, pc}

000d4bc8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4bc8:	6803      	ldr	r3, [r0, #0]
   d4bca:	689b      	ldr	r3, [r3, #8]
   d4bcc:	4718      	bx	r3

000d4bce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4bce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4bd0:	210d      	movs	r1, #13
{
   d4bd2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4bd4:	f7ff fff8 	bl	d4bc8 <_ZN5Print5printEc>
  n += print('\n');
   d4bd8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4bda:	4604      	mov	r4, r0
  n += print('\n');
   d4bdc:	4628      	mov	r0, r5
   d4bde:	f7ff fff3 	bl	d4bc8 <_ZN5Print5printEc>
  return n;
}
   d4be2:	4420      	add	r0, r4
   d4be4:	bd38      	pop	{r3, r4, r5, pc}

000d4be6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4be6:	b538      	push	{r3, r4, r5, lr}
   d4be8:	4605      	mov	r5, r0
  return write(str);
   d4bea:	f7ff ffdb 	bl	d4ba4 <_ZN5Print5writeEPKc>
   d4bee:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4bf0:	4628      	mov	r0, r5
   d4bf2:	f7ff ffec 	bl	d4bce <_ZN5Print7printlnEv>
  return n;
}
   d4bf6:	4420      	add	r0, r4
   d4bf8:	bd38      	pop	{r3, r4, r5, pc}

000d4bfa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4bfa:	b530      	push	{r4, r5, lr}
   d4bfc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4bfe:	2300      	movs	r3, #0
   d4c00:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4c04:	2a01      	cmp	r2, #1
   d4c06:	bf98      	it	ls
   d4c08:	220a      	movls	r2, #10
   d4c0a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4c0c:	460d      	mov	r5, r1
   d4c0e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4c12:	fb01 5312 	mls	r3, r1, r2, r5
   d4c16:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4c1a:	2b09      	cmp	r3, #9
   d4c1c:	bf94      	ite	ls
   d4c1e:	3330      	addls	r3, #48	; 0x30
   d4c20:	3337      	addhi	r3, #55	; 0x37
   d4c22:	b2db      	uxtb	r3, r3
  } while(n);
   d4c24:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4c26:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4c2a:	d9ef      	bls.n	d4c0c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4c2c:	4621      	mov	r1, r4
   d4c2e:	f7ff ffb9 	bl	d4ba4 <_ZN5Print5writeEPKc>
}
   d4c32:	b00b      	add	sp, #44	; 0x2c
   d4c34:	bd30      	pop	{r4, r5, pc}

000d4c36 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d4c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4c3a:	b086      	sub	sp, #24
   d4c3c:	af00      	add	r7, sp, #0
   d4c3e:	4605      	mov	r5, r0
   d4c40:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d4c42:	1d38      	adds	r0, r7, #4
   d4c44:	2114      	movs	r1, #20
{
   d4c46:	4614      	mov	r4, r2
    va_copy(args2, args);
   d4c48:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d4c4a:	f7ff feeb 	bl	d4a24 <vsnprintf>

    if (n<bufsize)
   d4c4e:	2813      	cmp	r0, #19
   d4c50:	d80e      	bhi.n	d4c70 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d4c52:	1d39      	adds	r1, r7, #4
   d4c54:	4628      	mov	r0, r5
   d4c56:	f7ff ffa5 	bl	d4ba4 <_ZN5Print5writeEPKc>
   d4c5a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d4c5c:	b11e      	cbz	r6, d4c66 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d4c5e:	4628      	mov	r0, r5
   d4c60:	f7ff ffb5 	bl	d4bce <_ZN5Print7printlnEv>
   d4c64:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d4c66:	4620      	mov	r0, r4
   d4c68:	3718      	adds	r7, #24
   d4c6a:	46bd      	mov	sp, r7
   d4c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d4c70:	f100 0308 	add.w	r3, r0, #8
   d4c74:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d4c78:	46e8      	mov	r8, sp
        char bigger[n+1];
   d4c7a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d4c7e:	4622      	mov	r2, r4
   d4c80:	1c41      	adds	r1, r0, #1
   d4c82:	683b      	ldr	r3, [r7, #0]
   d4c84:	4668      	mov	r0, sp
   d4c86:	f7ff fecd 	bl	d4a24 <vsnprintf>
  return write(str);
   d4c8a:	4669      	mov	r1, sp
   d4c8c:	4628      	mov	r0, r5
   d4c8e:	f7ff ff89 	bl	d4ba4 <_ZN5Print5writeEPKc>
   d4c92:	4604      	mov	r4, r0
   d4c94:	46c5      	mov	sp, r8
   d4c96:	e7e1      	b.n	d4c5c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d4c98 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4c98:	4b01      	ldr	r3, [pc, #4]	; (d4ca0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4c9a:	4a02      	ldr	r2, [pc, #8]	; (d4ca4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4c9c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4c9e:	4770      	bx	lr
   d4ca0:	2003e660 	.word	0x2003e660
   d4ca4:	000d5f78 	.word	0x000d5f78

000d4ca8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4ca8:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4caa:	681a      	ldr	r2, [r3, #0]
   d4cac:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4cae:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4cb0:	4770      	bx	lr
   d4cb2:	bf00      	nop
   d4cb4:	2003e580 	.word	0x2003e580
   d4cb8:	2003e664 	.word	0x2003e664

000d4cbc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4cbc:	b510      	push	{r4, lr}
   d4cbe:	4604      	mov	r4, r0
   d4cc0:	f7ff fa2a 	bl	d4118 <_ZNSt14_Function_baseD1Ev>
   d4cc4:	4620      	mov	r0, r4
   d4cc6:	bd10      	pop	{r4, pc}

000d4cc8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4cc8:	4803      	ldr	r0, [pc, #12]	; (d4cd8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4cca:	4a04      	ldr	r2, [pc, #16]	; (d4cdc <_GLOBAL__sub_I_RGB+0x14>)
   d4ccc:	4904      	ldr	r1, [pc, #16]	; (d4ce0 <_GLOBAL__sub_I_RGB+0x18>)
   d4cce:	2300      	movs	r3, #0
   d4cd0:	6083      	str	r3, [r0, #8]
   d4cd2:	f000 bc13 	b.w	d54fc <__aeabi_atexit>
   d4cd6:	bf00      	nop
   d4cd8:	2003e668 	.word	0x2003e668
   d4cdc:	2003e5e8 	.word	0x2003e5e8
   d4ce0:	000d4cbd 	.word	0x000d4cbd

000d4ce4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4ce4:	4b01      	ldr	r3, [pc, #4]	; (d4cec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4ce6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4ce8:	4770      	bx	lr
   d4cea:	bf00      	nop
   d4cec:	2003e584 	.word	0x2003e584

000d4cf0 <serialEventRun>:
{
   d4cf0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4cf2:	4b0b      	ldr	r3, [pc, #44]	; (d4d20 <serialEventRun+0x30>)
   d4cf4:	b143      	cbz	r3, d4d08 <serialEventRun+0x18>
   d4cf6:	f000 f959 	bl	d4fac <_Z16_fetch_usbserialv>
   d4cfa:	6803      	ldr	r3, [r0, #0]
   d4cfc:	691b      	ldr	r3, [r3, #16]
   d4cfe:	4798      	blx	r3
   d4d00:	2800      	cmp	r0, #0
   d4d02:	dd01      	ble.n	d4d08 <serialEventRun+0x18>
        serialEvent();
   d4d04:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4d08:	4b06      	ldr	r3, [pc, #24]	; (d4d24 <serialEventRun+0x34>)
   d4d0a:	b143      	cbz	r3, d4d1e <serialEventRun+0x2e>
   d4d0c:	f000 f9f8 	bl	d5100 <_Z22__fetch_global_Serial1v>
   d4d10:	6803      	ldr	r3, [r0, #0]
   d4d12:	691b      	ldr	r3, [r3, #16]
   d4d14:	4798      	blx	r3
   d4d16:	2800      	cmp	r0, #0
   d4d18:	dd01      	ble.n	d4d1e <serialEventRun+0x2e>
        serialEvent1();
   d4d1a:	f3af 8000 	nop.w
}
   d4d1e:	bd08      	pop	{r3, pc}
	...

000d4d28 <_post_loop>:
{
   d4d28:	b508      	push	{r3, lr}
	serialEventRun();
   d4d2a:	f7ff ffe1 	bl	d4cf0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4d2e:	f7ff fcb5 	bl	d469c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4d32:	4b01      	ldr	r3, [pc, #4]	; (d4d38 <_post_loop+0x10>)
   d4d34:	6018      	str	r0, [r3, #0]
}
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	2003e7d4 	.word	0x2003e7d4

000d4d3c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4d3c:	4802      	ldr	r0, [pc, #8]	; (d4d48 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4d3e:	4a03      	ldr	r2, [pc, #12]	; (d4d4c <_Z33system_initialize_user_backup_ramv+0x10>)
   d4d40:	4903      	ldr	r1, [pc, #12]	; (d4d50 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4d42:	1a12      	subs	r2, r2, r0
   d4d44:	f000 bfec 	b.w	d5d20 <memcpy>
   d4d48:	2003f400 	.word	0x2003f400
   d4d4c:	2003f404 	.word	0x2003f404
   d4d50:	000d60e0 	.word	0x000d60e0

000d4d54 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4d54:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4d56:	2300      	movs	r3, #0
   d4d58:	9300      	str	r3, [sp, #0]
   d4d5a:	461a      	mov	r2, r3
   d4d5c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4d60:	f7ff fdd6 	bl	d4910 <system_ctrl_set_result>
}
   d4d64:	b003      	add	sp, #12
   d4d66:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4d6c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4d6c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4d6e:	8843      	ldrh	r3, [r0, #2]
   d4d70:	2b0a      	cmp	r3, #10
   d4d72:	d008      	beq.n	d4d86 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4d74:	2b50      	cmp	r3, #80	; 0x50
   d4d76:	d10b      	bne.n	d4d90 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4d78:	4b09      	ldr	r3, [pc, #36]	; (d4da0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4d7a:	681b      	ldr	r3, [r3, #0]
   d4d7c:	b14b      	cbz	r3, d4d92 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4d7e:	b003      	add	sp, #12
   d4d80:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4d84:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4d86:	f7ff ffe5 	bl	d4d54 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4d8a:	b003      	add	sp, #12
   d4d8c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4d90:	2300      	movs	r3, #0
   d4d92:	9300      	str	r3, [sp, #0]
   d4d94:	461a      	mov	r2, r3
   d4d96:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4d9a:	f7ff fdb9 	bl	d4910 <system_ctrl_set_result>
}
   d4d9e:	e7f4      	b.n	d4d8a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4da0:	2003e67c 	.word	0x2003e67c

000d4da4 <module_user_init_hook>:
{
   d4da4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4da6:	4c12      	ldr	r4, [pc, #72]	; (d4df0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4da8:	4812      	ldr	r0, [pc, #72]	; (d4df4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4daa:	4d13      	ldr	r5, [pc, #76]	; (d4df8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4dac:	2100      	movs	r1, #0
   d4dae:	f7ff fe49 	bl	d4a44 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4db2:	6823      	ldr	r3, [r4, #0]
   d4db4:	42ab      	cmp	r3, r5
   d4db6:	4b11      	ldr	r3, [pc, #68]	; (d4dfc <module_user_init_hook+0x58>)
   d4db8:	bf0c      	ite	eq
   d4dba:	2201      	moveq	r2, #1
   d4dbc:	2200      	movne	r2, #0
   d4dbe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4dc0:	d002      	beq.n	d4dc8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4dc2:	f7ff ffbb 	bl	d4d3c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4dc6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4dc8:	f7ff fc58 	bl	d467c <HAL_RNG_GetRandomNumber>
   d4dcc:	4604      	mov	r4, r0
    srand(seed);
   d4dce:	f000 ffbd 	bl	d5d4c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4dd2:	4b0b      	ldr	r3, [pc, #44]	; (d4e00 <module_user_init_hook+0x5c>)
   d4dd4:	b113      	cbz	r3, d4ddc <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4dd6:	4620      	mov	r0, r4
   d4dd8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4ddc:	2100      	movs	r1, #0
   d4dde:	4808      	ldr	r0, [pc, #32]	; (d4e00 <module_user_init_hook+0x5c>)
   d4de0:	f7ff fe08 	bl	d49f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4de8:	4806      	ldr	r0, [pc, #24]	; (d4e04 <module_user_init_hook+0x60>)
   d4dea:	2100      	movs	r1, #0
   d4dec:	f7ff bd86 	b.w	d48fc <system_ctrl_set_app_request_handler>
   d4df0:	2003f400 	.word	0x2003f400
   d4df4:	000d4ce5 	.word	0x000d4ce5
   d4df8:	9a271c1e 	.word	0x9a271c1e
   d4dfc:	2003e678 	.word	0x2003e678
   d4e00:	00000000 	.word	0x00000000
   d4e04:	000d4d6d 	.word	0x000d4d6d

000d4e08 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4e08:	4770      	bx	lr

000d4e0a <_ZN9IPAddressD0Ev>:
   d4e0a:	b510      	push	{r4, lr}
   d4e0c:	2118      	movs	r1, #24
   d4e0e:	4604      	mov	r4, r0
   d4e10:	f000 fb79 	bl	d5506 <_ZdlPvj>
   d4e14:	4620      	mov	r0, r4
   d4e16:	bd10      	pop	{r4, pc}

000d4e18 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e18:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4e1a:	7d03      	ldrb	r3, [r0, #20]
   d4e1c:	2b06      	cmp	r3, #6
{
   d4e1e:	b08d      	sub	sp, #52	; 0x34
   d4e20:	460e      	mov	r6, r1
   d4e22:	f100 0704 	add.w	r7, r0, #4
   d4e26:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4e2a:	d012      	beq.n	d4e52 <_ZNK9IPAddress7printToER5Print+0x3a>
   d4e2c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4e30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4e34:	220a      	movs	r2, #10
   d4e36:	4630      	mov	r0, r6
   d4e38:	f7ff fedf 	bl	d4bfa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4e3c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4e3e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4e40:	d019      	beq.n	d4e76 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4e42:	2c00      	cmp	r4, #0
   d4e44:	d0f4      	beq.n	d4e30 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4e46:	212e      	movs	r1, #46	; 0x2e
   d4e48:	4630      	mov	r0, r6
   d4e4a:	f7ff febd 	bl	d4bc8 <_ZN5Print5printEc>
   d4e4e:	4404      	add	r4, r0
   d4e50:	e7ee      	b.n	d4e30 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e52:	232f      	movs	r3, #47	; 0x2f
   d4e54:	466a      	mov	r2, sp
   d4e56:	4639      	mov	r1, r7
   d4e58:	200a      	movs	r0, #10
		buf[0] = 0;
   d4e5a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e5e:	f7ff fc6d 	bl	d473c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4e62:	4668      	mov	r0, sp
   d4e64:	f000 ff96 	bl	d5d94 <strlen>
   d4e68:	6833      	ldr	r3, [r6, #0]
   d4e6a:	4602      	mov	r2, r0
   d4e6c:	68db      	ldr	r3, [r3, #12]
   d4e6e:	4669      	mov	r1, sp
   d4e70:	4630      	mov	r0, r6
   d4e72:	4798      	blx	r3
   d4e74:	4604      	mov	r4, r0
    }
    return n;
}
   d4e76:	4620      	mov	r0, r4
   d4e78:	b00d      	add	sp, #52	; 0x34
   d4e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4e7c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4e7c:	b510      	push	{r4, lr}
   d4e7e:	4b05      	ldr	r3, [pc, #20]	; (d4e94 <_ZN9IPAddressC1Ev+0x18>)
   d4e80:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4e82:	2211      	movs	r2, #17
   d4e84:	f840 3b04 	str.w	r3, [r0], #4
   d4e88:	2100      	movs	r1, #0
   d4e8a:	f000 ff57 	bl	d5d3c <memset>
}
   d4e8e:	4620      	mov	r0, r4
   d4e90:	bd10      	pop	{r4, pc}
   d4e92:	bf00      	nop
   d4e94:	000d5fa0 	.word	0x000d5fa0

000d4e98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4e98:	4603      	mov	r3, r0
   d4e9a:	4a07      	ldr	r2, [pc, #28]	; (d4eb8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4e9c:	b510      	push	{r4, lr}
   d4e9e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4ea2:	f101 0210 	add.w	r2, r1, #16
   d4ea6:	f851 4b04 	ldr.w	r4, [r1], #4
   d4eaa:	f843 4b04 	str.w	r4, [r3], #4
   d4eae:	4291      	cmp	r1, r2
   d4eb0:	d1f9      	bne.n	d4ea6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4eb2:	780a      	ldrb	r2, [r1, #0]
   d4eb4:	701a      	strb	r2, [r3, #0]
}
   d4eb6:	bd10      	pop	{r4, pc}
   d4eb8:	000d5fa0 	.word	0x000d5fa0

000d4ebc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4ebc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4ebe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4ec2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4ec6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4eca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4ece:	2304      	movs	r3, #4
   d4ed0:	6041      	str	r1, [r0, #4]
   d4ed2:	7503      	strb	r3, [r0, #20]
}
   d4ed4:	bd10      	pop	{r4, pc}

000d4ed6 <_ZN9IPAddressaSEPKh>:
{
   d4ed6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4ed8:	78cb      	ldrb	r3, [r1, #3]
   d4eda:	9300      	str	r3, [sp, #0]
   d4edc:	788b      	ldrb	r3, [r1, #2]
   d4ede:	784a      	ldrb	r2, [r1, #1]
   d4ee0:	7809      	ldrb	r1, [r1, #0]
   d4ee2:	f7ff ffeb 	bl	d4ebc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4ee6:	b002      	add	sp, #8
   d4ee8:	bd10      	pop	{r4, pc}

000d4eea <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4eea:	7441      	strb	r1, [r0, #17]
}
   d4eec:	4770      	bx	lr

000d4eee <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4eee:	4770      	bx	lr

000d4ef0 <_ZN9USBSerial4readEv>:
{
   d4ef0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4ef2:	2100      	movs	r1, #0
   d4ef4:	7c00      	ldrb	r0, [r0, #16]
   d4ef6:	f7ff fcd1 	bl	d489c <HAL_USB_USART_Receive_Data>
}
   d4efa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4efe:	bd08      	pop	{r3, pc}

000d4f00 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d4f00:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4f02:	2101      	movs	r1, #1
   d4f04:	7c00      	ldrb	r0, [r0, #16]
   d4f06:	f7ff fcc9 	bl	d489c <HAL_USB_USART_Receive_Data>
}
   d4f0a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4f0e:	bd08      	pop	{r3, pc}

000d4f10 <_ZN9USBSerial17availableForWriteEv>:
{
   d4f10:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4f12:	7c00      	ldrb	r0, [r0, #16]
   d4f14:	f7ff fcba 	bl	d488c <HAL_USB_USART_Available_Data_For_Write>
}
   d4f18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f1c:	bd08      	pop	{r3, pc}

000d4f1e <_ZN9USBSerial9availableEv>:
{
   d4f1e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4f20:	7c00      	ldrb	r0, [r0, #16]
   d4f22:	f7ff fcab 	bl	d487c <HAL_USB_USART_Available_Data>
}
   d4f26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f2a:	bd08      	pop	{r3, pc}

000d4f2c <_ZN9USBSerial5writeEh>:
{
   d4f2c:	b513      	push	{r0, r1, r4, lr}
   d4f2e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f30:	7c00      	ldrb	r0, [r0, #16]
{
   d4f32:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f34:	f7ff fcaa 	bl	d488c <HAL_USB_USART_Available_Data_For_Write>
   d4f38:	2800      	cmp	r0, #0
   d4f3a:	9901      	ldr	r1, [sp, #4]
   d4f3c:	dc01      	bgt.n	d4f42 <_ZN9USBSerial5writeEh+0x16>
   d4f3e:	7c60      	ldrb	r0, [r4, #17]
   d4f40:	b120      	cbz	r0, d4f4c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4f42:	7c20      	ldrb	r0, [r4, #16]
   d4f44:	f7ff fcb2 	bl	d48ac <HAL_USB_USART_Send_Data>
   d4f48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d4f4c:	b002      	add	sp, #8
   d4f4e:	bd10      	pop	{r4, pc}

000d4f50 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d4f50:	7c00      	ldrb	r0, [r0, #16]
   d4f52:	f7ff bcb3 	b.w	d48bc <HAL_USB_USART_Flush_Data>

000d4f56 <_ZN9USBSerialD0Ev>:
   d4f56:	b510      	push	{r4, lr}
   d4f58:	2114      	movs	r1, #20
   d4f5a:	4604      	mov	r4, r0
   d4f5c:	f000 fad3 	bl	d5506 <_ZdlPvj>
   d4f60:	4620      	mov	r0, r4
   d4f62:	bd10      	pop	{r4, pc}

000d4f64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4f64:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4f6a:	4604      	mov	r4, r0
   d4f6c:	4608      	mov	r0, r1
   d4f6e:	2100      	movs	r1, #0
   d4f70:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4f74:	4b04      	ldr	r3, [pc, #16]	; (d4f88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4f76:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d4f78:	2301      	movs	r3, #1
  _serial = serial;
   d4f7a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4f7c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d4f7e:	4611      	mov	r1, r2
   d4f80:	f7ff fc6c 	bl	d485c <HAL_USB_USART_Init>
}
   d4f84:	4620      	mov	r0, r4
   d4f86:	bd10      	pop	{r4, pc}
   d4f88:	000d5fb4 	.word	0x000d5fb4

000d4f8c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4f8c:	7c00      	ldrb	r0, [r0, #16]
   d4f8e:	2200      	movs	r2, #0
   d4f90:	f7ff bc6c 	b.w	d486c <HAL_USB_USART_Begin>

000d4f94 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   d4f94:	7c00      	ldrb	r0, [r0, #16]
   d4f96:	f7ff bc99 	b.w	d48cc <HAL_USB_USART_Is_Connected>

000d4f9a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4f9a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4f9c:	2214      	movs	r2, #20
{
   d4f9e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4fa0:	2100      	movs	r1, #0
   d4fa2:	f000 fecb 	bl	d5d3c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4fa6:	4620      	mov	r0, r4
   d4fa8:	bd10      	pop	{r4, pc}
	...

000d4fac <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4fac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4fae:	4c10      	ldr	r4, [pc, #64]	; (d4ff0 <_Z16_fetch_usbserialv+0x44>)
{
   d4fb0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4fb2:	a803      	add	r0, sp, #12
   d4fb4:	f7ff fff1 	bl	d4f9a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4fb8:	7821      	ldrb	r1, [r4, #0]
   d4fba:	f3bf 8f5b 	dmb	ish
   d4fbe:	f011 0101 	ands.w	r1, r1, #1
   d4fc2:	d111      	bne.n	d4fe8 <_Z16_fetch_usbserialv+0x3c>
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	9101      	str	r1, [sp, #4]
   d4fc8:	f7ff f86b 	bl	d40a2 <__cxa_guard_acquire>
   d4fcc:	9901      	ldr	r1, [sp, #4]
   d4fce:	b158      	cbz	r0, d4fe8 <_Z16_fetch_usbserialv+0x3c>
   d4fd0:	aa03      	add	r2, sp, #12
   d4fd2:	4808      	ldr	r0, [pc, #32]	; (d4ff4 <_Z16_fetch_usbserialv+0x48>)
   d4fd4:	f7ff ffc6 	bl	d4f64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4fd8:	4620      	mov	r0, r4
   d4fda:	f7ff f867 	bl	d40ac <__cxa_guard_release>
   d4fde:	4a06      	ldr	r2, [pc, #24]	; (d4ff8 <_Z16_fetch_usbserialv+0x4c>)
   d4fe0:	4906      	ldr	r1, [pc, #24]	; (d4ffc <_Z16_fetch_usbserialv+0x50>)
   d4fe2:	4804      	ldr	r0, [pc, #16]	; (d4ff4 <_Z16_fetch_usbserialv+0x48>)
   d4fe4:	f000 fa8a 	bl	d54fc <__aeabi_atexit>
	return _usbserial;
}
   d4fe8:	4802      	ldr	r0, [pc, #8]	; (d4ff4 <_Z16_fetch_usbserialv+0x48>)
   d4fea:	b008      	add	sp, #32
   d4fec:	bd10      	pop	{r4, pc}
   d4fee:	bf00      	nop
   d4ff0:	2003e680 	.word	0x2003e680
   d4ff4:	2003e684 	.word	0x2003e684
   d4ff8:	2003e5e8 	.word	0x2003e5e8
   d4ffc:	000d4eef 	.word	0x000d4eef

000d5000 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d5000:	4700      	bx	r0
	...

000d5004 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d5004:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d5008:	2400      	movs	r4, #0
{
   d500a:	461d      	mov	r5, r3
   d500c:	460f      	mov	r7, r1
   d500e:	4690      	mov	r8, r2
   d5010:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d5012:	f7ff fb2b 	bl	d466c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d5016:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5018:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d501c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5020:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d5024:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d5028:	bfa2      	ittt	ge
   d502a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d502e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d5032:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5034:	4907      	ldr	r1, [pc, #28]	; (d5054 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d5036:	9400      	str	r4, [sp, #0]
   d5038:	4643      	mov	r3, r8
   d503a:	463a      	mov	r2, r7
   d503c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d503e:	bfa8      	it	ge
   d5040:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5044:	f7ff fb0a 	bl	d465c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d5048:	fab0 f080 	clz	r0, r0
   d504c:	0940      	lsrs	r0, r0, #5
   d504e:	b004      	add	sp, #16
   d5050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5054:	000d5001 	.word	0x000d5001

000d5058 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5058:	4770      	bx	lr

000d505a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d505a:	7441      	strb	r1, [r0, #17]
}
   d505c:	4770      	bx	lr

000d505e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d505e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5060:	7c00      	ldrb	r0, [r0, #16]
   d5062:	f7ff fbab 	bl	d47bc <hal_usart_available_data_for_write>
}
   d5066:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d506a:	bd08      	pop	{r3, pc}

000d506c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d506c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d506e:	7c00      	ldrb	r0, [r0, #16]
   d5070:	f7ff fb7c 	bl	d476c <hal_usart_available>
}
   d5074:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5078:	bd08      	pop	{r3, pc}

000d507a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d507a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d507c:	7c00      	ldrb	r0, [r0, #16]
   d507e:	f7ff fb85 	bl	d478c <hal_usart_peek>
}
   d5082:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5086:	bd08      	pop	{r3, pc}

000d5088 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5088:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d508a:	7c00      	ldrb	r0, [r0, #16]
   d508c:	f7ff fb76 	bl	d477c <hal_usart_read>
}
   d5090:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5094:	bd08      	pop	{r3, pc}

000d5096 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5096:	7c00      	ldrb	r0, [r0, #16]
   d5098:	f7ff bb80 	b.w	d479c <hal_usart_flush>

000d509c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d509c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d509e:	7c45      	ldrb	r5, [r0, #17]
{
   d50a0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d50a2:	b12d      	cbz	r5, d50b0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d50a4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d50a6:	b003      	add	sp, #12
   d50a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d50ac:	f7ff bb56 	b.w	d475c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d50b0:	7c00      	ldrb	r0, [r0, #16]
   d50b2:	9101      	str	r1, [sp, #4]
   d50b4:	f7ff fb82 	bl	d47bc <hal_usart_available_data_for_write>
   d50b8:	2800      	cmp	r0, #0
   d50ba:	9901      	ldr	r1, [sp, #4]
   d50bc:	dcf2      	bgt.n	d50a4 <_ZN11USARTSerial5writeEh+0x8>
}
   d50be:	4628      	mov	r0, r5
   d50c0:	b003      	add	sp, #12
   d50c2:	bd30      	pop	{r4, r5, pc}

000d50c4 <_ZN11USARTSerialD0Ev>:
   d50c4:	b510      	push	{r4, lr}
   d50c6:	2114      	movs	r1, #20
   d50c8:	4604      	mov	r4, r0
   d50ca:	f000 fa1c 	bl	d5506 <_ZdlPvj>
   d50ce:	4620      	mov	r0, r4
   d50d0:	bd10      	pop	{r4, pc}
	...

000d50d4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d50d4:	b510      	push	{r4, lr}
   d50d6:	f04f 0c00 	mov.w	ip, #0
   d50da:	4604      	mov	r4, r0
   d50dc:	4608      	mov	r0, r1
   d50de:	4611      	mov	r1, r2
   d50e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d50e4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d50e8:	4a04      	ldr	r2, [pc, #16]	; (d50fc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d50ea:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d50ec:	2201      	movs	r2, #1
  _serial = serial;
   d50ee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d50f0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d50f2:	461a      	mov	r2, r3
   d50f4:	f7ff fb2a 	bl	d474c <hal_usart_init>
}
   d50f8:	4620      	mov	r0, r4
   d50fa:	bd10      	pop	{r4, pc}
   d50fc:	000d5fe4 	.word	0x000d5fe4

000d5100 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5100:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5102:	4c0e      	ldr	r4, [pc, #56]	; (d513c <_Z22__fetch_global_Serial1v+0x3c>)
   d5104:	7821      	ldrb	r1, [r4, #0]
   d5106:	f3bf 8f5b 	dmb	ish
   d510a:	f011 0101 	ands.w	r1, r1, #1
   d510e:	d112      	bne.n	d5136 <_Z22__fetch_global_Serial1v+0x36>
   d5110:	4620      	mov	r0, r4
   d5112:	9101      	str	r1, [sp, #4]
   d5114:	f7fe ffc5 	bl	d40a2 <__cxa_guard_acquire>
   d5118:	9901      	ldr	r1, [sp, #4]
   d511a:	b160      	cbz	r0, d5136 <_Z22__fetch_global_Serial1v+0x36>
   d511c:	4a08      	ldr	r2, [pc, #32]	; (d5140 <_Z22__fetch_global_Serial1v+0x40>)
   d511e:	4b09      	ldr	r3, [pc, #36]	; (d5144 <_Z22__fetch_global_Serial1v+0x44>)
   d5120:	4809      	ldr	r0, [pc, #36]	; (d5148 <_Z22__fetch_global_Serial1v+0x48>)
   d5122:	f7ff ffd7 	bl	d50d4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5126:	4620      	mov	r0, r4
   d5128:	f7fe ffc0 	bl	d40ac <__cxa_guard_release>
   d512c:	4a07      	ldr	r2, [pc, #28]	; (d514c <_Z22__fetch_global_Serial1v+0x4c>)
   d512e:	4908      	ldr	r1, [pc, #32]	; (d5150 <_Z22__fetch_global_Serial1v+0x50>)
   d5130:	4805      	ldr	r0, [pc, #20]	; (d5148 <_Z22__fetch_global_Serial1v+0x48>)
   d5132:	f000 f9e3 	bl	d54fc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5136:	4804      	ldr	r0, [pc, #16]	; (d5148 <_Z22__fetch_global_Serial1v+0x48>)
   d5138:	b002      	add	sp, #8
   d513a:	bd10      	pop	{r4, pc}
   d513c:	2003e698 	.word	0x2003e698
   d5140:	2003e69c 	.word	0x2003e69c
   d5144:	2003e720 	.word	0x2003e720
   d5148:	2003e7a4 	.word	0x2003e7a4
   d514c:	2003e5e8 	.word	0x2003e5e8
   d5150:	000d5059 	.word	0x000d5059

000d5154 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5154:	4770      	bx	lr

000d5156 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5158:	4606      	mov	r6, r0
   d515a:	4615      	mov	r5, r2
   d515c:	460c      	mov	r4, r1
   d515e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5160:	42bc      	cmp	r4, r7
   d5162:	d006      	beq.n	d5172 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5164:	6833      	ldr	r3, [r6, #0]
   d5166:	f814 1b01 	ldrb.w	r1, [r4], #1
   d516a:	689b      	ldr	r3, [r3, #8]
   d516c:	4630      	mov	r0, r6
   d516e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5170:	e7f6      	b.n	d5160 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5172:	4628      	mov	r0, r5
   d5174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5176 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5176:	7c00      	ldrb	r0, [r0, #16]
   d5178:	2200      	movs	r2, #0
   d517a:	f7ff bb27 	b.w	d47cc <hal_i2c_write>

000d517e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d517e:	7c00      	ldrb	r0, [r0, #16]
   d5180:	2100      	movs	r1, #0
   d5182:	f7ff bb2b 	b.w	d47dc <hal_i2c_available>

000d5186 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5186:	7c00      	ldrb	r0, [r0, #16]
   d5188:	2100      	movs	r1, #0
   d518a:	f7ff bb2f 	b.w	d47ec <hal_i2c_read>

000d518e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d518e:	7c00      	ldrb	r0, [r0, #16]
   d5190:	2100      	movs	r1, #0
   d5192:	f7ff bb33 	b.w	d47fc <hal_i2c_peek>

000d5196 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5196:	7c00      	ldrb	r0, [r0, #16]
   d5198:	2100      	movs	r1, #0
   d519a:	f7ff bb37 	b.w	d480c <hal_i2c_flush>

000d519e <_ZN7TwoWireD0Ev>:
   d519e:	b510      	push	{r4, lr}
   d51a0:	2114      	movs	r1, #20
   d51a2:	4604      	mov	r4, r0
   d51a4:	f000 f9af 	bl	d5506 <_ZdlPvj>
   d51a8:	4620      	mov	r0, r4
   d51aa:	bd10      	pop	{r4, pc}

000d51ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d51ac:	b510      	push	{r4, lr}
   d51ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d51b2:	4604      	mov	r4, r0
   d51b4:	4608      	mov	r0, r1
   d51b6:	2100      	movs	r1, #0
   d51b8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d51bc:	4b03      	ldr	r3, [pc, #12]	; (d51cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d51be:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d51c0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d51c2:	4611      	mov	r1, r2
   d51c4:	f7ff fb32 	bl	d482c <hal_i2c_init>
}
   d51c8:	4620      	mov	r0, r4
   d51ca:	bd10      	pop	{r4, pc}
   d51cc:	000d6014 	.word	0x000d6014

000d51d0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d51d0:	2200      	movs	r2, #0
   d51d2:	6840      	ldr	r0, [r0, #4]
   d51d4:	4611      	mov	r1, r2
   d51d6:	f7ff bbbd 	b.w	d4954 <network_ready>

000d51da <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d51da:	2200      	movs	r2, #0
   d51dc:	6840      	ldr	r0, [r0, #4]
   d51de:	4611      	mov	r1, r2
   d51e0:	f7ff bbd8 	b.w	d4994 <network_listening>

000d51e4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d51e4:	2200      	movs	r2, #0
   d51e6:	6840      	ldr	r0, [r0, #4]
   d51e8:	4611      	mov	r1, r2
   d51ea:	f7ff bbe3 	b.w	d49b4 <network_get_listen_timeout>

000d51ee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d51ee:	6840      	ldr	r0, [r0, #4]
   d51f0:	2200      	movs	r2, #0
   d51f2:	f7ff bbd7 	b.w	d49a4 <network_set_listen_timeout>

000d51f6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d51f6:	6840      	ldr	r0, [r0, #4]
   d51f8:	2200      	movs	r2, #0
   d51fa:	f081 0101 	eor.w	r1, r1, #1
   d51fe:	f7ff bbc1 	b.w	d4984 <network_listen>

000d5202 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5202:	2300      	movs	r3, #0
   d5204:	6840      	ldr	r0, [r0, #4]
   d5206:	461a      	mov	r2, r3
   d5208:	4619      	mov	r1, r3
   d520a:	f7ff bbb3 	b.w	d4974 <network_off>

000d520e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d520e:	2300      	movs	r3, #0
   d5210:	6840      	ldr	r0, [r0, #4]
   d5212:	461a      	mov	r2, r3
   d5214:	4619      	mov	r1, r3
   d5216:	f7ff bba5 	b.w	d4964 <network_on>

000d521a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d521a:	2200      	movs	r2, #0
   d521c:	6840      	ldr	r0, [r0, #4]
   d521e:	4611      	mov	r1, r2
   d5220:	f7ff bb88 	b.w	d4934 <network_connecting>

000d5224 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5224:	6840      	ldr	r0, [r0, #4]
   d5226:	2200      	movs	r2, #0
   d5228:	2102      	movs	r1, #2
   d522a:	f7ff bb8b 	b.w	d4944 <network_disconnect>

000d522e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d522e:	2300      	movs	r3, #0
   d5230:	6840      	ldr	r0, [r0, #4]
   d5232:	461a      	mov	r2, r3
   d5234:	f7ff bb76 	b.w	d4924 <network_connect>

000d5238 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5238:	4b02      	ldr	r3, [pc, #8]	; (d5244 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d523a:	2204      	movs	r2, #4
   d523c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d523e:	4a02      	ldr	r2, [pc, #8]	; (d5248 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5240:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5242:	4770      	bx	lr
   d5244:	2003e7b8 	.word	0x2003e7b8
   d5248:	000d603c 	.word	0x000d603c

000d524c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d524c:	2300      	movs	r3, #0
   d524e:	6840      	ldr	r0, [r0, #4]
   d5250:	461a      	mov	r2, r3
   d5252:	f7ff bb67 	b.w	d4924 <network_connect>

000d5256 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5256:	6840      	ldr	r0, [r0, #4]
   d5258:	2200      	movs	r2, #0
   d525a:	2102      	movs	r1, #2
   d525c:	f7ff bb72 	b.w	d4944 <network_disconnect>

000d5260 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5260:	2200      	movs	r2, #0
   d5262:	6840      	ldr	r0, [r0, #4]
   d5264:	4611      	mov	r1, r2
   d5266:	f7ff bb65 	b.w	d4934 <network_connecting>

000d526a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d526a:	2200      	movs	r2, #0
   d526c:	6840      	ldr	r0, [r0, #4]
   d526e:	4611      	mov	r1, r2
   d5270:	f7ff bb70 	b.w	d4954 <network_ready>

000d5274 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5274:	2300      	movs	r3, #0
   d5276:	6840      	ldr	r0, [r0, #4]
   d5278:	461a      	mov	r2, r3
   d527a:	4619      	mov	r1, r3
   d527c:	f7ff bb72 	b.w	d4964 <network_on>

000d5280 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5280:	2300      	movs	r3, #0
   d5282:	6840      	ldr	r0, [r0, #4]
   d5284:	461a      	mov	r2, r3
   d5286:	4619      	mov	r1, r3
   d5288:	f7ff bb74 	b.w	d4974 <network_off>

000d528c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d528c:	6840      	ldr	r0, [r0, #4]
   d528e:	2100      	movs	r1, #0
   d5290:	f7ff bb98 	b.w	d49c4 <network_is_on>

000d5294 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5294:	6840      	ldr	r0, [r0, #4]
   d5296:	2100      	movs	r1, #0
   d5298:	f7ff bb9c 	b.w	d49d4 <network_is_off>

000d529c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d529c:	6840      	ldr	r0, [r0, #4]
   d529e:	2200      	movs	r2, #0
   d52a0:	f081 0101 	eor.w	r1, r1, #1
   d52a4:	f7ff bb6e 	b.w	d4984 <network_listen>

000d52a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d52a8:	6840      	ldr	r0, [r0, #4]
   d52aa:	2200      	movs	r2, #0
   d52ac:	f7ff bb7a 	b.w	d49a4 <network_set_listen_timeout>

000d52b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d52b0:	2200      	movs	r2, #0
   d52b2:	6840      	ldr	r0, [r0, #4]
   d52b4:	4611      	mov	r1, r2
   d52b6:	f7ff bb7d 	b.w	d49b4 <network_get_listen_timeout>

000d52ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d52ba:	2200      	movs	r2, #0
   d52bc:	6840      	ldr	r0, [r0, #4]
   d52be:	4611      	mov	r1, r2
   d52c0:	f7ff bb68 	b.w	d4994 <network_listening>

000d52c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d52c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d52c8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d52ca:	b095      	sub	sp, #84	; 0x54
   d52cc:	4616      	mov	r6, r2
   d52ce:	460d      	mov	r5, r1
   d52d0:	4607      	mov	r7, r0
    IPAddress addr;
   d52d2:	f7ff fdd3 	bl	d4e7c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d52d6:	4621      	mov	r1, r4
   d52d8:	2218      	movs	r2, #24
   d52da:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d52dc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d52de:	f000 fd2d 	bl	d5d3c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d52e2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d52e4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d52e8:	4621      	mov	r1, r4
   d52ea:	466b      	mov	r3, sp
   d52ec:	aa0c      	add	r2, sp, #48	; 0x30
   d52ee:	4630      	mov	r0, r6
   d52f0:	f7ff f994 	bl	d461c <netdb_getaddrinfo>
    if (!r) {
   d52f4:	4604      	mov	r4, r0
   d52f6:	2800      	cmp	r0, #0
   d52f8:	d146      	bne.n	d5388 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d52fa:	4602      	mov	r2, r0
   d52fc:	2101      	movs	r1, #1
   d52fe:	6868      	ldr	r0, [r5, #4]
   d5300:	f7ff fb28 	bl	d4954 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5304:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5306:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5308:	4622      	mov	r2, r4
   d530a:	6868      	ldr	r0, [r5, #4]
   d530c:	f7ff fb22 	bl	d4954 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5310:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5312:	4681      	mov	r9, r0
        bool ok = false;
   d5314:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5316:	2e00      	cmp	r6, #0
   d5318:	d036      	beq.n	d5388 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d531a:	2900      	cmp	r1, #0
   d531c:	d134      	bne.n	d5388 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d531e:	6873      	ldr	r3, [r6, #4]
   d5320:	2b02      	cmp	r3, #2
   d5322:	d003      	beq.n	d532c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5324:	2b0a      	cmp	r3, #10
   d5326:	d00b      	beq.n	d5340 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5328:	69f6      	ldr	r6, [r6, #28]
   d532a:	e7f4      	b.n	d5316 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d532c:	f1b8 0f00 	cmp.w	r8, #0
   d5330:	d004      	beq.n	d533c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5332:	6971      	ldr	r1, [r6, #20]
   d5334:	4638      	mov	r0, r7
   d5336:	3104      	adds	r1, #4
   d5338:	f7ff fdcd 	bl	d4ed6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d533c:	4641      	mov	r1, r8
   d533e:	e7f3      	b.n	d5328 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5340:	f1b9 0f00 	cmp.w	r9, #0
   d5344:	d101      	bne.n	d534a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5346:	4649      	mov	r1, r9
   d5348:	e7ee      	b.n	d5328 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d534a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d534c:	2210      	movs	r2, #16
   d534e:	a801      	add	r0, sp, #4
   d5350:	f000 fcf4 	bl	d5d3c <memset>
                    a.v = 6;
   d5354:	2306      	movs	r3, #6
   d5356:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d535a:	ad01      	add	r5, sp, #4
   d535c:	f104 0308 	add.w	r3, r4, #8
   d5360:	3418      	adds	r4, #24
   d5362:	6818      	ldr	r0, [r3, #0]
   d5364:	6859      	ldr	r1, [r3, #4]
   d5366:	462a      	mov	r2, r5
   d5368:	c203      	stmia	r2!, {r0, r1}
   d536a:	3308      	adds	r3, #8
   d536c:	42a3      	cmp	r3, r4
   d536e:	4615      	mov	r5, r2
   d5370:	d1f7      	bne.n	d5362 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5372:	a901      	add	r1, sp, #4
   d5374:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5376:	ad07      	add	r5, sp, #28
   d5378:	f7ff fd8e 	bl	d4e98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d537c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d537e:	1d3c      	adds	r4, r7, #4
   d5380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5382:	682b      	ldr	r3, [r5, #0]
   d5384:	7023      	strb	r3, [r4, #0]
   d5386:	e7de      	b.n	d5346 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5388:	9800      	ldr	r0, [sp, #0]
   d538a:	f7ff f93f 	bl	d460c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d538e:	4638      	mov	r0, r7
   d5390:	b015      	add	sp, #84	; 0x54
   d5392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5398 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5398:	4b02      	ldr	r3, [pc, #8]	; (d53a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d539a:	4a03      	ldr	r2, [pc, #12]	; (d53a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d539c:	601a      	str	r2, [r3, #0]
   d539e:	2200      	movs	r2, #0
   d53a0:	605a      	str	r2, [r3, #4]

} // spark
   d53a2:	4770      	bx	lr
   d53a4:	2003e7c0 	.word	0x2003e7c0
   d53a8:	000d6078 	.word	0x000d6078

000d53ac <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d53ac:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d53ae:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d53b0:	d902      	bls.n	d53b8 <pinAvailable+0xc>
    return false;
   d53b2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d53b4:	b002      	add	sp, #8
   d53b6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d53b8:	f1a0 030b 	sub.w	r3, r0, #11
   d53bc:	2b02      	cmp	r3, #2
   d53be:	d81a      	bhi.n	d53f6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d53c0:	4c17      	ldr	r4, [pc, #92]	; (d5420 <pinAvailable+0x74>)
   d53c2:	7821      	ldrb	r1, [r4, #0]
   d53c4:	f3bf 8f5b 	dmb	ish
   d53c8:	f011 0101 	ands.w	r1, r1, #1
   d53cc:	d10b      	bne.n	d53e6 <pinAvailable+0x3a>
   d53ce:	4620      	mov	r0, r4
   d53d0:	9101      	str	r1, [sp, #4]
   d53d2:	f7fe fe66 	bl	d40a2 <__cxa_guard_acquire>
   d53d6:	9901      	ldr	r1, [sp, #4]
   d53d8:	b128      	cbz	r0, d53e6 <pinAvailable+0x3a>
   d53da:	4812      	ldr	r0, [pc, #72]	; (d5424 <pinAvailable+0x78>)
   d53dc:	f7ff fb78 	bl	d4ad0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d53e0:	4620      	mov	r0, r4
   d53e2:	f7fe fe63 	bl	d40ac <__cxa_guard_release>
   d53e6:	4b0f      	ldr	r3, [pc, #60]	; (d5424 <pinAvailable+0x78>)
   d53e8:	7818      	ldrb	r0, [r3, #0]
   d53ea:	f7ff fa2f 	bl	d484c <hal_spi_is_enabled>
   d53ee:	2800      	cmp	r0, #0
   d53f0:	d1df      	bne.n	d53b2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d53f2:	2001      	movs	r0, #1
   d53f4:	e7de      	b.n	d53b4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d53f6:	2801      	cmp	r0, #1
   d53f8:	d809      	bhi.n	d540e <pinAvailable+0x62>
   d53fa:	f000 f857 	bl	d54ac <_Z19__fetch_global_Wirev>
   d53fe:	2100      	movs	r1, #0
   d5400:	7c00      	ldrb	r0, [r0, #16]
   d5402:	f7ff fa0b 	bl	d481c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5406:	f080 0001 	eor.w	r0, r0, #1
   d540a:	b2c0      	uxtb	r0, r0
   d540c:	e7d2      	b.n	d53b4 <pinAvailable+0x8>
   d540e:	3809      	subs	r0, #9
   d5410:	2801      	cmp	r0, #1
   d5412:	d8ee      	bhi.n	d53f2 <pinAvailable+0x46>
   d5414:	f7ff fe74 	bl	d5100 <_Z22__fetch_global_Serial1v>
   d5418:	7c00      	ldrb	r0, [r0, #16]
   d541a:	f7ff f9c7 	bl	d47ac <hal_usart_is_enabled>
   d541e:	e7f2      	b.n	d5406 <pinAvailable+0x5a>
   d5420:	2003e7c8 	.word	0x2003e7c8
   d5424:	2003e7cc 	.word	0x2003e7cc

000d5428 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5428:	2823      	cmp	r0, #35	; 0x23
{
   d542a:	b538      	push	{r3, r4, r5, lr}
   d542c:	4604      	mov	r4, r0
   d542e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5430:	d80a      	bhi.n	d5448 <pinMode+0x20>
   d5432:	29ff      	cmp	r1, #255	; 0xff
   d5434:	d008      	beq.n	d5448 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5436:	f7ff ffb9 	bl	d53ac <pinAvailable>
   d543a:	b128      	cbz	r0, d5448 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d543c:	4629      	mov	r1, r5
   d543e:	4620      	mov	r0, r4
}
   d5440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5444:	f7ff b8f2 	b.w	d462c <HAL_Pin_Mode>
}
   d5448:	bd38      	pop	{r3, r4, r5, pc}

000d544a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d544a:	b538      	push	{r3, r4, r5, lr}
   d544c:	4604      	mov	r4, r0
   d544e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5450:	f7ff f8f4 	bl	d463c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5454:	28ff      	cmp	r0, #255	; 0xff
   d5456:	d010      	beq.n	d547a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5458:	2806      	cmp	r0, #6
   d545a:	d804      	bhi.n	d5466 <digitalWrite+0x1c>
   d545c:	234d      	movs	r3, #77	; 0x4d
   d545e:	fa23 f000 	lsr.w	r0, r3, r0
   d5462:	07c3      	lsls	r3, r0, #31
   d5464:	d409      	bmi.n	d547a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5466:	4620      	mov	r0, r4
   d5468:	f7ff ffa0 	bl	d53ac <pinAvailable>
   d546c:	b128      	cbz	r0, d547a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d546e:	4629      	mov	r1, r5
   d5470:	4620      	mov	r0, r4
}
   d5472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5476:	f7ff b8e9 	b.w	d464c <HAL_GPIO_Write>
}
   d547a:	bd38      	pop	{r3, r4, r5, pc}

000d547c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d547c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d547e:	2300      	movs	r3, #0
   d5480:	2520      	movs	r5, #32
   d5482:	8043      	strh	r3, [r0, #2]
   d5484:	2314      	movs	r3, #20
{
   d5486:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5488:	8003      	strh	r3, [r0, #0]
   d548a:	6085      	str	r5, [r0, #8]
   d548c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d548e:	4906      	ldr	r1, [pc, #24]	; (d54a8 <_Z17acquireWireBufferv+0x2c>)
   d5490:	4628      	mov	r0, r5
   d5492:	f000 f83c 	bl	d550e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5496:	4904      	ldr	r1, [pc, #16]	; (d54a8 <_Z17acquireWireBufferv+0x2c>)
	};
   d5498:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d549a:	4628      	mov	r0, r5
   d549c:	f000 f837 	bl	d550e <_ZnajRKSt9nothrow_t>
	};
   d54a0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d54a2:	4620      	mov	r0, r4
   d54a4:	bd38      	pop	{r3, r4, r5, pc}
   d54a6:	bf00      	nop
   d54a8:	000d60ac 	.word	0x000d60ac

000d54ac <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d54ac:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d54ae:	4d0f      	ldr	r5, [pc, #60]	; (d54ec <_Z19__fetch_global_Wirev+0x40>)
   d54b0:	7829      	ldrb	r1, [r5, #0]
   d54b2:	f3bf 8f5b 	dmb	ish
   d54b6:	f011 0401 	ands.w	r4, r1, #1
{
   d54ba:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d54bc:	d113      	bne.n	d54e6 <_Z19__fetch_global_Wirev+0x3a>
   d54be:	4628      	mov	r0, r5
   d54c0:	f7fe fdef 	bl	d40a2 <__cxa_guard_acquire>
   d54c4:	b178      	cbz	r0, d54e6 <_Z19__fetch_global_Wirev+0x3a>
   d54c6:	a801      	add	r0, sp, #4
   d54c8:	f7ff ffd8 	bl	d547c <_Z17acquireWireBufferv>
   d54cc:	aa01      	add	r2, sp, #4
   d54ce:	4621      	mov	r1, r4
   d54d0:	4807      	ldr	r0, [pc, #28]	; (d54f0 <_Z19__fetch_global_Wirev+0x44>)
   d54d2:	f7ff fe6b 	bl	d51ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d54d6:	4628      	mov	r0, r5
   d54d8:	f7fe fde8 	bl	d40ac <__cxa_guard_release>
   d54dc:	4a05      	ldr	r2, [pc, #20]	; (d54f4 <_Z19__fetch_global_Wirev+0x48>)
   d54de:	4906      	ldr	r1, [pc, #24]	; (d54f8 <_Z19__fetch_global_Wirev+0x4c>)
   d54e0:	4803      	ldr	r0, [pc, #12]	; (d54f0 <_Z19__fetch_global_Wirev+0x44>)
   d54e2:	f000 f80b 	bl	d54fc <__aeabi_atexit>
	return wire;
}
   d54e6:	4802      	ldr	r0, [pc, #8]	; (d54f0 <_Z19__fetch_global_Wirev+0x44>)
   d54e8:	b007      	add	sp, #28
   d54ea:	bd30      	pop	{r4, r5, pc}
   d54ec:	2003e7d8 	.word	0x2003e7d8
   d54f0:	2003e7dc 	.word	0x2003e7dc
   d54f4:	2003e5e8 	.word	0x2003e5e8
   d54f8:	000d5155 	.word	0x000d5155

000d54fc <__aeabi_atexit>:
   d54fc:	460b      	mov	r3, r1
   d54fe:	4601      	mov	r1, r0
   d5500:	4618      	mov	r0, r3
   d5502:	f000 bbff 	b.w	d5d04 <__cxa_atexit>

000d5506 <_ZdlPvj>:
   d5506:	f7fe bdca 	b.w	d409e <_ZdlPv>

000d550a <_ZnwjRKSt9nothrow_t>:
   d550a:	f7fe bdc4 	b.w	d4096 <_Znwj>

000d550e <_ZnajRKSt9nothrow_t>:
   d550e:	f7fe bdc4 	b.w	d409a <_Znaj>

000d5512 <_ZSt25__throw_bad_function_callv>:
   d5512:	b508      	push	{r3, lr}
   d5514:	f7ff fa8e 	bl	d4a34 <abort>

000d5518 <__aeabi_drsub>:
   d5518:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d551c:	e002      	b.n	d5524 <__adddf3>
   d551e:	bf00      	nop

000d5520 <__aeabi_dsub>:
   d5520:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5524 <__adddf3>:
   d5524:	b530      	push	{r4, r5, lr}
   d5526:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d552a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d552e:	ea94 0f05 	teq	r4, r5
   d5532:	bf08      	it	eq
   d5534:	ea90 0f02 	teqeq	r0, r2
   d5538:	bf1f      	itttt	ne
   d553a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d553e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5542:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5546:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d554a:	f000 80e2 	beq.w	d5712 <__adddf3+0x1ee>
   d554e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5552:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5556:	bfb8      	it	lt
   d5558:	426d      	neglt	r5, r5
   d555a:	dd0c      	ble.n	d5576 <__adddf3+0x52>
   d555c:	442c      	add	r4, r5
   d555e:	ea80 0202 	eor.w	r2, r0, r2
   d5562:	ea81 0303 	eor.w	r3, r1, r3
   d5566:	ea82 0000 	eor.w	r0, r2, r0
   d556a:	ea83 0101 	eor.w	r1, r3, r1
   d556e:	ea80 0202 	eor.w	r2, r0, r2
   d5572:	ea81 0303 	eor.w	r3, r1, r3
   d5576:	2d36      	cmp	r5, #54	; 0x36
   d5578:	bf88      	it	hi
   d557a:	bd30      	pophi	{r4, r5, pc}
   d557c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5580:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5584:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5588:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d558c:	d002      	beq.n	d5594 <__adddf3+0x70>
   d558e:	4240      	negs	r0, r0
   d5590:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5594:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5598:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d559c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d55a0:	d002      	beq.n	d55a8 <__adddf3+0x84>
   d55a2:	4252      	negs	r2, r2
   d55a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d55a8:	ea94 0f05 	teq	r4, r5
   d55ac:	f000 80a7 	beq.w	d56fe <__adddf3+0x1da>
   d55b0:	f1a4 0401 	sub.w	r4, r4, #1
   d55b4:	f1d5 0e20 	rsbs	lr, r5, #32
   d55b8:	db0d      	blt.n	d55d6 <__adddf3+0xb2>
   d55ba:	fa02 fc0e 	lsl.w	ip, r2, lr
   d55be:	fa22 f205 	lsr.w	r2, r2, r5
   d55c2:	1880      	adds	r0, r0, r2
   d55c4:	f141 0100 	adc.w	r1, r1, #0
   d55c8:	fa03 f20e 	lsl.w	r2, r3, lr
   d55cc:	1880      	adds	r0, r0, r2
   d55ce:	fa43 f305 	asr.w	r3, r3, r5
   d55d2:	4159      	adcs	r1, r3
   d55d4:	e00e      	b.n	d55f4 <__adddf3+0xd0>
   d55d6:	f1a5 0520 	sub.w	r5, r5, #32
   d55da:	f10e 0e20 	add.w	lr, lr, #32
   d55de:	2a01      	cmp	r2, #1
   d55e0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d55e4:	bf28      	it	cs
   d55e6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d55ea:	fa43 f305 	asr.w	r3, r3, r5
   d55ee:	18c0      	adds	r0, r0, r3
   d55f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d55f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d55f8:	d507      	bpl.n	d560a <__adddf3+0xe6>
   d55fa:	f04f 0e00 	mov.w	lr, #0
   d55fe:	f1dc 0c00 	rsbs	ip, ip, #0
   d5602:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5606:	eb6e 0101 	sbc.w	r1, lr, r1
   d560a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d560e:	d31b      	bcc.n	d5648 <__adddf3+0x124>
   d5610:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5614:	d30c      	bcc.n	d5630 <__adddf3+0x10c>
   d5616:	0849      	lsrs	r1, r1, #1
   d5618:	ea5f 0030 	movs.w	r0, r0, rrx
   d561c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5620:	f104 0401 	add.w	r4, r4, #1
   d5624:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5628:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d562c:	f080 809a 	bcs.w	d5764 <__adddf3+0x240>
   d5630:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5634:	bf08      	it	eq
   d5636:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d563a:	f150 0000 	adcs.w	r0, r0, #0
   d563e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5642:	ea41 0105 	orr.w	r1, r1, r5
   d5646:	bd30      	pop	{r4, r5, pc}
   d5648:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d564c:	4140      	adcs	r0, r0
   d564e:	eb41 0101 	adc.w	r1, r1, r1
   d5652:	3c01      	subs	r4, #1
   d5654:	bf28      	it	cs
   d5656:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d565a:	d2e9      	bcs.n	d5630 <__adddf3+0x10c>
   d565c:	f091 0f00 	teq	r1, #0
   d5660:	bf04      	itt	eq
   d5662:	4601      	moveq	r1, r0
   d5664:	2000      	moveq	r0, #0
   d5666:	fab1 f381 	clz	r3, r1
   d566a:	bf08      	it	eq
   d566c:	3320      	addeq	r3, #32
   d566e:	f1a3 030b 	sub.w	r3, r3, #11
   d5672:	f1b3 0220 	subs.w	r2, r3, #32
   d5676:	da0c      	bge.n	d5692 <__adddf3+0x16e>
   d5678:	320c      	adds	r2, #12
   d567a:	dd08      	ble.n	d568e <__adddf3+0x16a>
   d567c:	f102 0c14 	add.w	ip, r2, #20
   d5680:	f1c2 020c 	rsb	r2, r2, #12
   d5684:	fa01 f00c 	lsl.w	r0, r1, ip
   d5688:	fa21 f102 	lsr.w	r1, r1, r2
   d568c:	e00c      	b.n	d56a8 <__adddf3+0x184>
   d568e:	f102 0214 	add.w	r2, r2, #20
   d5692:	bfd8      	it	le
   d5694:	f1c2 0c20 	rsble	ip, r2, #32
   d5698:	fa01 f102 	lsl.w	r1, r1, r2
   d569c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d56a0:	bfdc      	itt	le
   d56a2:	ea41 010c 	orrle.w	r1, r1, ip
   d56a6:	4090      	lslle	r0, r2
   d56a8:	1ae4      	subs	r4, r4, r3
   d56aa:	bfa2      	ittt	ge
   d56ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d56b0:	4329      	orrge	r1, r5
   d56b2:	bd30      	popge	{r4, r5, pc}
   d56b4:	ea6f 0404 	mvn.w	r4, r4
   d56b8:	3c1f      	subs	r4, #31
   d56ba:	da1c      	bge.n	d56f6 <__adddf3+0x1d2>
   d56bc:	340c      	adds	r4, #12
   d56be:	dc0e      	bgt.n	d56de <__adddf3+0x1ba>
   d56c0:	f104 0414 	add.w	r4, r4, #20
   d56c4:	f1c4 0220 	rsb	r2, r4, #32
   d56c8:	fa20 f004 	lsr.w	r0, r0, r4
   d56cc:	fa01 f302 	lsl.w	r3, r1, r2
   d56d0:	ea40 0003 	orr.w	r0, r0, r3
   d56d4:	fa21 f304 	lsr.w	r3, r1, r4
   d56d8:	ea45 0103 	orr.w	r1, r5, r3
   d56dc:	bd30      	pop	{r4, r5, pc}
   d56de:	f1c4 040c 	rsb	r4, r4, #12
   d56e2:	f1c4 0220 	rsb	r2, r4, #32
   d56e6:	fa20 f002 	lsr.w	r0, r0, r2
   d56ea:	fa01 f304 	lsl.w	r3, r1, r4
   d56ee:	ea40 0003 	orr.w	r0, r0, r3
   d56f2:	4629      	mov	r1, r5
   d56f4:	bd30      	pop	{r4, r5, pc}
   d56f6:	fa21 f004 	lsr.w	r0, r1, r4
   d56fa:	4629      	mov	r1, r5
   d56fc:	bd30      	pop	{r4, r5, pc}
   d56fe:	f094 0f00 	teq	r4, #0
   d5702:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5706:	bf06      	itte	eq
   d5708:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d570c:	3401      	addeq	r4, #1
   d570e:	3d01      	subne	r5, #1
   d5710:	e74e      	b.n	d55b0 <__adddf3+0x8c>
   d5712:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5716:	bf18      	it	ne
   d5718:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d571c:	d029      	beq.n	d5772 <__adddf3+0x24e>
   d571e:	ea94 0f05 	teq	r4, r5
   d5722:	bf08      	it	eq
   d5724:	ea90 0f02 	teqeq	r0, r2
   d5728:	d005      	beq.n	d5736 <__adddf3+0x212>
   d572a:	ea54 0c00 	orrs.w	ip, r4, r0
   d572e:	bf04      	itt	eq
   d5730:	4619      	moveq	r1, r3
   d5732:	4610      	moveq	r0, r2
   d5734:	bd30      	pop	{r4, r5, pc}
   d5736:	ea91 0f03 	teq	r1, r3
   d573a:	bf1e      	ittt	ne
   d573c:	2100      	movne	r1, #0
   d573e:	2000      	movne	r0, #0
   d5740:	bd30      	popne	{r4, r5, pc}
   d5742:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5746:	d105      	bne.n	d5754 <__adddf3+0x230>
   d5748:	0040      	lsls	r0, r0, #1
   d574a:	4149      	adcs	r1, r1
   d574c:	bf28      	it	cs
   d574e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5752:	bd30      	pop	{r4, r5, pc}
   d5754:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5758:	bf3c      	itt	cc
   d575a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d575e:	bd30      	popcc	{r4, r5, pc}
   d5760:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5764:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5768:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d576c:	f04f 0000 	mov.w	r0, #0
   d5770:	bd30      	pop	{r4, r5, pc}
   d5772:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5776:	bf1a      	itte	ne
   d5778:	4619      	movne	r1, r3
   d577a:	4610      	movne	r0, r2
   d577c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5780:	bf1c      	itt	ne
   d5782:	460b      	movne	r3, r1
   d5784:	4602      	movne	r2, r0
   d5786:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d578a:	bf06      	itte	eq
   d578c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5790:	ea91 0f03 	teqeq	r1, r3
   d5794:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5798:	bd30      	pop	{r4, r5, pc}
   d579a:	bf00      	nop

000d579c <__aeabi_ui2d>:
   d579c:	f090 0f00 	teq	r0, #0
   d57a0:	bf04      	itt	eq
   d57a2:	2100      	moveq	r1, #0
   d57a4:	4770      	bxeq	lr
   d57a6:	b530      	push	{r4, r5, lr}
   d57a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d57ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d57b0:	f04f 0500 	mov.w	r5, #0
   d57b4:	f04f 0100 	mov.w	r1, #0
   d57b8:	e750      	b.n	d565c <__adddf3+0x138>
   d57ba:	bf00      	nop

000d57bc <__aeabi_i2d>:
   d57bc:	f090 0f00 	teq	r0, #0
   d57c0:	bf04      	itt	eq
   d57c2:	2100      	moveq	r1, #0
   d57c4:	4770      	bxeq	lr
   d57c6:	b530      	push	{r4, r5, lr}
   d57c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d57cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d57d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d57d4:	bf48      	it	mi
   d57d6:	4240      	negmi	r0, r0
   d57d8:	f04f 0100 	mov.w	r1, #0
   d57dc:	e73e      	b.n	d565c <__adddf3+0x138>
   d57de:	bf00      	nop

000d57e0 <__aeabi_f2d>:
   d57e0:	0042      	lsls	r2, r0, #1
   d57e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d57e6:	ea4f 0131 	mov.w	r1, r1, rrx
   d57ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d57ee:	bf1f      	itttt	ne
   d57f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d57f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d57f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d57fc:	4770      	bxne	lr
   d57fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5802:	bf08      	it	eq
   d5804:	4770      	bxeq	lr
   d5806:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d580a:	bf04      	itt	eq
   d580c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5810:	4770      	bxeq	lr
   d5812:	b530      	push	{r4, r5, lr}
   d5814:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5818:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d581c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5820:	e71c      	b.n	d565c <__adddf3+0x138>
   d5822:	bf00      	nop

000d5824 <__aeabi_ul2d>:
   d5824:	ea50 0201 	orrs.w	r2, r0, r1
   d5828:	bf08      	it	eq
   d582a:	4770      	bxeq	lr
   d582c:	b530      	push	{r4, r5, lr}
   d582e:	f04f 0500 	mov.w	r5, #0
   d5832:	e00a      	b.n	d584a <__aeabi_l2d+0x16>

000d5834 <__aeabi_l2d>:
   d5834:	ea50 0201 	orrs.w	r2, r0, r1
   d5838:	bf08      	it	eq
   d583a:	4770      	bxeq	lr
   d583c:	b530      	push	{r4, r5, lr}
   d583e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5842:	d502      	bpl.n	d584a <__aeabi_l2d+0x16>
   d5844:	4240      	negs	r0, r0
   d5846:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d584a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d584e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5852:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5856:	f43f aed8 	beq.w	d560a <__adddf3+0xe6>
   d585a:	f04f 0203 	mov.w	r2, #3
   d585e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5862:	bf18      	it	ne
   d5864:	3203      	addne	r2, #3
   d5866:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d586a:	bf18      	it	ne
   d586c:	3203      	addne	r2, #3
   d586e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5872:	f1c2 0320 	rsb	r3, r2, #32
   d5876:	fa00 fc03 	lsl.w	ip, r0, r3
   d587a:	fa20 f002 	lsr.w	r0, r0, r2
   d587e:	fa01 fe03 	lsl.w	lr, r1, r3
   d5882:	ea40 000e 	orr.w	r0, r0, lr
   d5886:	fa21 f102 	lsr.w	r1, r1, r2
   d588a:	4414      	add	r4, r2
   d588c:	e6bd      	b.n	d560a <__adddf3+0xe6>
   d588e:	bf00      	nop

000d5890 <__aeabi_dmul>:
   d5890:	b570      	push	{r4, r5, r6, lr}
   d5892:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5896:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d589a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d589e:	bf1d      	ittte	ne
   d58a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d58a4:	ea94 0f0c 	teqne	r4, ip
   d58a8:	ea95 0f0c 	teqne	r5, ip
   d58ac:	f000 f8de 	bleq	d5a6c <__aeabi_dmul+0x1dc>
   d58b0:	442c      	add	r4, r5
   d58b2:	ea81 0603 	eor.w	r6, r1, r3
   d58b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d58ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d58be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d58c2:	bf18      	it	ne
   d58c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d58c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d58cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d58d0:	d038      	beq.n	d5944 <__aeabi_dmul+0xb4>
   d58d2:	fba0 ce02 	umull	ip, lr, r0, r2
   d58d6:	f04f 0500 	mov.w	r5, #0
   d58da:	fbe1 e502 	umlal	lr, r5, r1, r2
   d58de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d58e2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d58e6:	f04f 0600 	mov.w	r6, #0
   d58ea:	fbe1 5603 	umlal	r5, r6, r1, r3
   d58ee:	f09c 0f00 	teq	ip, #0
   d58f2:	bf18      	it	ne
   d58f4:	f04e 0e01 	orrne.w	lr, lr, #1
   d58f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d58fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5900:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5904:	d204      	bcs.n	d5910 <__aeabi_dmul+0x80>
   d5906:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d590a:	416d      	adcs	r5, r5
   d590c:	eb46 0606 	adc.w	r6, r6, r6
   d5910:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5914:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5918:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d591c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5920:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5924:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5928:	bf88      	it	hi
   d592a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d592e:	d81e      	bhi.n	d596e <__aeabi_dmul+0xde>
   d5930:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5934:	bf08      	it	eq
   d5936:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d593a:	f150 0000 	adcs.w	r0, r0, #0
   d593e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5942:	bd70      	pop	{r4, r5, r6, pc}
   d5944:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5948:	ea46 0101 	orr.w	r1, r6, r1
   d594c:	ea40 0002 	orr.w	r0, r0, r2
   d5950:	ea81 0103 	eor.w	r1, r1, r3
   d5954:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5958:	bfc2      	ittt	gt
   d595a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d595e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5962:	bd70      	popgt	{r4, r5, r6, pc}
   d5964:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5968:	f04f 0e00 	mov.w	lr, #0
   d596c:	3c01      	subs	r4, #1
   d596e:	f300 80ab 	bgt.w	d5ac8 <__aeabi_dmul+0x238>
   d5972:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5976:	bfde      	ittt	le
   d5978:	2000      	movle	r0, #0
   d597a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d597e:	bd70      	pople	{r4, r5, r6, pc}
   d5980:	f1c4 0400 	rsb	r4, r4, #0
   d5984:	3c20      	subs	r4, #32
   d5986:	da35      	bge.n	d59f4 <__aeabi_dmul+0x164>
   d5988:	340c      	adds	r4, #12
   d598a:	dc1b      	bgt.n	d59c4 <__aeabi_dmul+0x134>
   d598c:	f104 0414 	add.w	r4, r4, #20
   d5990:	f1c4 0520 	rsb	r5, r4, #32
   d5994:	fa00 f305 	lsl.w	r3, r0, r5
   d5998:	fa20 f004 	lsr.w	r0, r0, r4
   d599c:	fa01 f205 	lsl.w	r2, r1, r5
   d59a0:	ea40 0002 	orr.w	r0, r0, r2
   d59a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d59a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d59ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d59b0:	fa21 f604 	lsr.w	r6, r1, r4
   d59b4:	eb42 0106 	adc.w	r1, r2, r6
   d59b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d59bc:	bf08      	it	eq
   d59be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d59c2:	bd70      	pop	{r4, r5, r6, pc}
   d59c4:	f1c4 040c 	rsb	r4, r4, #12
   d59c8:	f1c4 0520 	rsb	r5, r4, #32
   d59cc:	fa00 f304 	lsl.w	r3, r0, r4
   d59d0:	fa20 f005 	lsr.w	r0, r0, r5
   d59d4:	fa01 f204 	lsl.w	r2, r1, r4
   d59d8:	ea40 0002 	orr.w	r0, r0, r2
   d59dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d59e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d59e4:	f141 0100 	adc.w	r1, r1, #0
   d59e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d59ec:	bf08      	it	eq
   d59ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d59f2:	bd70      	pop	{r4, r5, r6, pc}
   d59f4:	f1c4 0520 	rsb	r5, r4, #32
   d59f8:	fa00 f205 	lsl.w	r2, r0, r5
   d59fc:	ea4e 0e02 	orr.w	lr, lr, r2
   d5a00:	fa20 f304 	lsr.w	r3, r0, r4
   d5a04:	fa01 f205 	lsl.w	r2, r1, r5
   d5a08:	ea43 0302 	orr.w	r3, r3, r2
   d5a0c:	fa21 f004 	lsr.w	r0, r1, r4
   d5a10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5a14:	fa21 f204 	lsr.w	r2, r1, r4
   d5a18:	ea20 0002 	bic.w	r0, r0, r2
   d5a1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5a20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5a24:	bf08      	it	eq
   d5a26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5a2a:	bd70      	pop	{r4, r5, r6, pc}
   d5a2c:	f094 0f00 	teq	r4, #0
   d5a30:	d10f      	bne.n	d5a52 <__aeabi_dmul+0x1c2>
   d5a32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5a36:	0040      	lsls	r0, r0, #1
   d5a38:	eb41 0101 	adc.w	r1, r1, r1
   d5a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5a40:	bf08      	it	eq
   d5a42:	3c01      	subeq	r4, #1
   d5a44:	d0f7      	beq.n	d5a36 <__aeabi_dmul+0x1a6>
   d5a46:	ea41 0106 	orr.w	r1, r1, r6
   d5a4a:	f095 0f00 	teq	r5, #0
   d5a4e:	bf18      	it	ne
   d5a50:	4770      	bxne	lr
   d5a52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5a56:	0052      	lsls	r2, r2, #1
   d5a58:	eb43 0303 	adc.w	r3, r3, r3
   d5a5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5a60:	bf08      	it	eq
   d5a62:	3d01      	subeq	r5, #1
   d5a64:	d0f7      	beq.n	d5a56 <__aeabi_dmul+0x1c6>
   d5a66:	ea43 0306 	orr.w	r3, r3, r6
   d5a6a:	4770      	bx	lr
   d5a6c:	ea94 0f0c 	teq	r4, ip
   d5a70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5a74:	bf18      	it	ne
   d5a76:	ea95 0f0c 	teqne	r5, ip
   d5a7a:	d00c      	beq.n	d5a96 <__aeabi_dmul+0x206>
   d5a7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5a80:	bf18      	it	ne
   d5a82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5a86:	d1d1      	bne.n	d5a2c <__aeabi_dmul+0x19c>
   d5a88:	ea81 0103 	eor.w	r1, r1, r3
   d5a8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5a90:	f04f 0000 	mov.w	r0, #0
   d5a94:	bd70      	pop	{r4, r5, r6, pc}
   d5a96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5a9a:	bf06      	itte	eq
   d5a9c:	4610      	moveq	r0, r2
   d5a9e:	4619      	moveq	r1, r3
   d5aa0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5aa4:	d019      	beq.n	d5ada <__aeabi_dmul+0x24a>
   d5aa6:	ea94 0f0c 	teq	r4, ip
   d5aaa:	d102      	bne.n	d5ab2 <__aeabi_dmul+0x222>
   d5aac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5ab0:	d113      	bne.n	d5ada <__aeabi_dmul+0x24a>
   d5ab2:	ea95 0f0c 	teq	r5, ip
   d5ab6:	d105      	bne.n	d5ac4 <__aeabi_dmul+0x234>
   d5ab8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5abc:	bf1c      	itt	ne
   d5abe:	4610      	movne	r0, r2
   d5ac0:	4619      	movne	r1, r3
   d5ac2:	d10a      	bne.n	d5ada <__aeabi_dmul+0x24a>
   d5ac4:	ea81 0103 	eor.w	r1, r1, r3
   d5ac8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5acc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5ad0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5ad4:	f04f 0000 	mov.w	r0, #0
   d5ad8:	bd70      	pop	{r4, r5, r6, pc}
   d5ada:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5ade:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5ae2:	bd70      	pop	{r4, r5, r6, pc}

000d5ae4 <__aeabi_ddiv>:
   d5ae4:	b570      	push	{r4, r5, r6, lr}
   d5ae6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5aea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5aee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5af2:	bf1d      	ittte	ne
   d5af4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5af8:	ea94 0f0c 	teqne	r4, ip
   d5afc:	ea95 0f0c 	teqne	r5, ip
   d5b00:	f000 f8a7 	bleq	d5c52 <__aeabi_ddiv+0x16e>
   d5b04:	eba4 0405 	sub.w	r4, r4, r5
   d5b08:	ea81 0e03 	eor.w	lr, r1, r3
   d5b0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5b10:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5b14:	f000 8088 	beq.w	d5c28 <__aeabi_ddiv+0x144>
   d5b18:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5b1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5b20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5b24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5b28:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5b2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5b30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5b34:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5b38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5b3c:	429d      	cmp	r5, r3
   d5b3e:	bf08      	it	eq
   d5b40:	4296      	cmpeq	r6, r2
   d5b42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5b46:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5b4a:	d202      	bcs.n	d5b52 <__aeabi_ddiv+0x6e>
   d5b4c:	085b      	lsrs	r3, r3, #1
   d5b4e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5b52:	1ab6      	subs	r6, r6, r2
   d5b54:	eb65 0503 	sbc.w	r5, r5, r3
   d5b58:	085b      	lsrs	r3, r3, #1
   d5b5a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5b5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5b62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5b66:	ebb6 0e02 	subs.w	lr, r6, r2
   d5b6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5b6e:	bf22      	ittt	cs
   d5b70:	1ab6      	subcs	r6, r6, r2
   d5b72:	4675      	movcs	r5, lr
   d5b74:	ea40 000c 	orrcs.w	r0, r0, ip
   d5b78:	085b      	lsrs	r3, r3, #1
   d5b7a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5b7e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5b82:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5b86:	bf22      	ittt	cs
   d5b88:	1ab6      	subcs	r6, r6, r2
   d5b8a:	4675      	movcs	r5, lr
   d5b8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5b90:	085b      	lsrs	r3, r3, #1
   d5b92:	ea4f 0232 	mov.w	r2, r2, rrx
   d5b96:	ebb6 0e02 	subs.w	lr, r6, r2
   d5b9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5b9e:	bf22      	ittt	cs
   d5ba0:	1ab6      	subcs	r6, r6, r2
   d5ba2:	4675      	movcs	r5, lr
   d5ba4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5ba8:	085b      	lsrs	r3, r3, #1
   d5baa:	ea4f 0232 	mov.w	r2, r2, rrx
   d5bae:	ebb6 0e02 	subs.w	lr, r6, r2
   d5bb2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5bb6:	bf22      	ittt	cs
   d5bb8:	1ab6      	subcs	r6, r6, r2
   d5bba:	4675      	movcs	r5, lr
   d5bbc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5bc0:	ea55 0e06 	orrs.w	lr, r5, r6
   d5bc4:	d018      	beq.n	d5bf8 <__aeabi_ddiv+0x114>
   d5bc6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5bca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5bce:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5bd2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5bd6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5bda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5bde:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5be2:	d1c0      	bne.n	d5b66 <__aeabi_ddiv+0x82>
   d5be4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5be8:	d10b      	bne.n	d5c02 <__aeabi_ddiv+0x11e>
   d5bea:	ea41 0100 	orr.w	r1, r1, r0
   d5bee:	f04f 0000 	mov.w	r0, #0
   d5bf2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5bf6:	e7b6      	b.n	d5b66 <__aeabi_ddiv+0x82>
   d5bf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5bfc:	bf04      	itt	eq
   d5bfe:	4301      	orreq	r1, r0
   d5c00:	2000      	moveq	r0, #0
   d5c02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5c06:	bf88      	it	hi
   d5c08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5c0c:	f63f aeaf 	bhi.w	d596e <__aeabi_dmul+0xde>
   d5c10:	ebb5 0c03 	subs.w	ip, r5, r3
   d5c14:	bf04      	itt	eq
   d5c16:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5c1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5c1e:	f150 0000 	adcs.w	r0, r0, #0
   d5c22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5c26:	bd70      	pop	{r4, r5, r6, pc}
   d5c28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5c2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5c30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5c34:	bfc2      	ittt	gt
   d5c36:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5c3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5c3e:	bd70      	popgt	{r4, r5, r6, pc}
   d5c40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5c44:	f04f 0e00 	mov.w	lr, #0
   d5c48:	3c01      	subs	r4, #1
   d5c4a:	e690      	b.n	d596e <__aeabi_dmul+0xde>
   d5c4c:	ea45 0e06 	orr.w	lr, r5, r6
   d5c50:	e68d      	b.n	d596e <__aeabi_dmul+0xde>
   d5c52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5c56:	ea94 0f0c 	teq	r4, ip
   d5c5a:	bf08      	it	eq
   d5c5c:	ea95 0f0c 	teqeq	r5, ip
   d5c60:	f43f af3b 	beq.w	d5ada <__aeabi_dmul+0x24a>
   d5c64:	ea94 0f0c 	teq	r4, ip
   d5c68:	d10a      	bne.n	d5c80 <__aeabi_ddiv+0x19c>
   d5c6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5c6e:	f47f af34 	bne.w	d5ada <__aeabi_dmul+0x24a>
   d5c72:	ea95 0f0c 	teq	r5, ip
   d5c76:	f47f af25 	bne.w	d5ac4 <__aeabi_dmul+0x234>
   d5c7a:	4610      	mov	r0, r2
   d5c7c:	4619      	mov	r1, r3
   d5c7e:	e72c      	b.n	d5ada <__aeabi_dmul+0x24a>
   d5c80:	ea95 0f0c 	teq	r5, ip
   d5c84:	d106      	bne.n	d5c94 <__aeabi_ddiv+0x1b0>
   d5c86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5c8a:	f43f aefd 	beq.w	d5a88 <__aeabi_dmul+0x1f8>
   d5c8e:	4610      	mov	r0, r2
   d5c90:	4619      	mov	r1, r3
   d5c92:	e722      	b.n	d5ada <__aeabi_dmul+0x24a>
   d5c94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5c98:	bf18      	it	ne
   d5c9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5c9e:	f47f aec5 	bne.w	d5a2c <__aeabi_dmul+0x19c>
   d5ca2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5ca6:	f47f af0d 	bne.w	d5ac4 <__aeabi_dmul+0x234>
   d5caa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5cae:	f47f aeeb 	bne.w	d5a88 <__aeabi_dmul+0x1f8>
   d5cb2:	e712      	b.n	d5ada <__aeabi_dmul+0x24a>

000d5cb4 <__aeabi_d2iz>:
   d5cb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5cb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5cbc:	d215      	bcs.n	d5cea <__aeabi_d2iz+0x36>
   d5cbe:	d511      	bpl.n	d5ce4 <__aeabi_d2iz+0x30>
   d5cc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5cc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5cc8:	d912      	bls.n	d5cf0 <__aeabi_d2iz+0x3c>
   d5cca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5cce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5cd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5cd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5cda:	fa23 f002 	lsr.w	r0, r3, r2
   d5cde:	bf18      	it	ne
   d5ce0:	4240      	negne	r0, r0
   d5ce2:	4770      	bx	lr
   d5ce4:	f04f 0000 	mov.w	r0, #0
   d5ce8:	4770      	bx	lr
   d5cea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5cee:	d105      	bne.n	d5cfc <__aeabi_d2iz+0x48>
   d5cf0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d5cf4:	bf08      	it	eq
   d5cf6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5cfa:	4770      	bx	lr
   d5cfc:	f04f 0000 	mov.w	r0, #0
   d5d00:	4770      	bx	lr
   d5d02:	bf00      	nop

000d5d04 <__cxa_atexit>:
   d5d04:	b510      	push	{r4, lr}
   d5d06:	4c05      	ldr	r4, [pc, #20]	; (d5d1c <__cxa_atexit+0x18>)
   d5d08:	4613      	mov	r3, r2
   d5d0a:	b12c      	cbz	r4, d5d18 <__cxa_atexit+0x14>
   d5d0c:	460a      	mov	r2, r1
   d5d0e:	4601      	mov	r1, r0
   d5d10:	2002      	movs	r0, #2
   d5d12:	f3af 8000 	nop.w
   d5d16:	bd10      	pop	{r4, pc}
   d5d18:	4620      	mov	r0, r4
   d5d1a:	e7fc      	b.n	d5d16 <__cxa_atexit+0x12>
   d5d1c:	00000000 	.word	0x00000000

000d5d20 <memcpy>:
   d5d20:	440a      	add	r2, r1
   d5d22:	4291      	cmp	r1, r2
   d5d24:	f100 33ff 	add.w	r3, r0, #4294967295
   d5d28:	d100      	bne.n	d5d2c <memcpy+0xc>
   d5d2a:	4770      	bx	lr
   d5d2c:	b510      	push	{r4, lr}
   d5d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5d32:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5d36:	4291      	cmp	r1, r2
   d5d38:	d1f9      	bne.n	d5d2e <memcpy+0xe>
   d5d3a:	bd10      	pop	{r4, pc}

000d5d3c <memset>:
   d5d3c:	4402      	add	r2, r0
   d5d3e:	4603      	mov	r3, r0
   d5d40:	4293      	cmp	r3, r2
   d5d42:	d100      	bne.n	d5d46 <memset+0xa>
   d5d44:	4770      	bx	lr
   d5d46:	f803 1b01 	strb.w	r1, [r3], #1
   d5d4a:	e7f9      	b.n	d5d40 <memset+0x4>

000d5d4c <srand>:
   d5d4c:	b538      	push	{r3, r4, r5, lr}
   d5d4e:	4b0d      	ldr	r3, [pc, #52]	; (d5d84 <srand+0x38>)
   d5d50:	681d      	ldr	r5, [r3, #0]
   d5d52:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5d54:	4604      	mov	r4, r0
   d5d56:	b97b      	cbnz	r3, d5d78 <srand+0x2c>
   d5d58:	2018      	movs	r0, #24
   d5d5a:	f7fe fe53 	bl	d4a04 <malloc>
   d5d5e:	4a0a      	ldr	r2, [pc, #40]	; (d5d88 <srand+0x3c>)
   d5d60:	4b0a      	ldr	r3, [pc, #40]	; (d5d8c <srand+0x40>)
   d5d62:	63a8      	str	r0, [r5, #56]	; 0x38
   d5d64:	e9c0 2300 	strd	r2, r3, [r0]
   d5d68:	4b09      	ldr	r3, [pc, #36]	; (d5d90 <srand+0x44>)
   d5d6a:	6083      	str	r3, [r0, #8]
   d5d6c:	230b      	movs	r3, #11
   d5d6e:	8183      	strh	r3, [r0, #12]
   d5d70:	2201      	movs	r2, #1
   d5d72:	2300      	movs	r3, #0
   d5d74:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5d78:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5d7a:	2200      	movs	r2, #0
   d5d7c:	611c      	str	r4, [r3, #16]
   d5d7e:	615a      	str	r2, [r3, #20]
   d5d80:	bd38      	pop	{r3, r4, r5, pc}
   d5d82:	bf00      	nop
   d5d84:	2003e584 	.word	0x2003e584
   d5d88:	abcd330e 	.word	0xabcd330e
   d5d8c:	e66d1234 	.word	0xe66d1234
   d5d90:	0005deec 	.word	0x0005deec

000d5d94 <strlen>:
   d5d94:	4603      	mov	r3, r0
   d5d96:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5d9a:	2a00      	cmp	r2, #0
   d5d9c:	d1fb      	bne.n	d5d96 <strlen+0x2>
   d5d9e:	1a18      	subs	r0, r3, r0
   d5da0:	3801      	subs	r0, #1
   d5da2:	4770      	bx	lr

000d5da4 <dynalib_user>:
   d5da4:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d5db4:	0000 0000 6553 6972 6c61 6320 6e6f 656e     ....Serial conne
   d5dc4:	7463 6465 203a 7473 7261 6974 676e 6f00     cted: starting.o
   d5dd4:	7475 7570 5474 7268 6165 0064 4552 4441     utputThread.READ
   d5de4:	203a 0030 4552 4441 203a 0031 4948 4847     : 0.READ: 1.HIGH
   d5df4:	4c00 574f 5300 7465 6974 676e 4320 7275     .LOW.Setting Cur
   d5e04:	6572 746e 6e49 7570 5374 6174 6574 7420     rentInputState t
   d5e14:	206f 6927 696e 6974 6c61 2027 6562 6163     o 'initial' beca
   d5e24:	7375 2065 6f6c 676e 7020 7265 6f69 2064     use long period 
   d5e34:	6564 6574 7463 6465 5200 6165 2064 7325     detected.Read %s
   d5e44:	6920 706d 6c75 6573 6420 7275 7461 6f69      impulse duratio
   d5e54:	3a6e 2520 2064 736d 2d20 203e 2523 2064     n: %d ms -> #%d 
   d5e64:	4328 7275 6572 746e 6e49 7570 5374 6174     (CurrentInputSta
   d5e74:	6574 203a 6425 0029 5245 4f52 3a52 6920     te: %d).ERROR: i
   d5e84:	696e 6974 6c61 7320 6174 6574 6720 746f     nitial state got
   d5e94:	6c20 6e6f 5067 7265 6f69 0064 5245 4f52      longPeriod.ERRO
   d5ea4:	3a52 6520 7078 6365 6574 2064 6873 726f     R: expected shor
   d5eb4:	5074 7265 6f69 2064 6e69 7720 6961 2074     tPeriod in wait 
   d5ec4:	7473 7461 2065 6f67 2074 2523 0064 4e55     state got #%d.UN
   d5ed4:	4544 4946 454e 2044 6562 6168 6976 756f     DEFINED behaviou
   d5ee4:	2072 6f66 2072 6576 7972 6f4c 676e 6550     r for veryLongPe
   d5ef4:	6972 646f 6920 206e 6e69 7570 5374 6174     riod in inputSta
   d5f04:	6574 2720 756f 7074 7475 2731 5300 6174     te 'output1'.Sta
   d5f14:	7472 6e69 2067 756f 7074 7475 6c20 6f6f     rting output loo
   d5f24:	0070 2d2d 2d2d 2d2d 2d2d 002d 0001 0000     p.---------.....
   d5f34:	000a 0000 0064 0000                         ....d...

000d5f3c <_ZTVN5spark13EthernetClassE>:
	...
   d5f44:	4ab3 000d 4aa9 000d 4a9f 000d 4a95 000d     .J...J...J...J..
   d5f54:	4a89 000d 4a7d 000d 528d 000d 5295 000d     .J..}J...R...R..
   d5f64:	4a71 000d 4a69 000d 4a5f 000d 4a55 000d     qJ..iJ.._J..UJ..
   d5f74:	52c5 000d 7061 0070 5925 252d 2d6d 6425     .R..app.%Y-%m-%d
   d5f84:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d5f94:	6d69 0065                                   ime.

000d5f98 <_ZTV9IPAddress>:
	...
   d5fa0:	4e19 000d 4e09 000d 4e0b 000d               .N...N...N..

000d5fac <_ZTV9USBSerial>:
	...
   d5fb4:	4eef 000d 4f57 000d 4f2d 000d 4b79 000d     .N..WO..-O..yK..
   d5fc4:	4f1f 000d 4ef1 000d 4f01 000d 4f51 000d     .O...N...O..QO..
   d5fd4:	4f11 000d 4eeb 000d                         .O...N..

000d5fdc <_ZTV11USARTSerial>:
	...
   d5fe4:	5059 000d 50c5 000d 509d 000d 4b79 000d     YP...P...P..yK..
   d5ff4:	506d 000d 5089 000d 507b 000d 5097 000d     mP...P..{P...P..
   d6004:	505b 000d 505f 000d                         [P.._P..

000d600c <_ZTV7TwoWire>:
	...
   d6014:	5155 000d 519f 000d 5177 000d 5157 000d     UQ...Q..wQ..WQ..
   d6024:	517f 000d 5187 000d 518f 000d 5197 000d     .Q...Q...Q...Q..

000d6034 <_ZTVN5spark9WiFiClassE>:
	...
   d603c:	522f 000d 5225 000d 521b 000d 51d1 000d     /R..%R...R...Q..
   d604c:	520f 000d 5203 000d 528d 000d 5295 000d     .R...R...R...R..
   d605c:	51f7 000d 51ef 000d 51e5 000d 51db 000d     .Q...Q...Q...Q..
   d606c:	52c5 000d                                   .R..

000d6070 <_ZTVN5spark12NetworkClassE>:
	...
   d6078:	524d 000d 5257 000d 5261 000d 526b 000d     MR..WR..aR..kR..
   d6088:	5275 000d 5281 000d 528d 000d 5295 000d     uR...R...R...R..
   d6098:	529d 000d 52a9 000d 52b1 000d 52bb 000d     .R...R...R...R..
   d60a8:	52c5 000d                                   .R..

000d60ac <_ZSt7nothrow>:
	...

000d60ad <link_const_variable_data_end>:
   d60ad:	00          	.byte	0x00
	...

000d60b0 <link_constructors_location>:
   d60b0:	000d45f5 	.word	0x000d45f5
   d60b4:	000d4abd 	.word	0x000d4abd
   d60b8:	000d4b05 	.word	0x000d4b05
   d60bc:	000d4b51 	.word	0x000d4b51
   d60c0:	000d4c99 	.word	0x000d4c99
   d60c4:	000d4ca9 	.word	0x000d4ca9
   d60c8:	000d4cc9 	.word	0x000d4cc9
   d60cc:	000d5239 	.word	0x000d5239
   d60d0:	000d5399 	.word	0x000d5399

000d60d4 <link_constructors_end>:
	...
