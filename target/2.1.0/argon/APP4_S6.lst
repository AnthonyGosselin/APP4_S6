
c:/GitAPP/APP4_S6/target/2.1.0/argon/APP4_S6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002330  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6350  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  2003e578  000d6354  0001e578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001fc  2003e5f4  2003e5f4  0002e5f4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d63d0  000d63d0  000263d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d63f8  000d63f8  000263f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00100e04  00000000  00000000  000263fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011f30  00000000  00000000  00127200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002303d  00000000  00000000  00139130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000021b0  00000000  00000000  0015c16d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006560  00000000  00000000  0015e31d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003344d  00000000  00000000  0016487d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002cdf9  00000000  00000000  00197cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001034b4  00000000  00000000  001c4ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005ab0  00000000  00000000  002c7f78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f001 ff93 	bl	d5f5c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f001 ff9b 	bl	d5f78 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e578 	.word	0x2003e578
   d404c:	000d6354 	.word	0x000d6354
   d4050:	2003e5f4 	.word	0x2003e5f4
   d4054:	2003e5f4 	.word	0x2003e5f4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f000 ffbd 	bl	d4fe0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d6324 	.word	0x000d6324
   d4080:	000d6348 	.word	0x000d6348

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba2e 	b.w	d44e4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fab1 	bl	d45f0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f000 bf67 	b.w	d4f64 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f000 bdd3 	b.w	d4c40 <malloc>

000d409a <_Znaj>:
   d409a:	f000 bdd1 	b.w	d4c40 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f000 bdd7 	b.w	d4c50 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	4718      	bx	r3

000d40b6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40b6:	2a01      	cmp	r2, #1
   d40b8:	d003      	beq.n	d40c2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40ba:	2a02      	cmp	r2, #2
   d40bc:	d003      	beq.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40be:	2000      	movs	r0, #0
   d40c0:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c2:	6001      	str	r1, [r0, #0]
	      break;
   d40c4:	e7fb      	b.n	d40be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c6:	680b      	ldr	r3, [r1, #0]
   d40c8:	6003      	str	r3, [r0, #0]
	}
   d40ca:	e7f8      	b.n	d40be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d40cc <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d40cc:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d40ce:	2301      	movs	r3, #1
   d40d0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d40d2:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d40d4:	4604      	mov	r4, r0
        if (th->func) {
   d40d6:	b143      	cbz	r3, d40ea <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d40d8:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40da:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d40dc:	2301      	movs	r3, #1
   d40de:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d40e0:	2000      	movs	r0, #0
    }
   d40e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d40e6:	f000 bc3f 	b.w	d4968 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d40ea:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d40ec:	2800      	cmp	r0, #0
   d40ee:	d0f5      	beq.n	d40dc <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d40f0:	6883      	ldr	r3, [r0, #8]
   d40f2:	b90b      	cbnz	r3, d40f8 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d40f4:	f001 fb2b 	bl	d574e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40f8:	68c3      	ldr	r3, [r0, #12]
   d40fa:	e7ee      	b.n	d40da <_ZN6Thread3runEPv+0xe>

000d40fc <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40fc:	b40e      	push	{r1, r2, r3}
   d40fe:	b503      	push	{r0, r1, lr}
   d4100:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d4102:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4104:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4108:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d410a:	f000 feb2 	bl	d4e72 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d410e:	b002      	add	sp, #8
   d4110:	f85d eb04 	ldr.w	lr, [sp], #4
   d4114:	b003      	add	sp, #12
   d4116:	4770      	bx	lr

000d4118 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4118:	b510      	push	{r4, lr}
      if (_M_manager)
   d411a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d411c:	4604      	mov	r4, r0
      if (_M_manager)
   d411e:	b113      	cbz	r3, d4126 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4120:	2203      	movs	r2, #3
   d4122:	4601      	mov	r1, r0
   d4124:	4798      	blx	r3
    }
   d4126:	4620      	mov	r0, r4
   d4128:	bd10      	pop	{r4, pc}

000d412a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d412a:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d412c:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   d412e:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   d4130:	b135      	cbz	r5, d4140 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   d4132:	4628      	mov	r0, r5
   d4134:	f7ff fff0 	bl	d4118 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d4138:	2110      	movs	r1, #16
   d413a:	4628      	mov	r0, r5
   d413c:	f001 fb01 	bl	d5742 <_ZdlPvj>
   d4140:	4620      	mov	r0, r4
   d4142:	2114      	movs	r1, #20
      }
   d4144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d4148:	f001 bafb 	b.w	d5742 <_ZdlPvj>

000d414c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   d414c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4150:	4607      	mov	r7, r0
   d4152:	b085      	sub	sp, #20
   d4154:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   d4156:	2014      	movs	r0, #20
   d4158:	4929      	ldr	r1, [pc, #164]	; (d4200 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
    Thread(const char *name, wiring_thread_fn_t function,
   d415a:	4616      	mov	r6, r2
   d415c:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   d415e:	f001 faf2 	bl	d5746 <_ZnwjRKSt9nothrow_t>
   d4162:	4604      	mov	r4, r0
   d4164:	b130      	cbz	r0, d4174 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x28>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4166:	2200      	movs	r2, #0
            exited(false) {
   d4168:	e9c0 2200 	strd	r2, r2, [r0]
   d416c:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d4170:	7402      	strb	r2, [r0, #16]
   d4172:	7442      	strb	r2, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d4174:	603c      	str	r4, [r7, #0]
        if (!d_) {
   d4176:	2c00      	cmp	r4, #0
   d4178:	d038      	beq.n	d41ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d417a:	4921      	ldr	r1, [pc, #132]	; (d4200 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
   d417c:	2010      	movs	r0, #16
   d417e:	f001 fae2 	bl	d5746 <_ZnwjRKSt9nothrow_t>
   d4182:	4605      	mov	r5, r0
   d4184:	b1a0      	cbz	r0, d41b0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x64>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4186:	e896 0003 	ldmia.w	r6, {r0, r1}
   d418a:	ab02      	add	r3, sp, #8
   d418c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4190:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4194:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4198:	e893 0003 	ldmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d419c:	2200      	movs	r2, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d419e:	68b3      	ldr	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d41a0:	60ab      	str	r3, [r5, #8]
   d41a2:	e885 0003 	stmia.w	r5, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d41a6:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d41a8:	60b2      	str	r2, [r6, #8]
   d41aa:	68ea      	ldr	r2, [r5, #12]
   d41ac:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d41ae:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d41b0:	6826      	ldr	r6, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d41b2:	6025      	str	r5, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d41b4:	b136      	cbz	r6, d41c4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x78>
   d41b6:	4630      	mov	r0, r6
   d41b8:	f7ff ffae 	bl	d4118 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d41bc:	2110      	movs	r1, #16
   d41be:	4630      	mov	r0, r6
   d41c0:	f001 fabf 	bl	d5742 <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d41c4:	6838      	ldr	r0, [r7, #0]
        if (!d_->wrapper) {
   d41c6:	6803      	ldr	r3, [r0, #0]
   d41c8:	b183      	cbz	r3, d41ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d41ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d41cc:	464a      	mov	r2, r9
   d41ce:	e9cd 0300 	strd	r0, r3, [sp]
   d41d2:	4641      	mov	r1, r8
   d41d4:	4b0b      	ldr	r3, [pc, #44]	; (d4204 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb8>)
   d41d6:	3004      	adds	r0, #4
   d41d8:	f000 fb8e 	bl	d48f8 <os_thread_create>
   d41dc:	b930      	cbnz	r0, d41ec <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
   d41de:	683b      	ldr	r3, [r7, #0]
        while (!d_->started) {
   d41e0:	7c1b      	ldrb	r3, [r3, #16]
   d41e2:	b94b      	cbnz	r3, d41f8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
            HAL_Delay_Milliseconds(1);
   d41e4:	2001      	movs	r0, #1
   d41e6:	f000 fb6f 	bl	d48c8 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d41ea:	e7f8      	b.n	d41de <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x92>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d41ec:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d41ee:	2300      	movs	r3, #0
   d41f0:	603b      	str	r3, [r7, #0]
	if (__p != pointer())
   d41f2:	b108      	cbz	r0, d41f8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
      operator()(_Tp* __ptr) const
   d41f4:	f7ff ff99 	bl	d412a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d41f8:	4638      	mov	r0, r7
   d41fa:	b005      	add	sp, #20
   d41fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4200:	000d6320 	.word	0x000d6320
   d4204:	000d40cd 	.word	0x000d40cd

000d4208 <_ZN6ThreadD1Ev>:
    ~Thread()
   d4208:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d420a:	6803      	ldr	r3, [r0, #0]
   d420c:	4604      	mov	r4, r0
        if (!isValid())
   d420e:	b19b      	cbz	r3, d4238 <_ZN6ThreadD1Ev+0x30>
        return isValid() && os_thread_is_current(d_->handle);
   d4210:	6858      	ldr	r0, [r3, #4]
   d4212:	f000 fb79 	bl	d4908 <os_thread_is_current>
   d4216:	b978      	cbnz	r0, d4238 <_ZN6ThreadD1Ev+0x30>
   d4218:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d421a:	7c5a      	ldrb	r2, [r3, #17]
   d421c:	b912      	cbnz	r2, d4224 <_ZN6ThreadD1Ev+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d421e:	6858      	ldr	r0, [r3, #4]
   d4220:	f000 fb7a 	bl	d4918 <os_thread_join>
        os_thread_cleanup(d_->handle);
   d4224:	6823      	ldr	r3, [r4, #0]
   d4226:	6858      	ldr	r0, [r3, #4]
   d4228:	f000 fb7e 	bl	d4928 <os_thread_cleanup>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d422c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d422e:	2300      	movs	r3, #0
   d4230:	6023      	str	r3, [r4, #0]
	if (__p != pointer())
   d4232:	b108      	cbz	r0, d4238 <_ZN6ThreadD1Ev+0x30>
      operator()(_Tp* __ptr) const
   d4234:	f7ff ff79 	bl	d412a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
	if (__ptr != nullptr)
   d4238:	6820      	ldr	r0, [r4, #0]
   d423a:	b108      	cbz	r0, d4240 <_ZN6ThreadD1Ev+0x38>
      operator()(_Tp* __ptr) const
   d423c:	f7ff ff75 	bl	d412a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d4240:	4620      	mov	r0, r4
   d4242:	bd10      	pop	{r4, pc}

000d4244 <_ZN12FrameManager15compareReadDataEPKcPhS2_i>:
        //     Serial.printlnf("CRC ERROR: \t Calculated %d, Received %d.", crc16Result, fullCRC16);

        return isSameValue;
    };

    bool compareReadData(const char* stage, uint8_t* bytesRead, uint8_t* bytesCompare, int length){
   d4244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4246:	9f08      	ldr	r7, [sp, #32]

        int receivedSum = 0;
        int compareSum = 0;
        for (int i=0; i < length; i++){
   d4248:	2000      	movs	r0, #0
    bool compareReadData(const char* stage, uint8_t* bytesRead, uint8_t* bytesCompare, int length){
   d424a:	460d      	mov	r5, r1
        int compareSum = 0;
   d424c:	4606      	mov	r6, r0
        int receivedSum = 0;
   d424e:	4604      	mov	r4, r0
        for (int i=0; i < length; i++){
   d4250:	42b8      	cmp	r0, r7
   d4252:	da05      	bge.n	d4260 <_ZN12FrameManager15compareReadDataEPKcPhS2_i+0x1c>
            receivedSum += bytesRead[i];
   d4254:	5c11      	ldrb	r1, [r2, r0]
   d4256:	440c      	add	r4, r1
            compareSum += bytesCompare[i];
   d4258:	5c19      	ldrb	r1, [r3, r0]
        for (int i=0; i < length; i++){
   d425a:	3001      	adds	r0, #1
            compareSum += bytesCompare[i];
   d425c:	440e      	add	r6, r1
        for (int i=0; i < length; i++){
   d425e:	e7f7      	b.n	d4250 <_ZN12FrameManager15compareReadDataEPKcPhS2_i+0xc>
        }

        bool isSameValue = receivedSum == compareSum;
   d4260:	42b4      	cmp	r4, r6
   d4262:	bf0c      	ite	eq
   d4264:	2701      	moveq	r7, #1
   d4266:	2700      	movne	r7, #0
        if (isSameValue)
   d4268:	d10a      	bne.n	d4280 <_ZN12FrameManager15compareReadDataEPKcPhS2_i+0x3c>
            Serial.printlnf("SUCCES: Received for %s: \t Expected %d, Received %d.", stage, compareSum, receivedSum);
   d426a:	f000 ffbd 	bl	d51e8 <_Z16_fetch_usbserialv>
   d426e:	4908      	ldr	r1, [pc, #32]	; (d4290 <_ZN12FrameManager15compareReadDataEPKcPhS2_i+0x4c>)
   d4270:	9400      	str	r4, [sp, #0]
   d4272:	4623      	mov	r3, r4
   d4274:	462a      	mov	r2, r5
        else
            Serial.printlnf("ERROR: Received for %s: \t Expected %d, Received %d.", stage, compareSum, receivedSum);
   d4276:	f7ff ff41 	bl	d40fc <_ZN5Print8printlnfEPKcz>

        return isSameValue;
    };
   d427a:	4638      	mov	r0, r7
   d427c:	b003      	add	sp, #12
   d427e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            Serial.printlnf("ERROR: Received for %s: \t Expected %d, Received %d.", stage, compareSum, receivedSum);
   d4280:	f000 ffb2 	bl	d51e8 <_Z16_fetch_usbserialv>
   d4284:	4903      	ldr	r1, [pc, #12]	; (d4294 <_ZN12FrameManager15compareReadDataEPKcPhS2_i+0x50>)
   d4286:	9400      	str	r4, [sp, #0]
   d4288:	4633      	mov	r3, r6
   d428a:	462a      	mov	r2, r5
   d428c:	e7f3      	b.n	d4276 <_ZN12FrameManager15compareReadDataEPKcPhS2_i+0x32>
   d428e:	bf00      	nop
   d4290:	000d5ff4 	.word	0x000d5ff4
   d4294:	000d6029 	.word	0x000d6029

000d4298 <_ZN12FrameManager11receiveDataEh>:
    void receiveData(uint8_t byteReceived) {
   d4298:	b5f0      	push	{r4, r5, r6, r7, lr}
   d429a:	b08b      	sub	sp, #44	; 0x2c
   d429c:	4604      	mov	r4, r0
   d429e:	f88d 100f 	strb.w	r1, [sp, #15]
        Serial.printlnf("Received byte %d", (int)byteReceived);
   d42a2:	f000 ffa1 	bl	d51e8 <_Z16_fetch_usbserialv>
   d42a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d42aa:	4963      	ldr	r1, [pc, #396]	; (d4438 <_ZN12FrameManager11receiveDataEh+0x1a0>)
   d42ac:	f7ff ff26 	bl	d40fc <_ZN5Print8printlnfEPKcz>
        byteCounter++;
   d42b0:	6963      	ldr	r3, [r4, #20]
   d42b2:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
   d42b6:	1c5a      	adds	r2, r3, #1
   d42b8:	6162      	str	r2, [r4, #20]
        switch(currentReceivingState){
   d42ba:	2905      	cmp	r1, #5
   d42bc:	d855      	bhi.n	d436a <_ZN12FrameManager11receiveDataEh+0xd2>
   d42be:	e8df f001 	tbb	[pc, r1]
   d42c2:	1803      	.short	0x1803
   d42c4:	aa7f7332 	.word	0xaa7f7332
                    const char stageName[] = "Preambule";
   d42c8:	4a5c      	ldr	r2, [pc, #368]	; (d443c <_ZN12FrameManager11receiveDataEh+0x1a4>)
   d42ca:	6810      	ldr	r0, [r2, #0]
   d42cc:	6851      	ldr	r1, [r2, #4]
   d42ce:	8912      	ldrh	r2, [r2, #8]
   d42d0:	ab05      	add	r3, sp, #20
   d42d2:	c303      	stmia	r3!, {r0, r1}
   d42d4:	801a      	strh	r2, [r3, #0]
                    if (isVerbose) {compareReadData(stageName, &byteReceived, &sendingFrame.preambule, 1);}
   d42d6:	7863      	ldrb	r3, [r4, #1]
   d42d8:	b14b      	cbz	r3, d42ee <_ZN12FrameManager11receiveDataEh+0x56>
   d42da:	2301      	movs	r3, #1
   d42dc:	9300      	str	r3, [sp, #0]
   d42de:	f10d 020f 	add.w	r2, sp, #15
   d42e2:	f104 0319 	add.w	r3, r4, #25
   d42e6:	a905      	add	r1, sp, #20
   d42e8:	4620      	mov	r0, r4
   d42ea:	f7ff ffab 	bl	d4244 <_ZN12FrameManager15compareReadDataEPKcPhS2_i>
                    currentReceivingState = start;
   d42ee:	2301      	movs	r3, #1
   d42f0:	e016      	b.n	d4320 <_ZN12FrameManager11receiveDataEh+0x88>
                    receivingFrame.startEnd = byteReceived;
   d42f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d42f6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
                    const char stageName[] = "Start";
   d42fa:	4b51      	ldr	r3, [pc, #324]	; (d4440 <_ZN12FrameManager11receiveDataEh+0x1a8>)
   d42fc:	6818      	ldr	r0, [r3, #0]
   d42fe:	889b      	ldrh	r3, [r3, #4]
   d4300:	f8ad 3018 	strh.w	r3, [sp, #24]
                    if (isVerbose) {compareReadData(stageName, &byteReceived, &sendingFrame.startEnd, 1);}
   d4304:	7863      	ldrb	r3, [r4, #1]
                    const char stageName[] = "Start";
   d4306:	9005      	str	r0, [sp, #20]
                    if (isVerbose) {compareReadData(stageName, &byteReceived, &sendingFrame.startEnd, 1);}
   d4308:	b14b      	cbz	r3, d431e <_ZN12FrameManager11receiveDataEh+0x86>
   d430a:	2301      	movs	r3, #1
   d430c:	9300      	str	r3, [sp, #0]
   d430e:	f10d 020f 	add.w	r2, sp, #15
   d4312:	f104 031a 	add.w	r3, r4, #26
   d4316:	a905      	add	r1, sp, #20
   d4318:	4620      	mov	r0, r4
   d431a:	f7ff ff93 	bl	d4244 <_ZN12FrameManager15compareReadDataEPKcPhS2_i>
                    currentReceivingState = entete;
   d431e:	2302      	movs	r3, #2
                    currentReceivingState = start;
   d4320:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    };
   d4324:	e021      	b.n	d436a <_ZN12FrameManager11receiveDataEh+0xd2>
                    if (byteCounter < 4){
   d4326:	2a03      	cmp	r2, #3
   d4328:	7866      	ldrb	r6, [r4, #1]
   d432a:	dc20      	bgt.n	d436e <_ZN12FrameManager11receiveDataEh+0xd6>
                        const char stageName[] = "Entete (typeFlags)";
   d432c:	4b45      	ldr	r3, [pc, #276]	; (d4444 <_ZN12FrameManager11receiveDataEh+0x1ac>)
   d432e:	aa05      	add	r2, sp, #20
   d4330:	f103 0710 	add.w	r7, r3, #16
   d4334:	6818      	ldr	r0, [r3, #0]
   d4336:	6859      	ldr	r1, [r3, #4]
   d4338:	4615      	mov	r5, r2
   d433a:	c503      	stmia	r5!, {r0, r1}
   d433c:	3308      	adds	r3, #8
   d433e:	42bb      	cmp	r3, r7
   d4340:	462a      	mov	r2, r5
   d4342:	d1f7      	bne.n	d4334 <_ZN12FrameManager11receiveDataEh+0x9c>
   d4344:	8819      	ldrh	r1, [r3, #0]
   d4346:	789b      	ldrb	r3, [r3, #2]
   d4348:	8029      	strh	r1, [r5, #0]
   d434a:	70ab      	strb	r3, [r5, #2]
                        if (isVerbose) {compareReadData(stageName, &byteReceived, &sendingFrame.typeFlag, 1);}
   d434c:	b14e      	cbz	r6, d4362 <_ZN12FrameManager11receiveDataEh+0xca>
   d434e:	2301      	movs	r3, #1
   d4350:	9300      	str	r3, [sp, #0]
   d4352:	f10d 020f 	add.w	r2, sp, #15
   d4356:	f104 031b 	add.w	r3, r4, #27
   d435a:	a905      	add	r1, sp, #20
   d435c:	4620      	mov	r0, r4
   d435e:	f7ff ff71 	bl	d4244 <_ZN12FrameManager15compareReadDataEPKcPhS2_i>
                        receivingFrame.typeFlag = byteReceived;
   d4362:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d4366:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    };
   d436a:	b00b      	add	sp, #44	; 0x2c
   d436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        const char stageName[] = "Entete (length)";
   d436e:	4b36      	ldr	r3, [pc, #216]	; (d4448 <_ZN12FrameManager11receiveDataEh+0x1b0>)
   d4370:	ad05      	add	r5, sp, #20
   d4372:	f103 0710 	add.w	r7, r3, #16
   d4376:	6818      	ldr	r0, [r3, #0]
   d4378:	6859      	ldr	r1, [r3, #4]
   d437a:	462a      	mov	r2, r5
   d437c:	c203      	stmia	r2!, {r0, r1}
   d437e:	3308      	adds	r3, #8
   d4380:	42bb      	cmp	r3, r7
   d4382:	4615      	mov	r5, r2
   d4384:	d1f7      	bne.n	d4376 <_ZN12FrameManager11receiveDataEh+0xde>
                        if (isVerbose) {compareReadData(stageName, &byteReceived, &sendingFrame.messageLength, 1);}
   d4386:	b14e      	cbz	r6, d439c <_ZN12FrameManager11receiveDataEh+0x104>
   d4388:	2301      	movs	r3, #1
   d438a:	9300      	str	r3, [sp, #0]
   d438c:	f10d 020f 	add.w	r2, sp, #15
   d4390:	f104 031c 	add.w	r3, r4, #28
   d4394:	a905      	add	r1, sp, #20
   d4396:	4620      	mov	r0, r4
   d4398:	f7ff ff54 	bl	d4244 <_ZN12FrameManager15compareReadDataEPKcPhS2_i>
                        receivingFrame.messageLength = byteReceived;
   d439c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d43a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
                        currentReceivingState = message;
   d43a4:	2303      	movs	r3, #3
   d43a6:	e7bb      	b.n	d4320 <_ZN12FrameManager11receiveDataEh+0x88>
                    receivingFrame.message[byteCounter-5] = byteReceived;
   d43a8:	18e2      	adds	r2, r4, r3
   d43aa:	f89d 100f 	ldrb.w	r1, [sp, #15]
   d43ae:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
                    if (byteCounter+4 >= receivingFrame.messageLength){
   d43b2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   d43b6:	3305      	adds	r3, #5
   d43b8:	4293      	cmp	r3, r2
   d43ba:	dbd6      	blt.n	d436a <_ZN12FrameManager11receiveDataEh+0xd2>
                        currentReceivingState = controle;
   d43bc:	2304      	movs	r3, #4
   d43be:	e7af      	b.n	d4320 <_ZN12FrameManager11receiveDataEh+0x88>
                    if (byteCounter < receivingFrame.messageLength+5){
   d43c0:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   d43c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d43c8:	1d08      	adds	r0, r1, #4
   d43ca:	4282      	cmp	r2, r0
   d43cc:	dc02      	bgt.n	d43d4 <_ZN12FrameManager11receiveDataEh+0x13c>
                        receivingFrame.crc16[0] = byteReceived;
   d43ce:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
   d43d2:	e7ca      	b.n	d436a <_ZN12FrameManager11receiveDataEh+0xd2>
                        receivingFrame.crc16[1] = byteReceived;
   d43d4:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
                        uint16_t fullCRC16 =  receivingFrame.crc16[0] << 16 | receivingFrame.crc16[1];
   d43d8:	b298      	uxth	r0, r3
                        uint16_t crc16Result = crc16(sendingFrame.message, receivingFrame.messageLength);
   d43da:	f104 061d 	add.w	r6, r4, #29
        unsigned short crc = 0xFFFF;
   d43de:	f64f 75ff 	movw	r5, #65535	; 0xffff
        while (length--){
   d43e2:	3901      	subs	r1, #1
   d43e4:	b2c9      	uxtb	r1, r1
   d43e6:	29ff      	cmp	r1, #255	; 0xff
   d43e8:	d00e      	beq.n	d4408 <_ZN12FrameManager11receiveDataEh+0x170>
            x = crc >> 8 ^ *data_p++;
   d43ea:	f816 3b01 	ldrb.w	r3, [r6], #1
   d43ee:	ea83 2315 	eor.w	r3, r3, r5, lsr #8
            x ^= x>>4;
   d43f2:	ea83 1213 	eor.w	r2, r3, r3, lsr #4
            crc = (crc << 8) ^ ((unsigned short)(x << 12)) ^ ((unsigned short)(x <<5)) ^ ((unsigned short)x);
   d43f6:	4613      	mov	r3, r2
   d43f8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   d43fc:	ea82 3203 	eor.w	r2, r2, r3, lsl #12
   d4400:	ea82 1343 	eor.w	r3, r2, r3, lsl #5
   d4404:	b29d      	uxth	r5, r3
        while (length--){
   d4406:	e7ec      	b.n	d43e2 <_ZN12FrameManager11receiveDataEh+0x14a>
                        if(compareCRC16(crc16Result, fullCRC16))
   d4408:	42a8      	cmp	r0, r5
                            receivingFrame.crcCorrect = true;
   d440a:	bf04      	itt	eq
   d440c:	2301      	moveq	r3, #1
   d440e:	f884 3028 	strbeq.w	r3, [r4, #40]	; 0x28
                        currentReceivingState = end;
   d4412:	2305      	movs	r3, #5
   d4414:	e784      	b.n	d4320 <_ZN12FrameManager11receiveDataEh+0x88>
                    const char stageName[] = "End";
   d4416:	4b0d      	ldr	r3, [pc, #52]	; (d444c <_ZN12FrameManager11receiveDataEh+0x1b4>)
   d4418:	9305      	str	r3, [sp, #20]
                    if (isVerbose) {compareReadData(stageName, &byteReceived, &sendingFrame.startEnd, 1);}
   d441a:	7863      	ldrb	r3, [r4, #1]
   d441c:	b14b      	cbz	r3, d4432 <_ZN12FrameManager11receiveDataEh+0x19a>
   d441e:	2301      	movs	r3, #1
   d4420:	9300      	str	r3, [sp, #0]
   d4422:	f10d 020f 	add.w	r2, sp, #15
   d4426:	f104 031a 	add.w	r3, r4, #26
   d442a:	a905      	add	r1, sp, #20
   d442c:	4620      	mov	r0, r4
   d442e:	f7ff ff09 	bl	d4244 <_ZN12FrameManager15compareReadDataEPKcPhS2_i>
                    byteCounter = 0;
   d4432:	2300      	movs	r3, #0
   d4434:	6163      	str	r3, [r4, #20]
   d4436:	e75a      	b.n	d42ee <_ZN12FrameManager11receiveDataEh+0x56>
   d4438:	000d605d 	.word	0x000d605d
   d443c:	000d606e 	.word	0x000d606e
   d4440:	000d6078 	.word	0x000d6078
   d4444:	000d607e 	.word	0x000d607e
   d4448:	000d6091 	.word	0x000d6091
   d444c:	00646e45 	.word	0x00646e45

000d4450 <_ZN12FrameManager10receiveBitEh>:
    void receiveBit(uint8_t bitReceived){
   d4450:	b510      	push	{r4, lr}
        bitCounter++;
   d4452:	6903      	ldr	r3, [r0, #16]
   d4454:	3301      	adds	r3, #1
   d4456:	6103      	str	r3, [r0, #16]
        byteConcat = (byteConcat << 1) | bitReceived;
   d4458:	7e03      	ldrb	r3, [r0, #24]
    void receiveBit(uint8_t bitReceived){
   d445a:	4604      	mov	r4, r0
        byteConcat = (byteConcat << 1) | bitReceived;
   d445c:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
   d4460:	7601      	strb	r1, [r0, #24]
        Serial.printlnf("Received bit number %d", bitCounter);
   d4462:	f000 fec1 	bl	d51e8 <_Z16_fetch_usbserialv>
   d4466:	6922      	ldr	r2, [r4, #16]
   d4468:	4905      	ldr	r1, [pc, #20]	; (d4480 <_ZN12FrameManager10receiveBitEh+0x30>)
   d446a:	f7ff fe47 	bl	d40fc <_ZN5Print8printlnfEPKcz>
        if (!(bitCounter%8)){
   d446e:	6923      	ldr	r3, [r4, #16]
   d4470:	075b      	lsls	r3, r3, #29
   d4472:	d103      	bne.n	d447c <_ZN12FrameManager10receiveBitEh+0x2c>
            receiveData(byteConcat);
   d4474:	7e21      	ldrb	r1, [r4, #24]
   d4476:	4620      	mov	r0, r4
   d4478:	f7ff ff0e 	bl	d4298 <_ZN12FrameManager11receiveDataEh>
    };
   d447c:	bd10      	pop	{r4, pc}
   d447e:	bf00      	nop
   d4480:	000d60a1 	.word	0x000d60a1

000d4484 <_ZN14MessageManagerC1Ev>:
#include "FrameManager.ino"

class MessageManager {
   d4484:	b538      	push	{r3, r4, r5, lr}
   d4486:	2238      	movs	r2, #56	; 0x38
   d4488:	4604      	mov	r4, r0
   d448a:	2100      	movs	r1, #0
   d448c:	f001 fd74 	bl	d5f78 <memset>
class FrameManager {
   d4490:	4a12      	ldr	r2, [pc, #72]	; (d44dc <_ZN14MessageManagerC1Ev+0x58>)
   d4492:	61a2      	str	r2, [r4, #24]
struct frame {
   d4494:	f240 1201 	movw	r2, #257	; 0x101
   d4498:	83a2      	strh	r2, [r4, #28]
   d449a:	2255      	movs	r2, #85	; 0x55
   d449c:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
   d44a0:	227e      	movs	r2, #126	; 0x7e
   d44a2:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
class FrameManager {
   d44a6:	4a0e      	ldr	r2, [pc, #56]	; (d44e0 <_ZN14MessageManagerC1Ev+0x5c>)
   d44a8:	ca07      	ldmia	r2, {r0, r1, r2}
   d44aa:	f44f 7380 	mov.w	r3, #256	; 0x100
   d44ae:	8023      	strh	r3, [r4, #0]
   d44b0:	2300      	movs	r3, #0
struct frame {
   d44b2:	2501      	movs	r5, #1
   d44b4:	f884 3020 	strb.w	r3, [r4, #32]
   d44b8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
   d44bc:	8523      	strh	r3, [r4, #40]	; 0x28
class FrameManager {
   d44be:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
   d44c2:	f104 032c 	add.w	r3, r4, #44	; 0x2c
struct frame {
   d44c6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
   d44ca:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
class FrameManager {
   d44ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d44d2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
   d44d6:	4620      	mov	r0, r4
   d44d8:	bd38      	pop	{r3, r4, r5, pc}
   d44da:	bf00      	nop
   d44dc:	007e5500 	.word	0x007e5500
   d44e0:	000d61a4 	.word	0x000d61a4

000d44e4 <setup>:
system_tick_t lastThreadTime = 0;
system_tick_t lastMessageTime = 0;

int bitCounter = 0;

void setup() {
   d44e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	Serial.begin(9600);

    pinMode(outputPin, OUTPUT_OPEN_DRAIN);
   d44e8:	4d37      	ldr	r5, [pc, #220]	; (d45c8 <setup+0xe4>)
    pinMode(inputPin, INPUT_PULLUP);
   d44ea:	4c38      	ldr	r4, [pc, #224]	; (d45cc <setup+0xe8>)
void setup() {
   d44ec:	b095      	sub	sp, #84	; 0x54
	Serial.begin(9600);
   d44ee:	f000 fe7b 	bl	d51e8 <_Z16_fetch_usbserialv>
   d44f2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d44f6:	f000 fe67 	bl	d51c8 <_ZN9USBSerial5beginEl>
    pinMode(outputPin, OUTPUT_OPEN_DRAIN);
   d44fa:	8828      	ldrh	r0, [r5, #0]
   d44fc:	2105      	movs	r1, #5
   d44fe:	f001 f8b1 	bl	d5664 <pinMode>
    pinMode(inputPin, INPUT_PULLUP);
   d4502:	8820      	ldrh	r0, [r4, #0]
   d4504:	2102      	movs	r1, #2
   d4506:	f001 f8ad 	bl	d5664 <pinMode>

    digitalWrite(outputPin, LOW);

    attachInterrupt(inputPin, inputEvent, CHANGE);
   d450a:	2600      	movs	r6, #0
    digitalWrite(outputPin, LOW);
   d450c:	8828      	ldrh	r0, [r5, #0]
   d450e:	2100      	movs	r1, #0
   d4510:	f001 f8b9 	bl	d5686 <digitalWrite>
    attachInterrupt(inputPin, inputEvent, CHANGE);
   d4514:	9600      	str	r6, [sp, #0]
   d4516:	492e      	ldr	r1, [pc, #184]	; (d45d0 <setup+0xec>)
   d4518:	8820      	ldrh	r0, [r4, #0]
    CurrentInputState = initial;

    msgManager = MessageManager();
   d451a:	4c2e      	ldr	r4, [pc, #184]	; (d45d4 <setup+0xf0>)
    attachInterrupt(inputPin, inputEvent, CHANGE);
   d451c:	f04f 33ff 	mov.w	r3, #4294967295
   d4520:	4632      	mov	r2, r6
   d4522:	f000 fe8d 	bl	d5240 <_Z15attachInterrupttPFvvE13InterruptModeah>
    CurrentInputState = initial;
   d4526:	4b2c      	ldr	r3, [pc, #176]	; (d45d8 <setup+0xf4>)
    msgManager = MessageManager();
   d4528:	2240      	movs	r2, #64	; 0x40
   d452a:	4631      	mov	r1, r6
   d452c:	a804      	add	r0, sp, #16
    CurrentInputState = initial;
   d452e:	701e      	strb	r6, [r3, #0]
    msgManager = MessageManager();
   d4530:	ad04      	add	r5, sp, #16
   d4532:	f001 fd21 	bl	d5f78 <memset>
   d4536:	a804      	add	r0, sp, #16
   d4538:	f7ff ffa4 	bl	d4484 <_ZN14MessageManagerC1Ev>
   d453c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d453e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4548:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   d454c:	c407      	stmia	r4!, {r0, r1, r2}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d454e:	4630      	mov	r0, r6
   d4550:	7023      	strb	r3, [r4, #0]
   d4552:	f000 f9c9 	bl	d48e8 <hal_timer_millis>
        while (_while() && !_condition()) {
   d4556:	f247 542f 	movw	r4, #29999	; 0x752f
        return hal_timer_millis(nullptr);
   d455a:	4607      	mov	r7, r0
        while (_while() && !_condition()) {
   d455c:	2500      	movs	r5, #0
        return hal_timer_millis(nullptr);
   d455e:	2000      	movs	r0, #0
   d4560:	f000 f9c2 	bl	d48e8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4564:	ebb0 0807 	subs.w	r8, r0, r7
   d4568:	eb61 0906 	sbc.w	r9, r1, r6
        while (_while() && !_condition()) {
   d456c:	454d      	cmp	r5, r9
   d456e:	bf08      	it	eq
   d4570:	4544      	cmpeq	r4, r8
   d4572:	d307      	bcc.n	d4584 <setup+0xa0>

    waitFor(Serial.isConnected, 30000);
   d4574:	f000 fe38 	bl	d51e8 <_Z16_fetch_usbserialv>
   d4578:	f000 fe2a 	bl	d51d0 <_ZN9USBSerial11isConnectedEv>
   d457c:	b910      	cbnz	r0, d4584 <setup+0xa0>
            spark_process();
   d457e:	f000 fb4f 	bl	d4c20 <spark_process>
        while (_while() && !_condition()) {
   d4582:	e7ec      	b.n	d455e <setup+0x7a>
   d4584:	f000 fe30 	bl	d51e8 <_Z16_fetch_usbserialv>
   d4588:	f000 fe22 	bl	d51d0 <_ZN9USBSerial11isConnectedEv>
    Serial.println("Serial connected: starting");
   d458c:	f000 fe2c 	bl	d51e8 <_Z16_fetch_usbserialv>
   d4590:	4912      	ldr	r1, [pc, #72]	; (d45dc <setup+0xf8>)
   d4592:	f000 fc46 	bl	d4e22 <_ZN5Print7printlnEPKc>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4596:	4b12      	ldr	r3, [pc, #72]	; (d45e0 <setup+0xfc>)
   d4598:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d459a:	4b12      	ldr	r3, [pc, #72]	; (d45e4 <setup+0x100>)
   d459c:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
   d459e:	4b12      	ldr	r3, [pc, #72]	; (d45e8 <setup+0x104>)
   d45a0:	9306      	str	r3, [sp, #24]
    Thread thread("outputThread", outputThread);
   d45a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d45a6:	4911      	ldr	r1, [pc, #68]	; (d45ec <setup+0x108>)
   d45a8:	9300      	str	r3, [sp, #0]
   d45aa:	aa04      	add	r2, sp, #16
   d45ac:	2302      	movs	r3, #2
   d45ae:	a803      	add	r0, sp, #12
   d45b0:	f7ff fdcc 	bl	d414c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
    class function<_Res(_ArgTypes...)>
   d45b4:	a804      	add	r0, sp, #16
   d45b6:	f7ff fdaf 	bl	d4118 <_ZNSt14_Function_baseD1Ev>
   d45ba:	a803      	add	r0, sp, #12
   d45bc:	f7ff fe24 	bl	d4208 <_ZN6ThreadD1Ev>
}
   d45c0:	b015      	add	sp, #84	; 0x54
   d45c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d45c6:	bf00      	nop
   d45c8:	2003e588 	.word	0x2003e588
   d45cc:	2003e580 	.word	0x2003e580
   d45d0:	000d4639 	.word	0x000d4639
   d45d4:	2003e604 	.word	0x2003e604
   d45d8:	2003e5f9 	.word	0x2003e5f9
   d45dc:	000d60b8 	.word	0x000d60b8
   d45e0:	000d47bd 	.word	0x000d47bd
   d45e4:	000d40b3 	.word	0x000d40b3
   d45e8:	000d40b7 	.word	0x000d40b7
   d45ec:	000d60d3 	.word	0x000d60d3

000d45f0 <loop>:

    // Call messages to send here, split by long delays?
    // char* message1 = [H, e, l, l, o, , W, o, r, l, d, !];
    // ex. msgManager.sendMessage(message1);
    // delay(10000); OR os_thread_delay_until(&lastMessageTime, 10000)
}
   d45f0:	4770      	bx	lr
	...

000d45f4 <_Z16changeInputState10InputState>:
    }
};

// Function used to change state and perform necessary actions right away (like outputing)
void changeInputState(InputState newInputState) {
    switch (newInputState) {
   d45f4:	2801      	cmp	r0, #1
void changeInputState(InputState newInputState) {
   d45f6:	b510      	push	{r4, lr}
   d45f8:	4604      	mov	r4, r0
    switch (newInputState) {
   d45fa:	d004      	beq.n	d4606 <_Z16changeInputState10InputState+0x12>
   d45fc:	2803      	cmp	r0, #3
   d45fe:	d00c      	beq.n	d461a <_Z16changeInputState10InputState+0x26>
            Serial.println("READ: 1");
            msgManager.frameManager.receiveBit(0b1);
            break;
    }
    // Serial.printlnf("Received bit number %d", bitCounter++);
    CurrentInputState = newInputState; // Change to new state for next event
   d4600:	4b09      	ldr	r3, [pc, #36]	; (d4628 <_Z16changeInputState10InputState+0x34>)
   d4602:	701c      	strb	r4, [r3, #0]
}
   d4604:	bd10      	pop	{r4, pc}
            Serial.println("READ: 0");
   d4606:	f000 fdef 	bl	d51e8 <_Z16_fetch_usbserialv>
   d460a:	4908      	ldr	r1, [pc, #32]	; (d462c <_Z16changeInputState10InputState+0x38>)
   d460c:	f000 fc09 	bl	d4e22 <_ZN5Print7printlnEPKc>
            msgManager.frameManager.receiveBit(0b0);
   d4610:	2100      	movs	r1, #0
            msgManager.frameManager.receiveBit(0b1);
   d4612:	4807      	ldr	r0, [pc, #28]	; (d4630 <_Z16changeInputState10InputState+0x3c>)
   d4614:	f7ff ff1c 	bl	d4450 <_ZN12FrameManager10receiveBitEh>
            break;
   d4618:	e7f2      	b.n	d4600 <_Z16changeInputState10InputState+0xc>
            Serial.println("READ: 1");
   d461a:	f000 fde5 	bl	d51e8 <_Z16_fetch_usbserialv>
   d461e:	4905      	ldr	r1, [pc, #20]	; (d4634 <_Z16changeInputState10InputState+0x40>)
   d4620:	f000 fbff 	bl	d4e22 <_ZN5Print7printlnEPKc>
            msgManager.frameManager.receiveBit(0b1);
   d4624:	2101      	movs	r1, #1
   d4626:	e7f4      	b.n	d4612 <_Z16changeInputState10InputState+0x1e>
   d4628:	2003e5f9 	.word	0x2003e5f9
   d462c:	000d60e0 	.word	0x000d60e0
   d4630:	2003e604 	.word	0x2003e604
   d4634:	000d60e8 	.word	0x000d60e8

000d4638 <_Z10inputEventv>:

void inputEvent() {
   d4638:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    //     }
    //     return;
    // }
    //----------

    int duration = millis() - lastChangeTime;
   d463c:	4e40      	ldr	r6, [pc, #256]	; (d4740 <_Z10inputEventv+0x108>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d463e:	f000 f94b 	bl	d48d8 <HAL_Timer_Get_Milli_Seconds>
   d4642:	6833      	ldr	r3, [r6, #0]
   d4644:	1ac5      	subs	r5, r0, r3
   d4646:	f000 f947 	bl	d48d8 <HAL_Timer_Get_Milli_Seconds>
    lastChangeTime = millis();

    // If 80% higher than one clock period: must be two periods (AKA: long period)
    int longPeriodMin = inputClockPeriod * 1.8;
   d464a:	4b3e      	ldr	r3, [pc, #248]	; (d4744 <_Z10inputEventv+0x10c>)
    lastChangeTime = millis();
   d464c:	6030      	str	r0, [r6, #0]
    int longPeriodMin = inputClockPeriod * 1.8;
   d464e:	6818      	ldr	r0, [r3, #0]
   d4650:	f001 f9d2 	bl	d59f8 <__aeabi_i2d>
    int longPeriodMax = inputClockPeriod * 2.2;
    int shortPeriodMin = inputClockPeriod * 0.8;
   d4654:	a334      	add	r3, pc, #208	; (adr r3, d4728 <_Z10inputEventv+0xf0>)
   d4656:	e9d3 2300 	ldrd	r2, r3, [r3]
    int longPeriodMin = inputClockPeriod * 1.8;
   d465a:	4680      	mov	r8, r0
   d465c:	4689      	mov	r9, r1
    int shortPeriodMin = inputClockPeriod * 0.8;
   d465e:	f001 fa35 	bl	d5acc <__aeabi_dmul>
   d4662:	f001 fc45 	bl	d5ef0 <__aeabi_d2iz>

    if(duration < shortPeriodMin) {
   d4666:	4285      	cmp	r5, r0
void inputEvent() {
   d4668:	f04f 0400 	mov.w	r4, #0
    if(duration < shortPeriodMin) {
   d466c:	db3a      	blt.n	d46e4 <_Z10inputEventv+0xac>
    int longPeriodMax = inputClockPeriod * 2.2;
   d466e:	a330      	add	r3, pc, #192	; (adr r3, d4730 <_Z10inputEventv+0xf8>)
   d4670:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4674:	4640      	mov	r0, r8
   d4676:	4649      	mov	r1, r9
   d4678:	f001 fa28 	bl	d5acc <__aeabi_dmul>
   d467c:	f001 fc38 	bl	d5ef0 <__aeabi_d2iz>
        return;
    }

    // Determine newStateDuration (time since last change event)
    StateDuration newStateDuration;
    if (duration > longPeriodMax) {
   d4680:	4285      	cmp	r5, r0
    int longPeriodMax = inputClockPeriod * 2.2;
   d4682:	4606      	mov	r6, r0
    if (duration > longPeriodMax) {
   d4684:	dc1b      	bgt.n	d46be <_Z10inputEventv+0x86>
    int longPeriodMin = inputClockPeriod * 1.8;
   d4686:	a32c      	add	r3, pc, #176	; (adr r3, d4738 <_Z10inputEventv+0x100>)
   d4688:	e9d3 2300 	ldrd	r2, r3, [r3]
   d468c:	4640      	mov	r0, r8
   d468e:	4649      	mov	r1, r9
   d4690:	f001 fa1c 	bl	d5acc <__aeabi_dmul>
   d4694:	f001 fc2c 	bl	d5ef0 <__aeabi_d2iz>
        newStateDuration = veryLongPeriod;
    }
    else if (duration >= longPeriodMin && duration < longPeriodMax) {
   d4698:	4285      	cmp	r5, r0
   d469a:	db02      	blt.n	d46a2 <_Z10inputEventv+0x6a>
        newStateDuration = longPeriod;
   d469c:	42b5      	cmp	r5, r6
   d469e:	bfb8      	it	lt
   d46a0:	2401      	movlt	r4, #1
    }
    
    
    // Printing (debug)
    //Serial.printlnf("Read %s impulse duration: %d ms -> #%d (CurrentInputState: %d)", inputCurrentStateHigh ? "HIGH" : "LOW", duration, newStateDuration, CurrentInputState);
    inputCurrentStateHigh = !inputCurrentStateHigh;
   d46a2:	4a29      	ldr	r2, [pc, #164]	; (d4748 <_Z10inputEventv+0x110>)
   d46a4:	7813      	ldrb	r3, [r2, #0]
   d46a6:	f083 0301 	eor.w	r3, r3, #1
   d46aa:	7013      	strb	r3, [r2, #0]

    // STATE MACHINE: Decode Manchester
    switch (CurrentInputState) {
   d46ac:	4b27      	ldr	r3, [pc, #156]	; (d474c <_Z10inputEventv+0x114>)
   d46ae:	781a      	ldrb	r2, [r3, #0]
   d46b0:	2a04      	cmp	r2, #4
   d46b2:	d817      	bhi.n	d46e4 <_Z10inputEventv+0xac>
   d46b4:	e8df f002 	tbb	[pc, r2]
   d46b8:	251c1305 	.word	0x251c1305
   d46bc:	2e          	.byte	0x2e
   d46bd:	00          	.byte	0x00
        newStateDuration = veryLongPeriod;
   d46be:	2402      	movs	r4, #2
   d46c0:	e7ef      	b.n	d46a2 <_Z10inputEventv+0x6a>
        case initial:
            if (newStateDuration == shortPeriod || newStateDuration == veryLongPeriod) {
   d46c2:	07e3      	lsls	r3, r4, #31
   d46c4:	d404      	bmi.n	d46d0 <_Z10inputEventv+0x98>
                changeInputState(output0);
   d46c6:	2001      	movs	r0, #1
                Serial.printlnf("ERROR: expected shortPeriod in wait state got #%d", newStateDuration);
            }
            changeInputState(output1);
            break;
    }
}
   d46c8:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
               changeInputState(output1);
   d46cc:	f7ff bf92 	b.w	d45f4 <_Z16changeInputState10InputState>
                Serial.println("ERROR: initial state got longPeriod");
   d46d0:	f000 fd8a 	bl	d51e8 <_Z16_fetch_usbserialv>
   d46d4:	491e      	ldr	r1, [pc, #120]	; (d4750 <_Z10inputEventv+0x118>)
}
   d46d6:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
                Serial.println("UNDEFINED behaviour for veryLongPeriod in inputState 'output1'");
   d46da:	f000 bba2 	b.w	d4e22 <_ZN5Print7printlnEPKc>
            if (newStateDuration == shortPeriod) {
   d46de:	b91c      	cbnz	r4, d46e8 <_Z10inputEventv+0xb0>
    CurrentInputState = newInputState; // Change to new state for next event
   d46e0:	2202      	movs	r2, #2
   d46e2:	701a      	strb	r2, [r3, #0]
}
   d46e4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
            else if (newStateDuration == longPeriod) {
   d46e8:	2c01      	cmp	r4, #1
   d46ea:	d1fb      	bne.n	d46e4 <_Z10inputEventv+0xac>
               changeInputState(output1);
   d46ec:	2003      	movs	r0, #3
   d46ee:	e7eb      	b.n	d46c8 <_Z10inputEventv+0x90>
            if (newStateDuration != shortPeriod) {
   d46f0:	2c00      	cmp	r4, #0
   d46f2:	d0e8      	beq.n	d46c6 <_Z10inputEventv+0x8e>
                Serial.printlnf("ERROR: expected shortPeriod in wait state got #%d", newStateDuration);
   d46f4:	f000 fd78 	bl	d51e8 <_Z16_fetch_usbserialv>
   d46f8:	4916      	ldr	r1, [pc, #88]	; (d4754 <_Z10inputEventv+0x11c>)
   d46fa:	4622      	mov	r2, r4
   d46fc:	f7ff fcfe 	bl	d40fc <_ZN5Print8printlnfEPKcz>
   d4700:	e7e1      	b.n	d46c6 <_Z10inputEventv+0x8e>
            if (newStateDuration == shortPeriod) {
   d4702:	b90c      	cbnz	r4, d4708 <_Z10inputEventv+0xd0>
    CurrentInputState = newInputState; // Change to new state for next event
   d4704:	2204      	movs	r2, #4
   d4706:	e7ec      	b.n	d46e2 <_Z10inputEventv+0xaa>
            else if (newStateDuration == longPeriod) {
   d4708:	2c01      	cmp	r4, #1
   d470a:	d0dc      	beq.n	d46c6 <_Z10inputEventv+0x8e>
                Serial.println("UNDEFINED behaviour for veryLongPeriod in inputState 'output1'");
   d470c:	f000 fd6c 	bl	d51e8 <_Z16_fetch_usbserialv>
   d4710:	4911      	ldr	r1, [pc, #68]	; (d4758 <_Z10inputEventv+0x120>)
   d4712:	e7e0      	b.n	d46d6 <_Z10inputEventv+0x9e>
            if (newStateDuration != shortPeriod) {
   d4714:	2c00      	cmp	r4, #0
   d4716:	d0e9      	beq.n	d46ec <_Z10inputEventv+0xb4>
                Serial.printlnf("ERROR: expected shortPeriod in wait state got #%d", newStateDuration);
   d4718:	f000 fd66 	bl	d51e8 <_Z16_fetch_usbserialv>
   d471c:	490d      	ldr	r1, [pc, #52]	; (d4754 <_Z10inputEventv+0x11c>)
   d471e:	4622      	mov	r2, r4
   d4720:	f7ff fcec 	bl	d40fc <_ZN5Print8printlnfEPKcz>
   d4724:	e7e2      	b.n	d46ec <_Z10inputEventv+0xb4>
   d4726:	bf00      	nop
   d4728:	9999999a 	.word	0x9999999a
   d472c:	3fe99999 	.word	0x3fe99999
   d4730:	9999999a 	.word	0x9999999a
   d4734:	40019999 	.word	0x40019999
   d4738:	cccccccd 	.word	0xcccccccd
   d473c:	3ffccccc 	.word	0x3ffccccc
   d4740:	2003e5fc 	.word	0x2003e5fc
   d4744:	2003e57c 	.word	0x2003e57c
   d4748:	2003e5fa 	.word	0x2003e5fa
   d474c:	2003e5f9 	.word	0x2003e5f9
   d4750:	000d60f0 	.word	0x000d60f0
   d4754:	000d6114 	.word	0x000d6114
   d4758:	000d6146 	.word	0x000d6146

000d475c <_Z6output8PinState>:
// ----------
// HANDLE OUTPUT 
// ----------


void output(PinState level) {
   d475c:	b508      	push	{r3, lr}
    digitalWrite(outputPin, level);
   d475e:	4b06      	ldr	r3, [pc, #24]	; (d4778 <_Z6output8PinState+0x1c>)
void output(PinState level) {
   d4760:	4601      	mov	r1, r0
    digitalWrite(outputPin, level);
   d4762:	8818      	ldrh	r0, [r3, #0]
   d4764:	f000 ff8f 	bl	d5686 <digitalWrite>
    os_thread_delay_until(&lastThreadTime, outputClockPeriod);
   d4768:	4b04      	ldr	r3, [pc, #16]	; (d477c <_Z6output8PinState+0x20>)
   d476a:	4805      	ldr	r0, [pc, #20]	; (d4780 <_Z6output8PinState+0x24>)
   d476c:	6819      	ldr	r1, [r3, #0]
}
   d476e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_thread_delay_until(&lastThreadTime, outputClockPeriod);
   d4772:	f000 b8e1 	b.w	d4938 <os_thread_delay_until>
   d4776:	bf00      	nop
   d4778:	2003e588 	.word	0x2003e588
   d477c:	2003e584 	.word	0x2003e584
   d4780:	2003e600 	.word	0x2003e600

000d4784 <_Z18sendBitsManchesterPbi>:

void sendBitsManchester(bool bits[], int bitCount) {
   d4784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (int i = 0; i < bitCount; i++) {
        if (bits[i] == BIT1) {
   d4786:	4f0c      	ldr	r7, [pc, #48]	; (d47b8 <_Z18sendBitsManchesterPbi+0x34>)
void sendBitsManchester(bool bits[], int bitCount) {
   d4788:	4605      	mov	r5, r0
   d478a:	460e      	mov	r6, r1
    for (int i = 0; i < bitCount; i++) {
   d478c:	2400      	movs	r4, #0
   d478e:	42b4      	cmp	r4, r6
   d4790:	da10      	bge.n	d47b4 <_Z18sendBitsManchesterPbi+0x30>
        if (bits[i] == BIT1) {
   d4792:	5d2a      	ldrb	r2, [r5, r4]
   d4794:	783b      	ldrb	r3, [r7, #0]
   d4796:	429a      	cmp	r2, r3
   d4798:	d107      	bne.n	d47aa <_Z18sendBitsManchesterPbi+0x26>
            // Send 1 in Manchester
            //Serial.println("SEND: 1");
            output(HIGH);
   d479a:	2001      	movs	r0, #1
   d479c:	f7ff ffde 	bl	d475c <_Z6output8PinState>
            output(LOW);
   d47a0:	2000      	movs	r0, #0
        }
        else {
            // Send 0 in Manchester
            //Serial.println("SEND: 0");
            output(LOW);
            output(HIGH);
   d47a2:	f7ff ffdb 	bl	d475c <_Z6output8PinState>
    for (int i = 0; i < bitCount; i++) {
   d47a6:	3401      	adds	r4, #1
   d47a8:	e7f1      	b.n	d478e <_Z18sendBitsManchesterPbi+0xa>
            output(LOW);
   d47aa:	2000      	movs	r0, #0
   d47ac:	f7ff ffd6 	bl	d475c <_Z6output8PinState>
            output(HIGH);
   d47b0:	2001      	movs	r0, #1
   d47b2:	e7f6      	b.n	d47a2 <_Z18sendBitsManchesterPbi+0x1e>
        }
    }
}
   d47b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d47b6:	bf00      	nop
   d47b8:	2003e578 	.word	0x2003e578

000d47bc <_Z12outputThreadv>:

void outputThread() {
   d47bc:	b507      	push	{r0, r1, r2, lr}
    //delay(5000);
    Serial.println("Starting output loop");
   d47be:	f000 fd13 	bl	d51e8 <_Z16_fetch_usbserialv>
   d47c2:	4915      	ldr	r1, [pc, #84]	; (d4818 <_Z12outputThreadv+0x5c>)
    while(true) {
        
        bool bitsToSend[] = {BIT0, BIT1, BIT1, BIT1, BIT0, BIT1, BIT0, BIT1};
   d47c4:	4e15      	ldr	r6, [pc, #84]	; (d481c <_Z12outputThreadv+0x60>)
   d47c6:	4d16      	ldr	r5, [pc, #88]	; (d4820 <_Z12outputThreadv+0x64>)
        sendBitsManchester(bitsToSend, 8);
        Serial.println("---------");
   d47c8:	4c16      	ldr	r4, [pc, #88]	; (d4824 <_Z12outputThreadv+0x68>)
    Serial.println("Starting output loop");
   d47ca:	f000 fb2a 	bl	d4e22 <_ZN5Print7printlnEPKc>
        bool bitsToSend[] = {BIT0, BIT1, BIT1, BIT1, BIT0, BIT1, BIT0, BIT1};
   d47ce:	782b      	ldrb	r3, [r5, #0]
   d47d0:	7832      	ldrb	r2, [r6, #0]
   d47d2:	f88d 2000 	strb.w	r2, [sp]
        sendBitsManchester(bitsToSend, 8);
   d47d6:	2108      	movs	r1, #8
   d47d8:	4668      	mov	r0, sp
        bool bitsToSend[] = {BIT0, BIT1, BIT1, BIT1, BIT0, BIT1, BIT0, BIT1};
   d47da:	f88d 3001 	strb.w	r3, [sp, #1]
   d47de:	f88d 3002 	strb.w	r3, [sp, #2]
   d47e2:	f88d 3003 	strb.w	r3, [sp, #3]
   d47e6:	f88d 2004 	strb.w	r2, [sp, #4]
   d47ea:	f88d 3005 	strb.w	r3, [sp, #5]
   d47ee:	f88d 2006 	strb.w	r2, [sp, #6]
   d47f2:	f88d 3007 	strb.w	r3, [sp, #7]
        sendBitsManchester(bitsToSend, 8);
   d47f6:	f7ff ffc5 	bl	d4784 <_Z18sendBitsManchesterPbi>
        Serial.println("---------");
   d47fa:	f000 fcf5 	bl	d51e8 <_Z16_fetch_usbserialv>
   d47fe:	4621      	mov	r1, r4
   d4800:	f000 fb0f 	bl	d4e22 <_ZN5Print7printlnEPKc>
        os_thread_delay_until(&lastThreadTime, 2000);
   d4804:	4808      	ldr	r0, [pc, #32]	; (d4828 <_Z12outputThreadv+0x6c>)
   d4806:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d480a:	f000 f895 	bl	d4938 <os_thread_delay_until>
        CurrentInputState = initial;
   d480e:	4b07      	ldr	r3, [pc, #28]	; (d482c <_Z12outputThreadv+0x70>)
   d4810:	2200      	movs	r2, #0
   d4812:	701a      	strb	r2, [r3, #0]
    while(true) {
   d4814:	e7db      	b.n	d47ce <_Z12outputThreadv+0x12>
   d4816:	bf00      	nop
   d4818:	000d6185 	.word	0x000d6185
   d481c:	2003e5f8 	.word	0x2003e5f8
   d4820:	2003e578 	.word	0x2003e578
   d4824:	000d619a 	.word	0x000d619a
   d4828:	2003e600 	.word	0x2003e600
   d482c:	2003e5f9 	.word	0x2003e5f9

000d4830 <_GLOBAL__sub_I_outputPin>:
	}
}
   d4830:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
   d4832:	2100      	movs	r1, #0
   d4834:	2001      	movs	r0, #1
   d4836:	f000 f977 	bl	d4b28 <system_thread_set_state>
MessageManager msgManager;
   d483a:	4802      	ldr	r0, [pc, #8]	; (d4844 <_GLOBAL__sub_I_outputPin+0x14>)
   d483c:	f7ff fe22 	bl	d4484 <_ZN14MessageManagerC1Ev>
}
   d4840:	bd08      	pop	{r3, pc}
   d4842:	bf00      	nop
   d4844:	2003e604 	.word	0x2003e604

000d4848 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <netdb_freeaddrinfo+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	689b      	ldr	r3, [r3, #8]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	00030268 	.word	0x00030268

000d4858 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <netdb_getaddrinfo+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	68db      	ldr	r3, [r3, #12]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	00030268 	.word	0x00030268

000d4868 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <HAL_Pin_Mode+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	689b      	ldr	r3, [r3, #8]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	0003022c 	.word	0x0003022c

000d4878 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <HAL_Get_Pin_Mode+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	68db      	ldr	r3, [r3, #12]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	0003022c 	.word	0x0003022c

000d4888 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <HAL_GPIO_Write+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	691b      	ldr	r3, [r3, #16]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	0003022c 	.word	0x0003022c

000d4898 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <HAL_Interrupts_Attach+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	699b      	ldr	r3, [r3, #24]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	0003022c 	.word	0x0003022c

000d48a8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <HAL_Interrupts_Detach+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	69db      	ldr	r3, [r3, #28]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	0003022c 	.word	0x0003022c

000d48b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <HAL_RNG_GetRandomNumber+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	685b      	ldr	r3, [r3, #4]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030218 	.word	0x00030218

000d48c8 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <HAL_Delay_Milliseconds+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	689b      	ldr	r3, [r3, #8]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030218 	.word	0x00030218

000d48d8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	695b      	ldr	r3, [r3, #20]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030218 	.word	0x00030218

000d48e8 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <hal_timer_millis+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030218 	.word	0x00030218

000d48f8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <os_thread_create+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	685b      	ldr	r3, [r3, #4]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030248 	.word	0x00030248

000d4908 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <os_thread_is_current+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	689b      	ldr	r3, [r3, #8]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030248 	.word	0x00030248

000d4918 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <os_thread_join+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	691b      	ldr	r3, [r3, #16]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030248 	.word	0x00030248

000d4928 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <os_thread_cleanup+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	695b      	ldr	r3, [r3, #20]
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030248 	.word	0x00030248

000d4938 <os_thread_delay_until>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <os_thread_delay_until+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	699b      	ldr	r3, [r3, #24]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030248 	.word	0x00030248

000d4948 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <os_mutex_recursive_create+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030248 	.word	0x00030248

000d4958 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <os_mutex_recursive_destroy+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030248 	.word	0x00030248

000d4968 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <os_thread_exit+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030248 	.word	0x00030248

000d4978 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <inet_inet_ntop+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	695b      	ldr	r3, [r3, #20]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030264 	.word	0x00030264

000d4988 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <hal_usart_init+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	681b      	ldr	r3, [r3, #0]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	0003023c 	.word	0x0003023c

000d4998 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <hal_usart_write+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	68db      	ldr	r3, [r3, #12]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	0003023c 	.word	0x0003023c

000d49a8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <hal_usart_available+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	691b      	ldr	r3, [r3, #16]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	0003023c 	.word	0x0003023c

000d49b8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <hal_usart_read+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	695b      	ldr	r3, [r3, #20]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	0003023c 	.word	0x0003023c

000d49c8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <hal_usart_peek+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	699b      	ldr	r3, [r3, #24]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	0003023c 	.word	0x0003023c

000d49d8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <hal_usart_flush+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	69db      	ldr	r3, [r3, #28]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	0003023c 	.word	0x0003023c

000d49e8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <hal_usart_is_enabled+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	6a1b      	ldr	r3, [r3, #32]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	0003023c 	.word	0x0003023c

000d49f8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <hal_usart_available_data_for_write+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	0003023c 	.word	0x0003023c

000d4a08 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <hal_i2c_write+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	6a1b      	ldr	r3, [r3, #32]
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	00030228 	.word	0x00030228

000d4a18 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <hal_i2c_available+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	00030228 	.word	0x00030228

000d4a28 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <hal_i2c_read+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	00030228 	.word	0x00030228

000d4a38 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <hal_i2c_peek+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	00030228 	.word	0x00030228

000d4a48 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <hal_i2c_flush+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	00030228 	.word	0x00030228

000d4a58 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <hal_i2c_is_enabled+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	00030228 	.word	0x00030228

000d4a68 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <hal_i2c_init+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	00030228 	.word	0x00030228

000d4a78 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <hal_spi_init+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	69db      	ldr	r3, [r3, #28]
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	00030230 	.word	0x00030230

000d4a88 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <hal_spi_is_enabled+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	6a1b      	ldr	r3, [r3, #32]
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	00030230 	.word	0x00030230

000d4a98 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <HAL_USB_USART_Init+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	681b      	ldr	r3, [r3, #0]
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	0003024c 	.word	0x0003024c

000d4aa8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <HAL_USB_USART_Begin+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	685b      	ldr	r3, [r3, #4]
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	0003024c 	.word	0x0003024c

000d4ab8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <HAL_USB_USART_Available_Data+0xc>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	691b      	ldr	r3, [r3, #16]
   d4ac0:	9301      	str	r3, [sp, #4]
   d4ac2:	bd08      	pop	{r3, pc}
   d4ac4:	0003024c 	.word	0x0003024c

000d4ac8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	695b      	ldr	r3, [r3, #20]
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	0003024c 	.word	0x0003024c

000d4ad8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b02      	ldr	r3, [pc, #8]	; (d4ae4 <HAL_USB_USART_Receive_Data+0xc>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	699b      	ldr	r3, [r3, #24]
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	0003024c 	.word	0x0003024c

000d4ae8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ae8:	b508      	push	{r3, lr}
   d4aea:	4b02      	ldr	r3, [pc, #8]	; (d4af4 <HAL_USB_USART_Send_Data+0xc>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	69db      	ldr	r3, [r3, #28]
   d4af0:	9301      	str	r3, [sp, #4]
   d4af2:	bd08      	pop	{r3, pc}
   d4af4:	0003024c 	.word	0x0003024c

000d4af8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4af8:	b508      	push	{r3, lr}
   d4afa:	4b02      	ldr	r3, [pc, #8]	; (d4b04 <HAL_USB_USART_Flush_Data+0xc>)
   d4afc:	681b      	ldr	r3, [r3, #0]
   d4afe:	6a1b      	ldr	r3, [r3, #32]
   d4b00:	9301      	str	r3, [sp, #4]
   d4b02:	bd08      	pop	{r3, pc}
   d4b04:	0003024c 	.word	0x0003024c

000d4b08 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d4b08:	b508      	push	{r3, lr}
   d4b0a:	4b02      	ldr	r3, [pc, #8]	; (d4b14 <HAL_USB_USART_Is_Connected+0xc>)
   d4b0c:	681b      	ldr	r3, [r3, #0]
   d4b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b10:	9301      	str	r3, [sp, #4]
   d4b12:	bd08      	pop	{r3, pc}
   d4b14:	0003024c 	.word	0x0003024c

000d4b18 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b18:	b508      	push	{r3, lr}
   d4b1a:	4b02      	ldr	r3, [pc, #8]	; (d4b24 <set_system_mode+0xc>)
   d4b1c:	681b      	ldr	r3, [r3, #0]
   d4b1e:	685b      	ldr	r3, [r3, #4]
   d4b20:	9301      	str	r3, [sp, #4]
   d4b22:	bd08      	pop	{r3, pc}
   d4b24:	00030220 	.word	0x00030220

000d4b28 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4b28:	b508      	push	{r3, lr}
   d4b2a:	4b02      	ldr	r3, [pc, #8]	; (d4b34 <system_thread_set_state+0xc>)
   d4b2c:	681b      	ldr	r3, [r3, #0]
   d4b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b30:	9301      	str	r3, [sp, #4]
   d4b32:	bd08      	pop	{r3, pc}
   d4b34:	00030220 	.word	0x00030220

000d4b38 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b38:	b508      	push	{r3, lr}
   d4b3a:	4b03      	ldr	r3, [pc, #12]	; (d4b48 <system_ctrl_set_app_request_handler+0x10>)
   d4b3c:	681b      	ldr	r3, [r3, #0]
   d4b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b42:	9301      	str	r3, [sp, #4]
   d4b44:	bd08      	pop	{r3, pc}
   d4b46:	0000      	.short	0x0000
   d4b48:	00030220 	.word	0x00030220

000d4b4c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b03      	ldr	r3, [pc, #12]	; (d4b5c <system_ctrl_set_result+0x10>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b56:	9301      	str	r3, [sp, #4]
   d4b58:	bd08      	pop	{r3, pc}
   d4b5a:	0000      	.short	0x0000
   d4b5c:	00030220 	.word	0x00030220

000d4b60 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <network_connect+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	685b      	ldr	r3, [r3, #4]
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	00030240 	.word	0x00030240

000d4b70 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <network_connecting+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	689b      	ldr	r3, [r3, #8]
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	00030240 	.word	0x00030240

000d4b80 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <network_disconnect+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	68db      	ldr	r3, [r3, #12]
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	00030240 	.word	0x00030240

000d4b90 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <network_ready+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	691b      	ldr	r3, [r3, #16]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030240 	.word	0x00030240

000d4ba0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <network_on+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	695b      	ldr	r3, [r3, #20]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	00030240 	.word	0x00030240

000d4bb0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <network_off+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	699b      	ldr	r3, [r3, #24]
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	00030240 	.word	0x00030240

000d4bc0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <network_listen+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	69db      	ldr	r3, [r3, #28]
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	00030240 	.word	0x00030240

000d4bd0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <network_listening+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	6a1b      	ldr	r3, [r3, #32]
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	00030240 	.word	0x00030240

000d4be0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <network_set_listen_timeout+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	00030240 	.word	0x00030240

000d4bf0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <network_get_listen_timeout+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	00030240 	.word	0x00030240

000d4c00 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <network_is_on+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	00030240 	.word	0x00030240

000d4c10 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <network_is_off+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	00030240 	.word	0x00030240

000d4c20 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4c20:	b508      	push	{r3, lr}
   d4c22:	4b02      	ldr	r3, [pc, #8]	; (d4c2c <spark_process+0xc>)
   d4c24:	681b      	ldr	r3, [r3, #0]
   d4c26:	689b      	ldr	r3, [r3, #8]
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	00030244 	.word	0x00030244

000d4c30 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4c30:	b508      	push	{r3, lr}
   d4c32:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4c34:	681b      	ldr	r3, [r3, #0]
   d4c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c38:	9301      	str	r3, [sp, #4]
   d4c3a:	bd08      	pop	{r3, pc}
   d4c3c:	00030244 	.word	0x00030244

000d4c40 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c40:	b508      	push	{r3, lr}
   d4c42:	4b02      	ldr	r3, [pc, #8]	; (d4c4c <malloc+0xc>)
   d4c44:	681b      	ldr	r3, [r3, #0]
   d4c46:	681b      	ldr	r3, [r3, #0]
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	bd08      	pop	{r3, pc}
   d4c4c:	0003021c 	.word	0x0003021c

000d4c50 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c50:	b508      	push	{r3, lr}
   d4c52:	4b02      	ldr	r3, [pc, #8]	; (d4c5c <free+0xc>)
   d4c54:	681b      	ldr	r3, [r3, #0]
   d4c56:	685b      	ldr	r3, [r3, #4]
   d4c58:	9301      	str	r3, [sp, #4]
   d4c5a:	bd08      	pop	{r3, pc}
   d4c5c:	0003021c 	.word	0x0003021c

000d4c60 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4c60:	b508      	push	{r3, lr}
   d4c62:	4b02      	ldr	r3, [pc, #8]	; (d4c6c <vsnprintf+0xc>)
   d4c64:	681b      	ldr	r3, [r3, #0]
   d4c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c68:	9301      	str	r3, [sp, #4]
   d4c6a:	bd08      	pop	{r3, pc}
   d4c6c:	0003021c 	.word	0x0003021c

000d4c70 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4c70:	b508      	push	{r3, lr}
   d4c72:	4b02      	ldr	r3, [pc, #8]	; (d4c7c <abort+0xc>)
   d4c74:	681b      	ldr	r3, [r3, #0]
   d4c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c78:	9301      	str	r3, [sp, #4]
   d4c7a:	bd08      	pop	{r3, pc}
   d4c7c:	0003021c 	.word	0x0003021c

000d4c80 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4c80:	b508      	push	{r3, lr}
   d4c82:	4b02      	ldr	r3, [pc, #8]	; (d4c8c <newlib_impure_ptr_callback+0xc>)
   d4c84:	681b      	ldr	r3, [r3, #0]
   d4c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c88:	9301      	str	r3, [sp, #4]
   d4c8a:	bd08      	pop	{r3, pc}
   d4c8c:	0003021c 	.word	0x0003021c

000d4c90 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c90:	2200      	movs	r2, #0
   d4c92:	6840      	ldr	r0, [r0, #4]
   d4c94:	4611      	mov	r1, r2
   d4c96:	f7ff bf9b 	b.w	d4bd0 <network_listening>

000d4c9a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4c9a:	2200      	movs	r2, #0
   d4c9c:	6840      	ldr	r0, [r0, #4]
   d4c9e:	4611      	mov	r1, r2
   d4ca0:	f7ff bfa6 	b.w	d4bf0 <network_get_listen_timeout>

000d4ca4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4ca4:	6840      	ldr	r0, [r0, #4]
   d4ca6:	2200      	movs	r2, #0
   d4ca8:	f7ff bf9a 	b.w	d4be0 <network_set_listen_timeout>

000d4cac <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4cac:	6840      	ldr	r0, [r0, #4]
   d4cae:	2200      	movs	r2, #0
   d4cb0:	f081 0101 	eor.w	r1, r1, #1
   d4cb4:	f7ff bf84 	b.w	d4bc0 <network_listen>

000d4cb8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4cb8:	2300      	movs	r3, #0
   d4cba:	6840      	ldr	r0, [r0, #4]
   d4cbc:	461a      	mov	r2, r3
   d4cbe:	4619      	mov	r1, r3
   d4cc0:	f7ff bf76 	b.w	d4bb0 <network_off>

000d4cc4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4cc4:	2300      	movs	r3, #0
   d4cc6:	6840      	ldr	r0, [r0, #4]
   d4cc8:	461a      	mov	r2, r3
   d4cca:	4619      	mov	r1, r3
   d4ccc:	f7ff bf68 	b.w	d4ba0 <network_on>

000d4cd0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4cd0:	2200      	movs	r2, #0
   d4cd2:	6840      	ldr	r0, [r0, #4]
   d4cd4:	4611      	mov	r1, r2
   d4cd6:	f7ff bf5b 	b.w	d4b90 <network_ready>

000d4cda <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4cda:	2200      	movs	r2, #0
   d4cdc:	6840      	ldr	r0, [r0, #4]
   d4cde:	4611      	mov	r1, r2
   d4ce0:	f7ff bf46 	b.w	d4b70 <network_connecting>

000d4ce4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ce4:	6840      	ldr	r0, [r0, #4]
   d4ce6:	2200      	movs	r2, #0
   d4ce8:	2102      	movs	r1, #2
   d4cea:	f7ff bf49 	b.w	d4b80 <network_disconnect>

000d4cee <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4cee:	2300      	movs	r3, #0
   d4cf0:	6840      	ldr	r0, [r0, #4]
   d4cf2:	461a      	mov	r2, r3
   d4cf4:	f7ff bf34 	b.w	d4b60 <network_connect>

000d4cf8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4cf8:	4b02      	ldr	r3, [pc, #8]	; (d4d04 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4cfa:	2203      	movs	r2, #3
   d4cfc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4cfe:	4a02      	ldr	r2, [pc, #8]	; (d4d08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4d00:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4d02:	4770      	bx	lr
   d4d04:	2003e644 	.word	0x2003e644
   d4d08:	000d61b8 	.word	0x000d61b8

000d4d0c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4d0c:	b510      	push	{r4, lr}
   d4d0e:	4604      	mov	r4, r0
   d4d10:	4608      	mov	r0, r1
{
    _spi = spi;
   d4d12:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4d14:	f7ff feb0 	bl	d4a78 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4d18:	2300      	movs	r3, #0
   d4d1a:	6063      	str	r3, [r4, #4]
}
   d4d1c:	4620      	mov	r0, r4
   d4d1e:	bd10      	pop	{r4, pc}

000d4d20 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4d20:	b510      	push	{r4, lr}
   d4d22:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4d24:	6800      	ldr	r0, [r0, #0]
   d4d26:	b118      	cbz	r0, d4d30 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4d28:	f7ff ff92 	bl	d4c50 <free>
            wakeupSource_ = nullptr;
   d4d2c:	2300      	movs	r3, #0
   d4d2e:	6023      	str	r3, [r4, #0]
        }
    }
   d4d30:	bd10      	pop	{r4, pc}

000d4d32 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4d32:	b510      	push	{r4, lr}
   d4d34:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4d36:	f7ff fff3 	bl	d4d20 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4d3a:	4620      	mov	r0, r4
   d4d3c:	bd10      	pop	{r4, pc}
	...

000d4d40 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4d40:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4d42:	4b09      	ldr	r3, [pc, #36]	; (d4d68 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4d44:	4c09      	ldr	r4, [pc, #36]	; (d4d6c <_GLOBAL__sub_I_System+0x2c>)
   d4d46:	2202      	movs	r2, #2
   d4d48:	2000      	movs	r0, #0
   d4d4a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4d4c:	4b08      	ldr	r3, [pc, #32]	; (d4d70 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4d4e:	6020      	str	r0, [r4, #0]
   d4d50:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4d52:	71a0      	strb	r0, [r4, #6]
   d4d54:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4d56:	f7ff fedf 	bl	d4b18 <set_system_mode>
SystemClass System;
   d4d5a:	4620      	mov	r0, r4
   d4d5c:	4a05      	ldr	r2, [pc, #20]	; (d4d74 <_GLOBAL__sub_I_System+0x34>)
   d4d5e:	4906      	ldr	r1, [pc, #24]	; (d4d78 <_GLOBAL__sub_I_System+0x38>)
   d4d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4d64:	f000 bce8 	b.w	d5738 <__aeabi_atexit>
   d4d68:	2003e658 	.word	0x2003e658
   d4d6c:	2003e64c 	.word	0x2003e64c
   d4d70:	ffff0000 	.word	0xffff0000
   d4d74:	2003e5f4 	.word	0x2003e5f4
   d4d78:	000d4d33 	.word	0x000d4d33

000d4d7c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4d7c:	b510      	push	{r4, lr}
   d4d7e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4d80:	6800      	ldr	r0, [r0, #0]
   d4d82:	b108      	cbz	r0, d4d88 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4d84:	f7ff fde8 	bl	d4958 <os_mutex_recursive_destroy>
    }
   d4d88:	4620      	mov	r0, r4
   d4d8a:	bd10      	pop	{r4, pc}

000d4d8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d8c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4d8e:	4c06      	ldr	r4, [pc, #24]	; (d4da8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4d90:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4d92:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4d94:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4d96:	f7ff fdd7 	bl	d4948 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4d9a:	4620      	mov	r0, r4
   d4d9c:	4a03      	ldr	r2, [pc, #12]	; (d4dac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4d9e:	4904      	ldr	r1, [pc, #16]	; (d4db0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4da4:	f000 bcc8 	b.w	d5738 <__aeabi_atexit>
   d4da8:	2003e65c 	.word	0x2003e65c
   d4dac:	2003e5f4 	.word	0x2003e5f4
   d4db0:	000d4d7d 	.word	0x000d4d7d

000d4db4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4db6:	4606      	mov	r6, r0
   d4db8:	460d      	mov	r5, r1
  size_t n = 0;
   d4dba:	188f      	adds	r7, r1, r2
   d4dbc:	2400      	movs	r4, #0
  while (size--) {
   d4dbe:	42bd      	cmp	r5, r7
   d4dc0:	d00c      	beq.n	d4ddc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4dc2:	6833      	ldr	r3, [r6, #0]
   d4dc4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4dc8:	689b      	ldr	r3, [r3, #8]
   d4dca:	4630      	mov	r0, r6
   d4dcc:	4798      	blx	r3
     if (chunk>=0)
   d4dce:	1e03      	subs	r3, r0, #0
   d4dd0:	db01      	blt.n	d4dd6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4dd2:	441c      	add	r4, r3
  while (size--) {
   d4dd4:	e7f3      	b.n	d4dbe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4dd6:	2c00      	cmp	r4, #0
   d4dd8:	bf08      	it	eq
   d4dda:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4ddc:	4620      	mov	r0, r4
   d4dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4de0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4de0:	b513      	push	{r0, r1, r4, lr}
   d4de2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4de4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4de6:	b159      	cbz	r1, d4e00 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4de8:	9101      	str	r1, [sp, #4]
   d4dea:	f001 f8f1 	bl	d5fd0 <strlen>
   d4dee:	6823      	ldr	r3, [r4, #0]
   d4df0:	9901      	ldr	r1, [sp, #4]
   d4df2:	68db      	ldr	r3, [r3, #12]
   d4df4:	4602      	mov	r2, r0
   d4df6:	4620      	mov	r0, r4
    }
   d4df8:	b002      	add	sp, #8
   d4dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4dfe:	4718      	bx	r3
    }
   d4e00:	b002      	add	sp, #8
   d4e02:	bd10      	pop	{r4, pc}

000d4e04 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4e04:	6803      	ldr	r3, [r0, #0]
   d4e06:	689b      	ldr	r3, [r3, #8]
   d4e08:	4718      	bx	r3

000d4e0a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4e0a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4e0c:	210d      	movs	r1, #13
{
   d4e0e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4e10:	f7ff fff8 	bl	d4e04 <_ZN5Print5printEc>
  n += print('\n');
   d4e14:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4e16:	4604      	mov	r4, r0
  n += print('\n');
   d4e18:	4628      	mov	r0, r5
   d4e1a:	f7ff fff3 	bl	d4e04 <_ZN5Print5printEc>
  return n;
}
   d4e1e:	4420      	add	r0, r4
   d4e20:	bd38      	pop	{r3, r4, r5, pc}

000d4e22 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4e22:	b538      	push	{r3, r4, r5, lr}
   d4e24:	4605      	mov	r5, r0
  return write(str);
   d4e26:	f7ff ffdb 	bl	d4de0 <_ZN5Print5writeEPKc>
   d4e2a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4e2c:	4628      	mov	r0, r5
   d4e2e:	f7ff ffec 	bl	d4e0a <_ZN5Print7printlnEv>
  return n;
}
   d4e32:	4420      	add	r0, r4
   d4e34:	bd38      	pop	{r3, r4, r5, pc}

000d4e36 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4e36:	b530      	push	{r4, r5, lr}
   d4e38:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4e3a:	2300      	movs	r3, #0
   d4e3c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4e40:	2a01      	cmp	r2, #1
   d4e42:	bf98      	it	ls
   d4e44:	220a      	movls	r2, #10
   d4e46:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4e48:	460d      	mov	r5, r1
   d4e4a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4e4e:	fb01 5312 	mls	r3, r1, r2, r5
   d4e52:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4e56:	2b09      	cmp	r3, #9
   d4e58:	bf94      	ite	ls
   d4e5a:	3330      	addls	r3, #48	; 0x30
   d4e5c:	3337      	addhi	r3, #55	; 0x37
   d4e5e:	b2db      	uxtb	r3, r3
  } while(n);
   d4e60:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4e62:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4e66:	d9ef      	bls.n	d4e48 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4e68:	4621      	mov	r1, r4
   d4e6a:	f7ff ffb9 	bl	d4de0 <_ZN5Print5writeEPKc>
}
   d4e6e:	b00b      	add	sp, #44	; 0x2c
   d4e70:	bd30      	pop	{r4, r5, pc}

000d4e72 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d4e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e76:	b086      	sub	sp, #24
   d4e78:	af00      	add	r7, sp, #0
   d4e7a:	4605      	mov	r5, r0
   d4e7c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d4e7e:	1d38      	adds	r0, r7, #4
   d4e80:	2114      	movs	r1, #20
{
   d4e82:	4614      	mov	r4, r2
    va_copy(args2, args);
   d4e84:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d4e86:	f7ff feeb 	bl	d4c60 <vsnprintf>

    if (n<bufsize)
   d4e8a:	2813      	cmp	r0, #19
   d4e8c:	d80e      	bhi.n	d4eac <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d4e8e:	1d39      	adds	r1, r7, #4
   d4e90:	4628      	mov	r0, r5
   d4e92:	f7ff ffa5 	bl	d4de0 <_ZN5Print5writeEPKc>
   d4e96:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d4e98:	b11e      	cbz	r6, d4ea2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d4e9a:	4628      	mov	r0, r5
   d4e9c:	f7ff ffb5 	bl	d4e0a <_ZN5Print7printlnEv>
   d4ea0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d4ea2:	4620      	mov	r0, r4
   d4ea4:	3718      	adds	r7, #24
   d4ea6:	46bd      	mov	sp, r7
   d4ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d4eac:	f100 0308 	add.w	r3, r0, #8
   d4eb0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d4eb4:	46e8      	mov	r8, sp
        char bigger[n+1];
   d4eb6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d4eba:	4622      	mov	r2, r4
   d4ebc:	1c41      	adds	r1, r0, #1
   d4ebe:	683b      	ldr	r3, [r7, #0]
   d4ec0:	4668      	mov	r0, sp
   d4ec2:	f7ff fecd 	bl	d4c60 <vsnprintf>
  return write(str);
   d4ec6:	4669      	mov	r1, sp
   d4ec8:	4628      	mov	r0, r5
   d4eca:	f7ff ff89 	bl	d4de0 <_ZN5Print5writeEPKc>
   d4ece:	4604      	mov	r4, r0
   d4ed0:	46c5      	mov	sp, r8
   d4ed2:	e7e1      	b.n	d4e98 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d4ed4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4ed4:	4b01      	ldr	r3, [pc, #4]	; (d4edc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4ed6:	4a02      	ldr	r2, [pc, #8]	; (d4ee0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4ed8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4eda:	4770      	bx	lr
   d4edc:	2003e660 	.word	0x2003e660
   d4ee0:	000d61ec 	.word	0x000d61ec

000d4ee4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4ee4:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4ee6:	681a      	ldr	r2, [r3, #0]
   d4ee8:	4b02      	ldr	r3, [pc, #8]	; (d4ef4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4eea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4eec:	4770      	bx	lr
   d4eee:	bf00      	nop
   d4ef0:	2003e58c 	.word	0x2003e58c
   d4ef4:	2003e664 	.word	0x2003e664

000d4ef8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4ef8:	b510      	push	{r4, lr}
   d4efa:	4604      	mov	r4, r0
   d4efc:	f7ff f90c 	bl	d4118 <_ZNSt14_Function_baseD1Ev>
   d4f00:	4620      	mov	r0, r4
   d4f02:	bd10      	pop	{r4, pc}

000d4f04 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4f04:	4803      	ldr	r0, [pc, #12]	; (d4f14 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4f06:	4a04      	ldr	r2, [pc, #16]	; (d4f18 <_GLOBAL__sub_I_RGB+0x14>)
   d4f08:	4904      	ldr	r1, [pc, #16]	; (d4f1c <_GLOBAL__sub_I_RGB+0x18>)
   d4f0a:	2300      	movs	r3, #0
   d4f0c:	6083      	str	r3, [r0, #8]
   d4f0e:	f000 bc13 	b.w	d5738 <__aeabi_atexit>
   d4f12:	bf00      	nop
   d4f14:	2003e668 	.word	0x2003e668
   d4f18:	2003e5f4 	.word	0x2003e5f4
   d4f1c:	000d4ef9 	.word	0x000d4ef9

000d4f20 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4f20:	4b01      	ldr	r3, [pc, #4]	; (d4f28 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4f22:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4f24:	4770      	bx	lr
   d4f26:	bf00      	nop
   d4f28:	2003e590 	.word	0x2003e590

000d4f2c <serialEventRun>:
{
   d4f2c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4f2e:	4b0b      	ldr	r3, [pc, #44]	; (d4f5c <serialEventRun+0x30>)
   d4f30:	b143      	cbz	r3, d4f44 <serialEventRun+0x18>
   d4f32:	f000 f959 	bl	d51e8 <_Z16_fetch_usbserialv>
   d4f36:	6803      	ldr	r3, [r0, #0]
   d4f38:	691b      	ldr	r3, [r3, #16]
   d4f3a:	4798      	blx	r3
   d4f3c:	2800      	cmp	r0, #0
   d4f3e:	dd01      	ble.n	d4f44 <serialEventRun+0x18>
        serialEvent();
   d4f40:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4f44:	4b06      	ldr	r3, [pc, #24]	; (d4f60 <serialEventRun+0x34>)
   d4f46:	b143      	cbz	r3, d4f5a <serialEventRun+0x2e>
   d4f48:	f000 f9f8 	bl	d533c <_Z22__fetch_global_Serial1v>
   d4f4c:	6803      	ldr	r3, [r0, #0]
   d4f4e:	691b      	ldr	r3, [r3, #16]
   d4f50:	4798      	blx	r3
   d4f52:	2800      	cmp	r0, #0
   d4f54:	dd01      	ble.n	d4f5a <serialEventRun+0x2e>
        serialEvent1();
   d4f56:	f3af 8000 	nop.w
}
   d4f5a:	bd08      	pop	{r3, pc}
	...

000d4f64 <_post_loop>:
{
   d4f64:	b508      	push	{r3, lr}
	serialEventRun();
   d4f66:	f7ff ffe1 	bl	d4f2c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4f6a:	f7ff fcb5 	bl	d48d8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4f6e:	4b01      	ldr	r3, [pc, #4]	; (d4f74 <_post_loop+0x10>)
   d4f70:	6018      	str	r0, [r3, #0]
}
   d4f72:	bd08      	pop	{r3, pc}
   d4f74:	2003e7d4 	.word	0x2003e7d4

000d4f78 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4f78:	4802      	ldr	r0, [pc, #8]	; (d4f84 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4f7a:	4a03      	ldr	r2, [pc, #12]	; (d4f88 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4f7c:	4903      	ldr	r1, [pc, #12]	; (d4f8c <_Z33system_initialize_user_backup_ramv+0x14>)
   d4f7e:	1a12      	subs	r2, r2, r0
   d4f80:	f000 bfec 	b.w	d5f5c <memcpy>
   d4f84:	2003f400 	.word	0x2003f400
   d4f88:	2003f404 	.word	0x2003f404
   d4f8c:	000d6350 	.word	0x000d6350

000d4f90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4f90:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f92:	2300      	movs	r3, #0
   d4f94:	9300      	str	r3, [sp, #0]
   d4f96:	461a      	mov	r2, r3
   d4f98:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f9c:	f7ff fdd6 	bl	d4b4c <system_ctrl_set_result>
}
   d4fa0:	b003      	add	sp, #12
   d4fa2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4fa8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4fa8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4faa:	8843      	ldrh	r3, [r0, #2]
   d4fac:	2b0a      	cmp	r3, #10
   d4fae:	d008      	beq.n	d4fc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4fb0:	2b50      	cmp	r3, #80	; 0x50
   d4fb2:	d10b      	bne.n	d4fcc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4fb4:	4b09      	ldr	r3, [pc, #36]	; (d4fdc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4fb6:	681b      	ldr	r3, [r3, #0]
   d4fb8:	b14b      	cbz	r3, d4fce <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4fba:	b003      	add	sp, #12
   d4fbc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4fc0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4fc2:	f7ff ffe5 	bl	d4f90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4fc6:	b003      	add	sp, #12
   d4fc8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4fcc:	2300      	movs	r3, #0
   d4fce:	9300      	str	r3, [sp, #0]
   d4fd0:	461a      	mov	r2, r3
   d4fd2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4fd6:	f7ff fdb9 	bl	d4b4c <system_ctrl_set_result>
}
   d4fda:	e7f4      	b.n	d4fc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4fdc:	2003e67c 	.word	0x2003e67c

000d4fe0 <module_user_init_hook>:
{
   d4fe0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4fe2:	4c12      	ldr	r4, [pc, #72]	; (d502c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4fe4:	4812      	ldr	r0, [pc, #72]	; (d5030 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4fe6:	4d13      	ldr	r5, [pc, #76]	; (d5034 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4fe8:	2100      	movs	r1, #0
   d4fea:	f7ff fe49 	bl	d4c80 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4fee:	6823      	ldr	r3, [r4, #0]
   d4ff0:	42ab      	cmp	r3, r5
   d4ff2:	4b11      	ldr	r3, [pc, #68]	; (d5038 <module_user_init_hook+0x58>)
   d4ff4:	bf0c      	ite	eq
   d4ff6:	2201      	moveq	r2, #1
   d4ff8:	2200      	movne	r2, #0
   d4ffa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4ffc:	d002      	beq.n	d5004 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4ffe:	f7ff ffbb 	bl	d4f78 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5002:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5004:	f7ff fc58 	bl	d48b8 <HAL_RNG_GetRandomNumber>
   d5008:	4604      	mov	r4, r0
    srand(seed);
   d500a:	f000 ffbd 	bl	d5f88 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d500e:	4b0b      	ldr	r3, [pc, #44]	; (d503c <module_user_init_hook+0x5c>)
   d5010:	b113      	cbz	r3, d5018 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5012:	4620      	mov	r0, r4
   d5014:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5018:	2100      	movs	r1, #0
   d501a:	4808      	ldr	r0, [pc, #32]	; (d503c <module_user_init_hook+0x5c>)
   d501c:	f7ff fe08 	bl	d4c30 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5024:	4806      	ldr	r0, [pc, #24]	; (d5040 <module_user_init_hook+0x60>)
   d5026:	2100      	movs	r1, #0
   d5028:	f7ff bd86 	b.w	d4b38 <system_ctrl_set_app_request_handler>
   d502c:	2003f400 	.word	0x2003f400
   d5030:	000d4f21 	.word	0x000d4f21
   d5034:	9a271c1e 	.word	0x9a271c1e
   d5038:	2003e678 	.word	0x2003e678
   d503c:	00000000 	.word	0x00000000
   d5040:	000d4fa9 	.word	0x000d4fa9

000d5044 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5044:	4770      	bx	lr

000d5046 <_ZN9IPAddressD0Ev>:
   d5046:	b510      	push	{r4, lr}
   d5048:	2118      	movs	r1, #24
   d504a:	4604      	mov	r4, r0
   d504c:	f000 fb79 	bl	d5742 <_ZdlPvj>
   d5050:	4620      	mov	r0, r4
   d5052:	bd10      	pop	{r4, pc}

000d5054 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5054:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5056:	7d03      	ldrb	r3, [r0, #20]
   d5058:	2b06      	cmp	r3, #6
{
   d505a:	b08d      	sub	sp, #52	; 0x34
   d505c:	460e      	mov	r6, r1
   d505e:	f100 0704 	add.w	r7, r0, #4
   d5062:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5066:	d012      	beq.n	d508e <_ZNK9IPAddress7printToER5Print+0x3a>
   d5068:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d506c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5070:	220a      	movs	r2, #10
   d5072:	4630      	mov	r0, r6
   d5074:	f7ff fedf 	bl	d4e36 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5078:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d507a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d507c:	d019      	beq.n	d50b2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d507e:	2c00      	cmp	r4, #0
   d5080:	d0f4      	beq.n	d506c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5082:	212e      	movs	r1, #46	; 0x2e
   d5084:	4630      	mov	r0, r6
   d5086:	f7ff febd 	bl	d4e04 <_ZN5Print5printEc>
   d508a:	4404      	add	r4, r0
   d508c:	e7ee      	b.n	d506c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d508e:	232f      	movs	r3, #47	; 0x2f
   d5090:	466a      	mov	r2, sp
   d5092:	4639      	mov	r1, r7
   d5094:	200a      	movs	r0, #10
		buf[0] = 0;
   d5096:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d509a:	f7ff fc6d 	bl	d4978 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d509e:	4668      	mov	r0, sp
   d50a0:	f000 ff96 	bl	d5fd0 <strlen>
   d50a4:	6833      	ldr	r3, [r6, #0]
   d50a6:	4602      	mov	r2, r0
   d50a8:	68db      	ldr	r3, [r3, #12]
   d50aa:	4669      	mov	r1, sp
   d50ac:	4630      	mov	r0, r6
   d50ae:	4798      	blx	r3
   d50b0:	4604      	mov	r4, r0
    }
    return n;
}
   d50b2:	4620      	mov	r0, r4
   d50b4:	b00d      	add	sp, #52	; 0x34
   d50b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50b8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d50b8:	b510      	push	{r4, lr}
   d50ba:	4b05      	ldr	r3, [pc, #20]	; (d50d0 <_ZN9IPAddressC1Ev+0x18>)
   d50bc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d50be:	2211      	movs	r2, #17
   d50c0:	f840 3b04 	str.w	r3, [r0], #4
   d50c4:	2100      	movs	r1, #0
   d50c6:	f000 ff57 	bl	d5f78 <memset>
}
   d50ca:	4620      	mov	r0, r4
   d50cc:	bd10      	pop	{r4, pc}
   d50ce:	bf00      	nop
   d50d0:	000d6214 	.word	0x000d6214

000d50d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d50d4:	4603      	mov	r3, r0
   d50d6:	4a07      	ldr	r2, [pc, #28]	; (d50f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d50d8:	b510      	push	{r4, lr}
   d50da:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d50de:	f101 0210 	add.w	r2, r1, #16
   d50e2:	f851 4b04 	ldr.w	r4, [r1], #4
   d50e6:	f843 4b04 	str.w	r4, [r3], #4
   d50ea:	4291      	cmp	r1, r2
   d50ec:	d1f9      	bne.n	d50e2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d50ee:	780a      	ldrb	r2, [r1, #0]
   d50f0:	701a      	strb	r2, [r3, #0]
}
   d50f2:	bd10      	pop	{r4, pc}
   d50f4:	000d6214 	.word	0x000d6214

000d50f8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d50f8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d50fa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d50fe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5102:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5106:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d510a:	2304      	movs	r3, #4
   d510c:	6041      	str	r1, [r0, #4]
   d510e:	7503      	strb	r3, [r0, #20]
}
   d5110:	bd10      	pop	{r4, pc}

000d5112 <_ZN9IPAddressaSEPKh>:
{
   d5112:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5114:	78cb      	ldrb	r3, [r1, #3]
   d5116:	9300      	str	r3, [sp, #0]
   d5118:	788b      	ldrb	r3, [r1, #2]
   d511a:	784a      	ldrb	r2, [r1, #1]
   d511c:	7809      	ldrb	r1, [r1, #0]
   d511e:	f7ff ffeb 	bl	d50f8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5122:	b002      	add	sp, #8
   d5124:	bd10      	pop	{r4, pc}

000d5126 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5126:	7441      	strb	r1, [r0, #17]
}
   d5128:	4770      	bx	lr

000d512a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d512a:	4770      	bx	lr

000d512c <_ZN9USBSerial4readEv>:
{
   d512c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d512e:	2100      	movs	r1, #0
   d5130:	7c00      	ldrb	r0, [r0, #16]
   d5132:	f7ff fcd1 	bl	d4ad8 <HAL_USB_USART_Receive_Data>
}
   d5136:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d513a:	bd08      	pop	{r3, pc}

000d513c <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d513c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d513e:	2101      	movs	r1, #1
   d5140:	7c00      	ldrb	r0, [r0, #16]
   d5142:	f7ff fcc9 	bl	d4ad8 <HAL_USB_USART_Receive_Data>
}
   d5146:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d514a:	bd08      	pop	{r3, pc}

000d514c <_ZN9USBSerial17availableForWriteEv>:
{
   d514c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d514e:	7c00      	ldrb	r0, [r0, #16]
   d5150:	f7ff fcba 	bl	d4ac8 <HAL_USB_USART_Available_Data_For_Write>
}
   d5154:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5158:	bd08      	pop	{r3, pc}

000d515a <_ZN9USBSerial9availableEv>:
{
   d515a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d515c:	7c00      	ldrb	r0, [r0, #16]
   d515e:	f7ff fcab 	bl	d4ab8 <HAL_USB_USART_Available_Data>
}
   d5162:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5166:	bd08      	pop	{r3, pc}

000d5168 <_ZN9USBSerial5writeEh>:
{
   d5168:	b513      	push	{r0, r1, r4, lr}
   d516a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d516c:	7c00      	ldrb	r0, [r0, #16]
{
   d516e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5170:	f7ff fcaa 	bl	d4ac8 <HAL_USB_USART_Available_Data_For_Write>
   d5174:	2800      	cmp	r0, #0
   d5176:	9901      	ldr	r1, [sp, #4]
   d5178:	dc01      	bgt.n	d517e <_ZN9USBSerial5writeEh+0x16>
   d517a:	7c60      	ldrb	r0, [r4, #17]
   d517c:	b120      	cbz	r0, d5188 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d517e:	7c20      	ldrb	r0, [r4, #16]
   d5180:	f7ff fcb2 	bl	d4ae8 <HAL_USB_USART_Send_Data>
   d5184:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5188:	b002      	add	sp, #8
   d518a:	bd10      	pop	{r4, pc}

000d518c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d518c:	7c00      	ldrb	r0, [r0, #16]
   d518e:	f7ff bcb3 	b.w	d4af8 <HAL_USB_USART_Flush_Data>

000d5192 <_ZN9USBSerialD0Ev>:
   d5192:	b510      	push	{r4, lr}
   d5194:	2114      	movs	r1, #20
   d5196:	4604      	mov	r4, r0
   d5198:	f000 fad3 	bl	d5742 <_ZdlPvj>
   d519c:	4620      	mov	r0, r4
   d519e:	bd10      	pop	{r4, pc}

000d51a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d51a0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d51a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d51a6:	4604      	mov	r4, r0
   d51a8:	4608      	mov	r0, r1
   d51aa:	2100      	movs	r1, #0
   d51ac:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d51b0:	4b04      	ldr	r3, [pc, #16]	; (d51c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d51b2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d51b4:	2301      	movs	r3, #1
  _serial = serial;
   d51b6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d51b8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d51ba:	4611      	mov	r1, r2
   d51bc:	f7ff fc6c 	bl	d4a98 <HAL_USB_USART_Init>
}
   d51c0:	4620      	mov	r0, r4
   d51c2:	bd10      	pop	{r4, pc}
   d51c4:	000d6228 	.word	0x000d6228

000d51c8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d51c8:	7c00      	ldrb	r0, [r0, #16]
   d51ca:	2200      	movs	r2, #0
   d51cc:	f7ff bc6c 	b.w	d4aa8 <HAL_USB_USART_Begin>

000d51d0 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   d51d0:	7c00      	ldrb	r0, [r0, #16]
   d51d2:	f7ff bc99 	b.w	d4b08 <HAL_USB_USART_Is_Connected>

000d51d6 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d51d6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d51d8:	2214      	movs	r2, #20
{
   d51da:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d51dc:	2100      	movs	r1, #0
   d51de:	f000 fecb 	bl	d5f78 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d51e2:	4620      	mov	r0, r4
   d51e4:	bd10      	pop	{r4, pc}
	...

000d51e8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d51e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d51ea:	4c10      	ldr	r4, [pc, #64]	; (d522c <_Z16_fetch_usbserialv+0x44>)
{
   d51ec:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d51ee:	a803      	add	r0, sp, #12
   d51f0:	f7ff fff1 	bl	d51d6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d51f4:	7821      	ldrb	r1, [r4, #0]
   d51f6:	f3bf 8f5b 	dmb	ish
   d51fa:	f011 0101 	ands.w	r1, r1, #1
   d51fe:	d111      	bne.n	d5224 <_Z16_fetch_usbserialv+0x3c>
   d5200:	4620      	mov	r0, r4
   d5202:	9101      	str	r1, [sp, #4]
   d5204:	f7fe ff4d 	bl	d40a2 <__cxa_guard_acquire>
   d5208:	9901      	ldr	r1, [sp, #4]
   d520a:	b158      	cbz	r0, d5224 <_Z16_fetch_usbserialv+0x3c>
   d520c:	aa03      	add	r2, sp, #12
   d520e:	4808      	ldr	r0, [pc, #32]	; (d5230 <_Z16_fetch_usbserialv+0x48>)
   d5210:	f7ff ffc6 	bl	d51a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5214:	4620      	mov	r0, r4
   d5216:	f7fe ff49 	bl	d40ac <__cxa_guard_release>
   d521a:	4a06      	ldr	r2, [pc, #24]	; (d5234 <_Z16_fetch_usbserialv+0x4c>)
   d521c:	4906      	ldr	r1, [pc, #24]	; (d5238 <_Z16_fetch_usbserialv+0x50>)
   d521e:	4804      	ldr	r0, [pc, #16]	; (d5230 <_Z16_fetch_usbserialv+0x48>)
   d5220:	f000 fa8a 	bl	d5738 <__aeabi_atexit>
	return _usbserial;
}
   d5224:	4802      	ldr	r0, [pc, #8]	; (d5230 <_Z16_fetch_usbserialv+0x48>)
   d5226:	b008      	add	sp, #32
   d5228:	bd10      	pop	{r4, pc}
   d522a:	bf00      	nop
   d522c:	2003e680 	.word	0x2003e680
   d5230:	2003e684 	.word	0x2003e684
   d5234:	2003e5f4 	.word	0x2003e5f4
   d5238:	000d512b 	.word	0x000d512b

000d523c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d523c:	4700      	bx	r0
	...

000d5240 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d5240:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d5244:	2400      	movs	r4, #0
{
   d5246:	461d      	mov	r5, r3
   d5248:	460f      	mov	r7, r1
   d524a:	4690      	mov	r8, r2
   d524c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d524e:	f7ff fb2b 	bl	d48a8 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d5252:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5254:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d5258:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d525c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d5260:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d5264:	bfa2      	ittt	ge
   d5266:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d526a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d526e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5270:	4907      	ldr	r1, [pc, #28]	; (d5290 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d5272:	9400      	str	r4, [sp, #0]
   d5274:	4643      	mov	r3, r8
   d5276:	463a      	mov	r2, r7
   d5278:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d527a:	bfa8      	it	ge
   d527c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5280:	f7ff fb0a 	bl	d4898 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d5284:	fab0 f080 	clz	r0, r0
   d5288:	0940      	lsrs	r0, r0, #5
   d528a:	b004      	add	sp, #16
   d528c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5290:	000d523d 	.word	0x000d523d

000d5294 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5294:	4770      	bx	lr

000d5296 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5296:	7441      	strb	r1, [r0, #17]
}
   d5298:	4770      	bx	lr

000d529a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d529a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d529c:	7c00      	ldrb	r0, [r0, #16]
   d529e:	f7ff fbab 	bl	d49f8 <hal_usart_available_data_for_write>
}
   d52a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52a6:	bd08      	pop	{r3, pc}

000d52a8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d52a8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d52aa:	7c00      	ldrb	r0, [r0, #16]
   d52ac:	f7ff fb7c 	bl	d49a8 <hal_usart_available>
}
   d52b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52b4:	bd08      	pop	{r3, pc}

000d52b6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d52b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d52b8:	7c00      	ldrb	r0, [r0, #16]
   d52ba:	f7ff fb85 	bl	d49c8 <hal_usart_peek>
}
   d52be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d52c2:	bd08      	pop	{r3, pc}

000d52c4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d52c4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d52c6:	7c00      	ldrb	r0, [r0, #16]
   d52c8:	f7ff fb76 	bl	d49b8 <hal_usart_read>
}
   d52cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d52d0:	bd08      	pop	{r3, pc}

000d52d2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d52d2:	7c00      	ldrb	r0, [r0, #16]
   d52d4:	f7ff bb80 	b.w	d49d8 <hal_usart_flush>

000d52d8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d52d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52da:	7c45      	ldrb	r5, [r0, #17]
{
   d52dc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52de:	b12d      	cbz	r5, d52ec <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d52e0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d52e2:	b003      	add	sp, #12
   d52e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d52e8:	f7ff bb56 	b.w	d4998 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52ec:	7c00      	ldrb	r0, [r0, #16]
   d52ee:	9101      	str	r1, [sp, #4]
   d52f0:	f7ff fb82 	bl	d49f8 <hal_usart_available_data_for_write>
   d52f4:	2800      	cmp	r0, #0
   d52f6:	9901      	ldr	r1, [sp, #4]
   d52f8:	dcf2      	bgt.n	d52e0 <_ZN11USARTSerial5writeEh+0x8>
}
   d52fa:	4628      	mov	r0, r5
   d52fc:	b003      	add	sp, #12
   d52fe:	bd30      	pop	{r4, r5, pc}

000d5300 <_ZN11USARTSerialD0Ev>:
   d5300:	b510      	push	{r4, lr}
   d5302:	2114      	movs	r1, #20
   d5304:	4604      	mov	r4, r0
   d5306:	f000 fa1c 	bl	d5742 <_ZdlPvj>
   d530a:	4620      	mov	r0, r4
   d530c:	bd10      	pop	{r4, pc}
	...

000d5310 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5310:	b510      	push	{r4, lr}
   d5312:	f04f 0c00 	mov.w	ip, #0
   d5316:	4604      	mov	r4, r0
   d5318:	4608      	mov	r0, r1
   d531a:	4611      	mov	r1, r2
   d531c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5320:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5324:	4a04      	ldr	r2, [pc, #16]	; (d5338 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5326:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5328:	2201      	movs	r2, #1
  _serial = serial;
   d532a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d532c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d532e:	461a      	mov	r2, r3
   d5330:	f7ff fb2a 	bl	d4988 <hal_usart_init>
}
   d5334:	4620      	mov	r0, r4
   d5336:	bd10      	pop	{r4, pc}
   d5338:	000d6258 	.word	0x000d6258

000d533c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d533c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d533e:	4c0e      	ldr	r4, [pc, #56]	; (d5378 <_Z22__fetch_global_Serial1v+0x3c>)
   d5340:	7821      	ldrb	r1, [r4, #0]
   d5342:	f3bf 8f5b 	dmb	ish
   d5346:	f011 0101 	ands.w	r1, r1, #1
   d534a:	d112      	bne.n	d5372 <_Z22__fetch_global_Serial1v+0x36>
   d534c:	4620      	mov	r0, r4
   d534e:	9101      	str	r1, [sp, #4]
   d5350:	f7fe fea7 	bl	d40a2 <__cxa_guard_acquire>
   d5354:	9901      	ldr	r1, [sp, #4]
   d5356:	b160      	cbz	r0, d5372 <_Z22__fetch_global_Serial1v+0x36>
   d5358:	4a08      	ldr	r2, [pc, #32]	; (d537c <_Z22__fetch_global_Serial1v+0x40>)
   d535a:	4b09      	ldr	r3, [pc, #36]	; (d5380 <_Z22__fetch_global_Serial1v+0x44>)
   d535c:	4809      	ldr	r0, [pc, #36]	; (d5384 <_Z22__fetch_global_Serial1v+0x48>)
   d535e:	f7ff ffd7 	bl	d5310 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5362:	4620      	mov	r0, r4
   d5364:	f7fe fea2 	bl	d40ac <__cxa_guard_release>
   d5368:	4a07      	ldr	r2, [pc, #28]	; (d5388 <_Z22__fetch_global_Serial1v+0x4c>)
   d536a:	4908      	ldr	r1, [pc, #32]	; (d538c <_Z22__fetch_global_Serial1v+0x50>)
   d536c:	4805      	ldr	r0, [pc, #20]	; (d5384 <_Z22__fetch_global_Serial1v+0x48>)
   d536e:	f000 f9e3 	bl	d5738 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5372:	4804      	ldr	r0, [pc, #16]	; (d5384 <_Z22__fetch_global_Serial1v+0x48>)
   d5374:	b002      	add	sp, #8
   d5376:	bd10      	pop	{r4, pc}
   d5378:	2003e698 	.word	0x2003e698
   d537c:	2003e69c 	.word	0x2003e69c
   d5380:	2003e720 	.word	0x2003e720
   d5384:	2003e7a4 	.word	0x2003e7a4
   d5388:	2003e5f4 	.word	0x2003e5f4
   d538c:	000d5295 	.word	0x000d5295

000d5390 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5390:	4770      	bx	lr

000d5392 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5394:	4606      	mov	r6, r0
   d5396:	4615      	mov	r5, r2
   d5398:	460c      	mov	r4, r1
   d539a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d539c:	42bc      	cmp	r4, r7
   d539e:	d006      	beq.n	d53ae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d53a0:	6833      	ldr	r3, [r6, #0]
   d53a2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d53a6:	689b      	ldr	r3, [r3, #8]
   d53a8:	4630      	mov	r0, r6
   d53aa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d53ac:	e7f6      	b.n	d539c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d53ae:	4628      	mov	r0, r5
   d53b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53b2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d53b2:	7c00      	ldrb	r0, [r0, #16]
   d53b4:	2200      	movs	r2, #0
   d53b6:	f7ff bb27 	b.w	d4a08 <hal_i2c_write>

000d53ba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d53ba:	7c00      	ldrb	r0, [r0, #16]
   d53bc:	2100      	movs	r1, #0
   d53be:	f7ff bb2b 	b.w	d4a18 <hal_i2c_available>

000d53c2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d53c2:	7c00      	ldrb	r0, [r0, #16]
   d53c4:	2100      	movs	r1, #0
   d53c6:	f7ff bb2f 	b.w	d4a28 <hal_i2c_read>

000d53ca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d53ca:	7c00      	ldrb	r0, [r0, #16]
   d53cc:	2100      	movs	r1, #0
   d53ce:	f7ff bb33 	b.w	d4a38 <hal_i2c_peek>

000d53d2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d53d2:	7c00      	ldrb	r0, [r0, #16]
   d53d4:	2100      	movs	r1, #0
   d53d6:	f7ff bb37 	b.w	d4a48 <hal_i2c_flush>

000d53da <_ZN7TwoWireD0Ev>:
   d53da:	b510      	push	{r4, lr}
   d53dc:	2114      	movs	r1, #20
   d53de:	4604      	mov	r4, r0
   d53e0:	f000 f9af 	bl	d5742 <_ZdlPvj>
   d53e4:	4620      	mov	r0, r4
   d53e6:	bd10      	pop	{r4, pc}

000d53e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d53e8:	b510      	push	{r4, lr}
   d53ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d53ee:	4604      	mov	r4, r0
   d53f0:	4608      	mov	r0, r1
   d53f2:	2100      	movs	r1, #0
   d53f4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d53f8:	4b03      	ldr	r3, [pc, #12]	; (d5408 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d53fa:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d53fc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d53fe:	4611      	mov	r1, r2
   d5400:	f7ff fb32 	bl	d4a68 <hal_i2c_init>
}
   d5404:	4620      	mov	r0, r4
   d5406:	bd10      	pop	{r4, pc}
   d5408:	000d6288 	.word	0x000d6288

000d540c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d540c:	2200      	movs	r2, #0
   d540e:	6840      	ldr	r0, [r0, #4]
   d5410:	4611      	mov	r1, r2
   d5412:	f7ff bbbd 	b.w	d4b90 <network_ready>

000d5416 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5416:	2200      	movs	r2, #0
   d5418:	6840      	ldr	r0, [r0, #4]
   d541a:	4611      	mov	r1, r2
   d541c:	f7ff bbd8 	b.w	d4bd0 <network_listening>

000d5420 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5420:	2200      	movs	r2, #0
   d5422:	6840      	ldr	r0, [r0, #4]
   d5424:	4611      	mov	r1, r2
   d5426:	f7ff bbe3 	b.w	d4bf0 <network_get_listen_timeout>

000d542a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d542a:	6840      	ldr	r0, [r0, #4]
   d542c:	2200      	movs	r2, #0
   d542e:	f7ff bbd7 	b.w	d4be0 <network_set_listen_timeout>

000d5432 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5432:	6840      	ldr	r0, [r0, #4]
   d5434:	2200      	movs	r2, #0
   d5436:	f081 0101 	eor.w	r1, r1, #1
   d543a:	f7ff bbc1 	b.w	d4bc0 <network_listen>

000d543e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d543e:	2300      	movs	r3, #0
   d5440:	6840      	ldr	r0, [r0, #4]
   d5442:	461a      	mov	r2, r3
   d5444:	4619      	mov	r1, r3
   d5446:	f7ff bbb3 	b.w	d4bb0 <network_off>

000d544a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d544a:	2300      	movs	r3, #0
   d544c:	6840      	ldr	r0, [r0, #4]
   d544e:	461a      	mov	r2, r3
   d5450:	4619      	mov	r1, r3
   d5452:	f7ff bba5 	b.w	d4ba0 <network_on>

000d5456 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5456:	2200      	movs	r2, #0
   d5458:	6840      	ldr	r0, [r0, #4]
   d545a:	4611      	mov	r1, r2
   d545c:	f7ff bb88 	b.w	d4b70 <network_connecting>

000d5460 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5460:	6840      	ldr	r0, [r0, #4]
   d5462:	2200      	movs	r2, #0
   d5464:	2102      	movs	r1, #2
   d5466:	f7ff bb8b 	b.w	d4b80 <network_disconnect>

000d546a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d546a:	2300      	movs	r3, #0
   d546c:	6840      	ldr	r0, [r0, #4]
   d546e:	461a      	mov	r2, r3
   d5470:	f7ff bb76 	b.w	d4b60 <network_connect>

000d5474 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5474:	4b02      	ldr	r3, [pc, #8]	; (d5480 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5476:	2204      	movs	r2, #4
   d5478:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d547a:	4a02      	ldr	r2, [pc, #8]	; (d5484 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d547c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d547e:	4770      	bx	lr
   d5480:	2003e7b8 	.word	0x2003e7b8
   d5484:	000d62b0 	.word	0x000d62b0

000d5488 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5488:	2300      	movs	r3, #0
   d548a:	6840      	ldr	r0, [r0, #4]
   d548c:	461a      	mov	r2, r3
   d548e:	f7ff bb67 	b.w	d4b60 <network_connect>

000d5492 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5492:	6840      	ldr	r0, [r0, #4]
   d5494:	2200      	movs	r2, #0
   d5496:	2102      	movs	r1, #2
   d5498:	f7ff bb72 	b.w	d4b80 <network_disconnect>

000d549c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d549c:	2200      	movs	r2, #0
   d549e:	6840      	ldr	r0, [r0, #4]
   d54a0:	4611      	mov	r1, r2
   d54a2:	f7ff bb65 	b.w	d4b70 <network_connecting>

000d54a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d54a6:	2200      	movs	r2, #0
   d54a8:	6840      	ldr	r0, [r0, #4]
   d54aa:	4611      	mov	r1, r2
   d54ac:	f7ff bb70 	b.w	d4b90 <network_ready>

000d54b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d54b0:	2300      	movs	r3, #0
   d54b2:	6840      	ldr	r0, [r0, #4]
   d54b4:	461a      	mov	r2, r3
   d54b6:	4619      	mov	r1, r3
   d54b8:	f7ff bb72 	b.w	d4ba0 <network_on>

000d54bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d54bc:	2300      	movs	r3, #0
   d54be:	6840      	ldr	r0, [r0, #4]
   d54c0:	461a      	mov	r2, r3
   d54c2:	4619      	mov	r1, r3
   d54c4:	f7ff bb74 	b.w	d4bb0 <network_off>

000d54c8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d54c8:	6840      	ldr	r0, [r0, #4]
   d54ca:	2100      	movs	r1, #0
   d54cc:	f7ff bb98 	b.w	d4c00 <network_is_on>

000d54d0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d54d0:	6840      	ldr	r0, [r0, #4]
   d54d2:	2100      	movs	r1, #0
   d54d4:	f7ff bb9c 	b.w	d4c10 <network_is_off>

000d54d8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d54d8:	6840      	ldr	r0, [r0, #4]
   d54da:	2200      	movs	r2, #0
   d54dc:	f081 0101 	eor.w	r1, r1, #1
   d54e0:	f7ff bb6e 	b.w	d4bc0 <network_listen>

000d54e4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d54e4:	6840      	ldr	r0, [r0, #4]
   d54e6:	2200      	movs	r2, #0
   d54e8:	f7ff bb7a 	b.w	d4be0 <network_set_listen_timeout>

000d54ec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d54ec:	2200      	movs	r2, #0
   d54ee:	6840      	ldr	r0, [r0, #4]
   d54f0:	4611      	mov	r1, r2
   d54f2:	f7ff bb7d 	b.w	d4bf0 <network_get_listen_timeout>

000d54f6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d54f6:	2200      	movs	r2, #0
   d54f8:	6840      	ldr	r0, [r0, #4]
   d54fa:	4611      	mov	r1, r2
   d54fc:	f7ff bb68 	b.w	d4bd0 <network_listening>

000d5500 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5504:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5506:	b095      	sub	sp, #84	; 0x54
   d5508:	4616      	mov	r6, r2
   d550a:	460d      	mov	r5, r1
   d550c:	4607      	mov	r7, r0
    IPAddress addr;
   d550e:	f7ff fdd3 	bl	d50b8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5512:	4621      	mov	r1, r4
   d5514:	2218      	movs	r2, #24
   d5516:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5518:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d551a:	f000 fd2d 	bl	d5f78 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d551e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5520:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5524:	4621      	mov	r1, r4
   d5526:	466b      	mov	r3, sp
   d5528:	aa0c      	add	r2, sp, #48	; 0x30
   d552a:	4630      	mov	r0, r6
   d552c:	f7ff f994 	bl	d4858 <netdb_getaddrinfo>
    if (!r) {
   d5530:	4604      	mov	r4, r0
   d5532:	2800      	cmp	r0, #0
   d5534:	d146      	bne.n	d55c4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5536:	4602      	mov	r2, r0
   d5538:	2101      	movs	r1, #1
   d553a:	6868      	ldr	r0, [r5, #4]
   d553c:	f7ff fb28 	bl	d4b90 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5540:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5542:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5544:	4622      	mov	r2, r4
   d5546:	6868      	ldr	r0, [r5, #4]
   d5548:	f7ff fb22 	bl	d4b90 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d554c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d554e:	4681      	mov	r9, r0
        bool ok = false;
   d5550:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5552:	2e00      	cmp	r6, #0
   d5554:	d036      	beq.n	d55c4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5556:	2900      	cmp	r1, #0
   d5558:	d134      	bne.n	d55c4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d555a:	6873      	ldr	r3, [r6, #4]
   d555c:	2b02      	cmp	r3, #2
   d555e:	d003      	beq.n	d5568 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5560:	2b0a      	cmp	r3, #10
   d5562:	d00b      	beq.n	d557c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5564:	69f6      	ldr	r6, [r6, #28]
   d5566:	e7f4      	b.n	d5552 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5568:	f1b8 0f00 	cmp.w	r8, #0
   d556c:	d004      	beq.n	d5578 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d556e:	6971      	ldr	r1, [r6, #20]
   d5570:	4638      	mov	r0, r7
   d5572:	3104      	adds	r1, #4
   d5574:	f7ff fdcd 	bl	d5112 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5578:	4641      	mov	r1, r8
   d557a:	e7f3      	b.n	d5564 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d557c:	f1b9 0f00 	cmp.w	r9, #0
   d5580:	d101      	bne.n	d5586 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5582:	4649      	mov	r1, r9
   d5584:	e7ee      	b.n	d5564 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5586:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5588:	2210      	movs	r2, #16
   d558a:	a801      	add	r0, sp, #4
   d558c:	f000 fcf4 	bl	d5f78 <memset>
                    a.v = 6;
   d5590:	2306      	movs	r3, #6
   d5592:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5596:	ad01      	add	r5, sp, #4
   d5598:	f104 0308 	add.w	r3, r4, #8
   d559c:	3418      	adds	r4, #24
   d559e:	6818      	ldr	r0, [r3, #0]
   d55a0:	6859      	ldr	r1, [r3, #4]
   d55a2:	462a      	mov	r2, r5
   d55a4:	c203      	stmia	r2!, {r0, r1}
   d55a6:	3308      	adds	r3, #8
   d55a8:	42a3      	cmp	r3, r4
   d55aa:	4615      	mov	r5, r2
   d55ac:	d1f7      	bne.n	d559e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d55ae:	a901      	add	r1, sp, #4
   d55b0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d55b2:	ad07      	add	r5, sp, #28
   d55b4:	f7ff fd8e 	bl	d50d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d55b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d55ba:	1d3c      	adds	r4, r7, #4
   d55bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d55be:	682b      	ldr	r3, [r5, #0]
   d55c0:	7023      	strb	r3, [r4, #0]
   d55c2:	e7de      	b.n	d5582 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d55c4:	9800      	ldr	r0, [sp, #0]
   d55c6:	f7ff f93f 	bl	d4848 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d55ca:	4638      	mov	r0, r7
   d55cc:	b015      	add	sp, #84	; 0x54
   d55ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d55d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d55d4:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d55d6:	4a03      	ldr	r2, [pc, #12]	; (d55e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d55d8:	601a      	str	r2, [r3, #0]
   d55da:	2200      	movs	r2, #0
   d55dc:	605a      	str	r2, [r3, #4]

} // spark
   d55de:	4770      	bx	lr
   d55e0:	2003e7c0 	.word	0x2003e7c0
   d55e4:	000d62ec 	.word	0x000d62ec

000d55e8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d55e8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d55ea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d55ec:	d902      	bls.n	d55f4 <pinAvailable+0xc>
    return false;
   d55ee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d55f0:	b002      	add	sp, #8
   d55f2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d55f4:	f1a0 030b 	sub.w	r3, r0, #11
   d55f8:	2b02      	cmp	r3, #2
   d55fa:	d81a      	bhi.n	d5632 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d55fc:	4c17      	ldr	r4, [pc, #92]	; (d565c <pinAvailable+0x74>)
   d55fe:	7821      	ldrb	r1, [r4, #0]
   d5600:	f3bf 8f5b 	dmb	ish
   d5604:	f011 0101 	ands.w	r1, r1, #1
   d5608:	d10b      	bne.n	d5622 <pinAvailable+0x3a>
   d560a:	4620      	mov	r0, r4
   d560c:	9101      	str	r1, [sp, #4]
   d560e:	f7fe fd48 	bl	d40a2 <__cxa_guard_acquire>
   d5612:	9901      	ldr	r1, [sp, #4]
   d5614:	b128      	cbz	r0, d5622 <pinAvailable+0x3a>
   d5616:	4812      	ldr	r0, [pc, #72]	; (d5660 <pinAvailable+0x78>)
   d5618:	f7ff fb78 	bl	d4d0c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d561c:	4620      	mov	r0, r4
   d561e:	f7fe fd45 	bl	d40ac <__cxa_guard_release>
   d5622:	4b0f      	ldr	r3, [pc, #60]	; (d5660 <pinAvailable+0x78>)
   d5624:	7818      	ldrb	r0, [r3, #0]
   d5626:	f7ff fa2f 	bl	d4a88 <hal_spi_is_enabled>
   d562a:	2800      	cmp	r0, #0
   d562c:	d1df      	bne.n	d55ee <pinAvailable+0x6>
  return true; // 'pin' is available
   d562e:	2001      	movs	r0, #1
   d5630:	e7de      	b.n	d55f0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5632:	2801      	cmp	r0, #1
   d5634:	d809      	bhi.n	d564a <pinAvailable+0x62>
   d5636:	f000 f857 	bl	d56e8 <_Z19__fetch_global_Wirev>
   d563a:	2100      	movs	r1, #0
   d563c:	7c00      	ldrb	r0, [r0, #16]
   d563e:	f7ff fa0b 	bl	d4a58 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5642:	f080 0001 	eor.w	r0, r0, #1
   d5646:	b2c0      	uxtb	r0, r0
   d5648:	e7d2      	b.n	d55f0 <pinAvailable+0x8>
   d564a:	3809      	subs	r0, #9
   d564c:	2801      	cmp	r0, #1
   d564e:	d8ee      	bhi.n	d562e <pinAvailable+0x46>
   d5650:	f7ff fe74 	bl	d533c <_Z22__fetch_global_Serial1v>
   d5654:	7c00      	ldrb	r0, [r0, #16]
   d5656:	f7ff f9c7 	bl	d49e8 <hal_usart_is_enabled>
   d565a:	e7f2      	b.n	d5642 <pinAvailable+0x5a>
   d565c:	2003e7c8 	.word	0x2003e7c8
   d5660:	2003e7cc 	.word	0x2003e7cc

000d5664 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5664:	2823      	cmp	r0, #35	; 0x23
{
   d5666:	b538      	push	{r3, r4, r5, lr}
   d5668:	4604      	mov	r4, r0
   d566a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d566c:	d80a      	bhi.n	d5684 <pinMode+0x20>
   d566e:	29ff      	cmp	r1, #255	; 0xff
   d5670:	d008      	beq.n	d5684 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5672:	f7ff ffb9 	bl	d55e8 <pinAvailable>
   d5676:	b128      	cbz	r0, d5684 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5678:	4629      	mov	r1, r5
   d567a:	4620      	mov	r0, r4
}
   d567c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5680:	f7ff b8f2 	b.w	d4868 <HAL_Pin_Mode>
}
   d5684:	bd38      	pop	{r3, r4, r5, pc}

000d5686 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5686:	b538      	push	{r3, r4, r5, lr}
   d5688:	4604      	mov	r4, r0
   d568a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d568c:	f7ff f8f4 	bl	d4878 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5690:	28ff      	cmp	r0, #255	; 0xff
   d5692:	d010      	beq.n	d56b6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5694:	2806      	cmp	r0, #6
   d5696:	d804      	bhi.n	d56a2 <digitalWrite+0x1c>
   d5698:	234d      	movs	r3, #77	; 0x4d
   d569a:	fa23 f000 	lsr.w	r0, r3, r0
   d569e:	07c3      	lsls	r3, r0, #31
   d56a0:	d409      	bmi.n	d56b6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d56a2:	4620      	mov	r0, r4
   d56a4:	f7ff ffa0 	bl	d55e8 <pinAvailable>
   d56a8:	b128      	cbz	r0, d56b6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d56aa:	4629      	mov	r1, r5
   d56ac:	4620      	mov	r0, r4
}
   d56ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d56b2:	f7ff b8e9 	b.w	d4888 <HAL_GPIO_Write>
}
   d56b6:	bd38      	pop	{r3, r4, r5, pc}

000d56b8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d56b8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d56ba:	2300      	movs	r3, #0
   d56bc:	2520      	movs	r5, #32
   d56be:	8043      	strh	r3, [r0, #2]
   d56c0:	2314      	movs	r3, #20
{
   d56c2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d56c4:	8003      	strh	r3, [r0, #0]
   d56c6:	6085      	str	r5, [r0, #8]
   d56c8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d56ca:	4906      	ldr	r1, [pc, #24]	; (d56e4 <_Z17acquireWireBufferv+0x2c>)
   d56cc:	4628      	mov	r0, r5
   d56ce:	f000 f83c 	bl	d574a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d56d2:	4904      	ldr	r1, [pc, #16]	; (d56e4 <_Z17acquireWireBufferv+0x2c>)
	};
   d56d4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d56d6:	4628      	mov	r0, r5
   d56d8:	f000 f837 	bl	d574a <_ZnajRKSt9nothrow_t>
	};
   d56dc:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d56de:	4620      	mov	r0, r4
   d56e0:	bd38      	pop	{r3, r4, r5, pc}
   d56e2:	bf00      	nop
   d56e4:	000d6320 	.word	0x000d6320

000d56e8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d56e8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d56ea:	4d0f      	ldr	r5, [pc, #60]	; (d5728 <_Z19__fetch_global_Wirev+0x40>)
   d56ec:	7829      	ldrb	r1, [r5, #0]
   d56ee:	f3bf 8f5b 	dmb	ish
   d56f2:	f011 0401 	ands.w	r4, r1, #1
{
   d56f6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d56f8:	d113      	bne.n	d5722 <_Z19__fetch_global_Wirev+0x3a>
   d56fa:	4628      	mov	r0, r5
   d56fc:	f7fe fcd1 	bl	d40a2 <__cxa_guard_acquire>
   d5700:	b178      	cbz	r0, d5722 <_Z19__fetch_global_Wirev+0x3a>
   d5702:	a801      	add	r0, sp, #4
   d5704:	f7ff ffd8 	bl	d56b8 <_Z17acquireWireBufferv>
   d5708:	aa01      	add	r2, sp, #4
   d570a:	4621      	mov	r1, r4
   d570c:	4807      	ldr	r0, [pc, #28]	; (d572c <_Z19__fetch_global_Wirev+0x44>)
   d570e:	f7ff fe6b 	bl	d53e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5712:	4628      	mov	r0, r5
   d5714:	f7fe fcca 	bl	d40ac <__cxa_guard_release>
   d5718:	4a05      	ldr	r2, [pc, #20]	; (d5730 <_Z19__fetch_global_Wirev+0x48>)
   d571a:	4906      	ldr	r1, [pc, #24]	; (d5734 <_Z19__fetch_global_Wirev+0x4c>)
   d571c:	4803      	ldr	r0, [pc, #12]	; (d572c <_Z19__fetch_global_Wirev+0x44>)
   d571e:	f000 f80b 	bl	d5738 <__aeabi_atexit>
	return wire;
}
   d5722:	4802      	ldr	r0, [pc, #8]	; (d572c <_Z19__fetch_global_Wirev+0x44>)
   d5724:	b007      	add	sp, #28
   d5726:	bd30      	pop	{r4, r5, pc}
   d5728:	2003e7d8 	.word	0x2003e7d8
   d572c:	2003e7dc 	.word	0x2003e7dc
   d5730:	2003e5f4 	.word	0x2003e5f4
   d5734:	000d5391 	.word	0x000d5391

000d5738 <__aeabi_atexit>:
   d5738:	460b      	mov	r3, r1
   d573a:	4601      	mov	r1, r0
   d573c:	4618      	mov	r0, r3
   d573e:	f000 bbff 	b.w	d5f40 <__cxa_atexit>

000d5742 <_ZdlPvj>:
   d5742:	f7fe bcac 	b.w	d409e <_ZdlPv>

000d5746 <_ZnwjRKSt9nothrow_t>:
   d5746:	f7fe bca6 	b.w	d4096 <_Znwj>

000d574a <_ZnajRKSt9nothrow_t>:
   d574a:	f7fe bca6 	b.w	d409a <_Znaj>

000d574e <_ZSt25__throw_bad_function_callv>:
   d574e:	b508      	push	{r3, lr}
   d5750:	f7ff fa8e 	bl	d4c70 <abort>

000d5754 <__aeabi_drsub>:
   d5754:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5758:	e002      	b.n	d5760 <__adddf3>
   d575a:	bf00      	nop

000d575c <__aeabi_dsub>:
   d575c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5760 <__adddf3>:
   d5760:	b530      	push	{r4, r5, lr}
   d5762:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5766:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d576a:	ea94 0f05 	teq	r4, r5
   d576e:	bf08      	it	eq
   d5770:	ea90 0f02 	teqeq	r0, r2
   d5774:	bf1f      	itttt	ne
   d5776:	ea54 0c00 	orrsne.w	ip, r4, r0
   d577a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d577e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5782:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5786:	f000 80e2 	beq.w	d594e <__adddf3+0x1ee>
   d578a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d578e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5792:	bfb8      	it	lt
   d5794:	426d      	neglt	r5, r5
   d5796:	dd0c      	ble.n	d57b2 <__adddf3+0x52>
   d5798:	442c      	add	r4, r5
   d579a:	ea80 0202 	eor.w	r2, r0, r2
   d579e:	ea81 0303 	eor.w	r3, r1, r3
   d57a2:	ea82 0000 	eor.w	r0, r2, r0
   d57a6:	ea83 0101 	eor.w	r1, r3, r1
   d57aa:	ea80 0202 	eor.w	r2, r0, r2
   d57ae:	ea81 0303 	eor.w	r3, r1, r3
   d57b2:	2d36      	cmp	r5, #54	; 0x36
   d57b4:	bf88      	it	hi
   d57b6:	bd30      	pophi	{r4, r5, pc}
   d57b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d57bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d57c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d57c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d57c8:	d002      	beq.n	d57d0 <__adddf3+0x70>
   d57ca:	4240      	negs	r0, r0
   d57cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d57d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d57d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d57d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d57dc:	d002      	beq.n	d57e4 <__adddf3+0x84>
   d57de:	4252      	negs	r2, r2
   d57e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d57e4:	ea94 0f05 	teq	r4, r5
   d57e8:	f000 80a7 	beq.w	d593a <__adddf3+0x1da>
   d57ec:	f1a4 0401 	sub.w	r4, r4, #1
   d57f0:	f1d5 0e20 	rsbs	lr, r5, #32
   d57f4:	db0d      	blt.n	d5812 <__adddf3+0xb2>
   d57f6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d57fa:	fa22 f205 	lsr.w	r2, r2, r5
   d57fe:	1880      	adds	r0, r0, r2
   d5800:	f141 0100 	adc.w	r1, r1, #0
   d5804:	fa03 f20e 	lsl.w	r2, r3, lr
   d5808:	1880      	adds	r0, r0, r2
   d580a:	fa43 f305 	asr.w	r3, r3, r5
   d580e:	4159      	adcs	r1, r3
   d5810:	e00e      	b.n	d5830 <__adddf3+0xd0>
   d5812:	f1a5 0520 	sub.w	r5, r5, #32
   d5816:	f10e 0e20 	add.w	lr, lr, #32
   d581a:	2a01      	cmp	r2, #1
   d581c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5820:	bf28      	it	cs
   d5822:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5826:	fa43 f305 	asr.w	r3, r3, r5
   d582a:	18c0      	adds	r0, r0, r3
   d582c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5830:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5834:	d507      	bpl.n	d5846 <__adddf3+0xe6>
   d5836:	f04f 0e00 	mov.w	lr, #0
   d583a:	f1dc 0c00 	rsbs	ip, ip, #0
   d583e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5842:	eb6e 0101 	sbc.w	r1, lr, r1
   d5846:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d584a:	d31b      	bcc.n	d5884 <__adddf3+0x124>
   d584c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5850:	d30c      	bcc.n	d586c <__adddf3+0x10c>
   d5852:	0849      	lsrs	r1, r1, #1
   d5854:	ea5f 0030 	movs.w	r0, r0, rrx
   d5858:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d585c:	f104 0401 	add.w	r4, r4, #1
   d5860:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5864:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5868:	f080 809a 	bcs.w	d59a0 <__adddf3+0x240>
   d586c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5870:	bf08      	it	eq
   d5872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5876:	f150 0000 	adcs.w	r0, r0, #0
   d587a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d587e:	ea41 0105 	orr.w	r1, r1, r5
   d5882:	bd30      	pop	{r4, r5, pc}
   d5884:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5888:	4140      	adcs	r0, r0
   d588a:	eb41 0101 	adc.w	r1, r1, r1
   d588e:	3c01      	subs	r4, #1
   d5890:	bf28      	it	cs
   d5892:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d5896:	d2e9      	bcs.n	d586c <__adddf3+0x10c>
   d5898:	f091 0f00 	teq	r1, #0
   d589c:	bf04      	itt	eq
   d589e:	4601      	moveq	r1, r0
   d58a0:	2000      	moveq	r0, #0
   d58a2:	fab1 f381 	clz	r3, r1
   d58a6:	bf08      	it	eq
   d58a8:	3320      	addeq	r3, #32
   d58aa:	f1a3 030b 	sub.w	r3, r3, #11
   d58ae:	f1b3 0220 	subs.w	r2, r3, #32
   d58b2:	da0c      	bge.n	d58ce <__adddf3+0x16e>
   d58b4:	320c      	adds	r2, #12
   d58b6:	dd08      	ble.n	d58ca <__adddf3+0x16a>
   d58b8:	f102 0c14 	add.w	ip, r2, #20
   d58bc:	f1c2 020c 	rsb	r2, r2, #12
   d58c0:	fa01 f00c 	lsl.w	r0, r1, ip
   d58c4:	fa21 f102 	lsr.w	r1, r1, r2
   d58c8:	e00c      	b.n	d58e4 <__adddf3+0x184>
   d58ca:	f102 0214 	add.w	r2, r2, #20
   d58ce:	bfd8      	it	le
   d58d0:	f1c2 0c20 	rsble	ip, r2, #32
   d58d4:	fa01 f102 	lsl.w	r1, r1, r2
   d58d8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d58dc:	bfdc      	itt	le
   d58de:	ea41 010c 	orrle.w	r1, r1, ip
   d58e2:	4090      	lslle	r0, r2
   d58e4:	1ae4      	subs	r4, r4, r3
   d58e6:	bfa2      	ittt	ge
   d58e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d58ec:	4329      	orrge	r1, r5
   d58ee:	bd30      	popge	{r4, r5, pc}
   d58f0:	ea6f 0404 	mvn.w	r4, r4
   d58f4:	3c1f      	subs	r4, #31
   d58f6:	da1c      	bge.n	d5932 <__adddf3+0x1d2>
   d58f8:	340c      	adds	r4, #12
   d58fa:	dc0e      	bgt.n	d591a <__adddf3+0x1ba>
   d58fc:	f104 0414 	add.w	r4, r4, #20
   d5900:	f1c4 0220 	rsb	r2, r4, #32
   d5904:	fa20 f004 	lsr.w	r0, r0, r4
   d5908:	fa01 f302 	lsl.w	r3, r1, r2
   d590c:	ea40 0003 	orr.w	r0, r0, r3
   d5910:	fa21 f304 	lsr.w	r3, r1, r4
   d5914:	ea45 0103 	orr.w	r1, r5, r3
   d5918:	bd30      	pop	{r4, r5, pc}
   d591a:	f1c4 040c 	rsb	r4, r4, #12
   d591e:	f1c4 0220 	rsb	r2, r4, #32
   d5922:	fa20 f002 	lsr.w	r0, r0, r2
   d5926:	fa01 f304 	lsl.w	r3, r1, r4
   d592a:	ea40 0003 	orr.w	r0, r0, r3
   d592e:	4629      	mov	r1, r5
   d5930:	bd30      	pop	{r4, r5, pc}
   d5932:	fa21 f004 	lsr.w	r0, r1, r4
   d5936:	4629      	mov	r1, r5
   d5938:	bd30      	pop	{r4, r5, pc}
   d593a:	f094 0f00 	teq	r4, #0
   d593e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5942:	bf06      	itte	eq
   d5944:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5948:	3401      	addeq	r4, #1
   d594a:	3d01      	subne	r5, #1
   d594c:	e74e      	b.n	d57ec <__adddf3+0x8c>
   d594e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5952:	bf18      	it	ne
   d5954:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5958:	d029      	beq.n	d59ae <__adddf3+0x24e>
   d595a:	ea94 0f05 	teq	r4, r5
   d595e:	bf08      	it	eq
   d5960:	ea90 0f02 	teqeq	r0, r2
   d5964:	d005      	beq.n	d5972 <__adddf3+0x212>
   d5966:	ea54 0c00 	orrs.w	ip, r4, r0
   d596a:	bf04      	itt	eq
   d596c:	4619      	moveq	r1, r3
   d596e:	4610      	moveq	r0, r2
   d5970:	bd30      	pop	{r4, r5, pc}
   d5972:	ea91 0f03 	teq	r1, r3
   d5976:	bf1e      	ittt	ne
   d5978:	2100      	movne	r1, #0
   d597a:	2000      	movne	r0, #0
   d597c:	bd30      	popne	{r4, r5, pc}
   d597e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5982:	d105      	bne.n	d5990 <__adddf3+0x230>
   d5984:	0040      	lsls	r0, r0, #1
   d5986:	4149      	adcs	r1, r1
   d5988:	bf28      	it	cs
   d598a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d598e:	bd30      	pop	{r4, r5, pc}
   d5990:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5994:	bf3c      	itt	cc
   d5996:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d599a:	bd30      	popcc	{r4, r5, pc}
   d599c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d59a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d59a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d59a8:	f04f 0000 	mov.w	r0, #0
   d59ac:	bd30      	pop	{r4, r5, pc}
   d59ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d59b2:	bf1a      	itte	ne
   d59b4:	4619      	movne	r1, r3
   d59b6:	4610      	movne	r0, r2
   d59b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d59bc:	bf1c      	itt	ne
   d59be:	460b      	movne	r3, r1
   d59c0:	4602      	movne	r2, r0
   d59c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d59c6:	bf06      	itte	eq
   d59c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d59cc:	ea91 0f03 	teqeq	r1, r3
   d59d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d59d4:	bd30      	pop	{r4, r5, pc}
   d59d6:	bf00      	nop

000d59d8 <__aeabi_ui2d>:
   d59d8:	f090 0f00 	teq	r0, #0
   d59dc:	bf04      	itt	eq
   d59de:	2100      	moveq	r1, #0
   d59e0:	4770      	bxeq	lr
   d59e2:	b530      	push	{r4, r5, lr}
   d59e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d59e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d59ec:	f04f 0500 	mov.w	r5, #0
   d59f0:	f04f 0100 	mov.w	r1, #0
   d59f4:	e750      	b.n	d5898 <__adddf3+0x138>
   d59f6:	bf00      	nop

000d59f8 <__aeabi_i2d>:
   d59f8:	f090 0f00 	teq	r0, #0
   d59fc:	bf04      	itt	eq
   d59fe:	2100      	moveq	r1, #0
   d5a00:	4770      	bxeq	lr
   d5a02:	b530      	push	{r4, r5, lr}
   d5a04:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a08:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a0c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5a10:	bf48      	it	mi
   d5a12:	4240      	negmi	r0, r0
   d5a14:	f04f 0100 	mov.w	r1, #0
   d5a18:	e73e      	b.n	d5898 <__adddf3+0x138>
   d5a1a:	bf00      	nop

000d5a1c <__aeabi_f2d>:
   d5a1c:	0042      	lsls	r2, r0, #1
   d5a1e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5a22:	ea4f 0131 	mov.w	r1, r1, rrx
   d5a26:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5a2a:	bf1f      	itttt	ne
   d5a2c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5a30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5a34:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5a38:	4770      	bxne	lr
   d5a3a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5a3e:	bf08      	it	eq
   d5a40:	4770      	bxeq	lr
   d5a42:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5a46:	bf04      	itt	eq
   d5a48:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5a4c:	4770      	bxeq	lr
   d5a4e:	b530      	push	{r4, r5, lr}
   d5a50:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5a54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5a5c:	e71c      	b.n	d5898 <__adddf3+0x138>
   d5a5e:	bf00      	nop

000d5a60 <__aeabi_ul2d>:
   d5a60:	ea50 0201 	orrs.w	r2, r0, r1
   d5a64:	bf08      	it	eq
   d5a66:	4770      	bxeq	lr
   d5a68:	b530      	push	{r4, r5, lr}
   d5a6a:	f04f 0500 	mov.w	r5, #0
   d5a6e:	e00a      	b.n	d5a86 <__aeabi_l2d+0x16>

000d5a70 <__aeabi_l2d>:
   d5a70:	ea50 0201 	orrs.w	r2, r0, r1
   d5a74:	bf08      	it	eq
   d5a76:	4770      	bxeq	lr
   d5a78:	b530      	push	{r4, r5, lr}
   d5a7a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5a7e:	d502      	bpl.n	d5a86 <__aeabi_l2d+0x16>
   d5a80:	4240      	negs	r0, r0
   d5a82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5a86:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a8a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a8e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5a92:	f43f aed8 	beq.w	d5846 <__adddf3+0xe6>
   d5a96:	f04f 0203 	mov.w	r2, #3
   d5a9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5a9e:	bf18      	it	ne
   d5aa0:	3203      	addne	r2, #3
   d5aa2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5aa6:	bf18      	it	ne
   d5aa8:	3203      	addne	r2, #3
   d5aaa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5aae:	f1c2 0320 	rsb	r3, r2, #32
   d5ab2:	fa00 fc03 	lsl.w	ip, r0, r3
   d5ab6:	fa20 f002 	lsr.w	r0, r0, r2
   d5aba:	fa01 fe03 	lsl.w	lr, r1, r3
   d5abe:	ea40 000e 	orr.w	r0, r0, lr
   d5ac2:	fa21 f102 	lsr.w	r1, r1, r2
   d5ac6:	4414      	add	r4, r2
   d5ac8:	e6bd      	b.n	d5846 <__adddf3+0xe6>
   d5aca:	bf00      	nop

000d5acc <__aeabi_dmul>:
   d5acc:	b570      	push	{r4, r5, r6, lr}
   d5ace:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5ad2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5ad6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5ada:	bf1d      	ittte	ne
   d5adc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5ae0:	ea94 0f0c 	teqne	r4, ip
   d5ae4:	ea95 0f0c 	teqne	r5, ip
   d5ae8:	f000 f8de 	bleq	d5ca8 <__aeabi_dmul+0x1dc>
   d5aec:	442c      	add	r4, r5
   d5aee:	ea81 0603 	eor.w	r6, r1, r3
   d5af2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5af6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5afa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5afe:	bf18      	it	ne
   d5b00:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5b04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5b08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5b0c:	d038      	beq.n	d5b80 <__aeabi_dmul+0xb4>
   d5b0e:	fba0 ce02 	umull	ip, lr, r0, r2
   d5b12:	f04f 0500 	mov.w	r5, #0
   d5b16:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5b1a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5b1e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5b22:	f04f 0600 	mov.w	r6, #0
   d5b26:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5b2a:	f09c 0f00 	teq	ip, #0
   d5b2e:	bf18      	it	ne
   d5b30:	f04e 0e01 	orrne.w	lr, lr, #1
   d5b34:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5b38:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5b3c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5b40:	d204      	bcs.n	d5b4c <__aeabi_dmul+0x80>
   d5b42:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5b46:	416d      	adcs	r5, r5
   d5b48:	eb46 0606 	adc.w	r6, r6, r6
   d5b4c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5b50:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5b54:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5b58:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5b5c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5b60:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5b64:	bf88      	it	hi
   d5b66:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5b6a:	d81e      	bhi.n	d5baa <__aeabi_dmul+0xde>
   d5b6c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5b70:	bf08      	it	eq
   d5b72:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5b76:	f150 0000 	adcs.w	r0, r0, #0
   d5b7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5b7e:	bd70      	pop	{r4, r5, r6, pc}
   d5b80:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5b84:	ea46 0101 	orr.w	r1, r6, r1
   d5b88:	ea40 0002 	orr.w	r0, r0, r2
   d5b8c:	ea81 0103 	eor.w	r1, r1, r3
   d5b90:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5b94:	bfc2      	ittt	gt
   d5b96:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5b9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5b9e:	bd70      	popgt	{r4, r5, r6, pc}
   d5ba0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5ba4:	f04f 0e00 	mov.w	lr, #0
   d5ba8:	3c01      	subs	r4, #1
   d5baa:	f300 80ab 	bgt.w	d5d04 <__aeabi_dmul+0x238>
   d5bae:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5bb2:	bfde      	ittt	le
   d5bb4:	2000      	movle	r0, #0
   d5bb6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5bba:	bd70      	pople	{r4, r5, r6, pc}
   d5bbc:	f1c4 0400 	rsb	r4, r4, #0
   d5bc0:	3c20      	subs	r4, #32
   d5bc2:	da35      	bge.n	d5c30 <__aeabi_dmul+0x164>
   d5bc4:	340c      	adds	r4, #12
   d5bc6:	dc1b      	bgt.n	d5c00 <__aeabi_dmul+0x134>
   d5bc8:	f104 0414 	add.w	r4, r4, #20
   d5bcc:	f1c4 0520 	rsb	r5, r4, #32
   d5bd0:	fa00 f305 	lsl.w	r3, r0, r5
   d5bd4:	fa20 f004 	lsr.w	r0, r0, r4
   d5bd8:	fa01 f205 	lsl.w	r2, r1, r5
   d5bdc:	ea40 0002 	orr.w	r0, r0, r2
   d5be0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5be4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5be8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5bec:	fa21 f604 	lsr.w	r6, r1, r4
   d5bf0:	eb42 0106 	adc.w	r1, r2, r6
   d5bf4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5bf8:	bf08      	it	eq
   d5bfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5bfe:	bd70      	pop	{r4, r5, r6, pc}
   d5c00:	f1c4 040c 	rsb	r4, r4, #12
   d5c04:	f1c4 0520 	rsb	r5, r4, #32
   d5c08:	fa00 f304 	lsl.w	r3, r0, r4
   d5c0c:	fa20 f005 	lsr.w	r0, r0, r5
   d5c10:	fa01 f204 	lsl.w	r2, r1, r4
   d5c14:	ea40 0002 	orr.w	r0, r0, r2
   d5c18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5c20:	f141 0100 	adc.w	r1, r1, #0
   d5c24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c28:	bf08      	it	eq
   d5c2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5c2e:	bd70      	pop	{r4, r5, r6, pc}
   d5c30:	f1c4 0520 	rsb	r5, r4, #32
   d5c34:	fa00 f205 	lsl.w	r2, r0, r5
   d5c38:	ea4e 0e02 	orr.w	lr, lr, r2
   d5c3c:	fa20 f304 	lsr.w	r3, r0, r4
   d5c40:	fa01 f205 	lsl.w	r2, r1, r5
   d5c44:	ea43 0302 	orr.w	r3, r3, r2
   d5c48:	fa21 f004 	lsr.w	r0, r1, r4
   d5c4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c50:	fa21 f204 	lsr.w	r2, r1, r4
   d5c54:	ea20 0002 	bic.w	r0, r0, r2
   d5c58:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5c5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c60:	bf08      	it	eq
   d5c62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5c66:	bd70      	pop	{r4, r5, r6, pc}
   d5c68:	f094 0f00 	teq	r4, #0
   d5c6c:	d10f      	bne.n	d5c8e <__aeabi_dmul+0x1c2>
   d5c6e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5c72:	0040      	lsls	r0, r0, #1
   d5c74:	eb41 0101 	adc.w	r1, r1, r1
   d5c78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5c7c:	bf08      	it	eq
   d5c7e:	3c01      	subeq	r4, #1
   d5c80:	d0f7      	beq.n	d5c72 <__aeabi_dmul+0x1a6>
   d5c82:	ea41 0106 	orr.w	r1, r1, r6
   d5c86:	f095 0f00 	teq	r5, #0
   d5c8a:	bf18      	it	ne
   d5c8c:	4770      	bxne	lr
   d5c8e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5c92:	0052      	lsls	r2, r2, #1
   d5c94:	eb43 0303 	adc.w	r3, r3, r3
   d5c98:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5c9c:	bf08      	it	eq
   d5c9e:	3d01      	subeq	r5, #1
   d5ca0:	d0f7      	beq.n	d5c92 <__aeabi_dmul+0x1c6>
   d5ca2:	ea43 0306 	orr.w	r3, r3, r6
   d5ca6:	4770      	bx	lr
   d5ca8:	ea94 0f0c 	teq	r4, ip
   d5cac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5cb0:	bf18      	it	ne
   d5cb2:	ea95 0f0c 	teqne	r5, ip
   d5cb6:	d00c      	beq.n	d5cd2 <__aeabi_dmul+0x206>
   d5cb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5cbc:	bf18      	it	ne
   d5cbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5cc2:	d1d1      	bne.n	d5c68 <__aeabi_dmul+0x19c>
   d5cc4:	ea81 0103 	eor.w	r1, r1, r3
   d5cc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5ccc:	f04f 0000 	mov.w	r0, #0
   d5cd0:	bd70      	pop	{r4, r5, r6, pc}
   d5cd2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5cd6:	bf06      	itte	eq
   d5cd8:	4610      	moveq	r0, r2
   d5cda:	4619      	moveq	r1, r3
   d5cdc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5ce0:	d019      	beq.n	d5d16 <__aeabi_dmul+0x24a>
   d5ce2:	ea94 0f0c 	teq	r4, ip
   d5ce6:	d102      	bne.n	d5cee <__aeabi_dmul+0x222>
   d5ce8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5cec:	d113      	bne.n	d5d16 <__aeabi_dmul+0x24a>
   d5cee:	ea95 0f0c 	teq	r5, ip
   d5cf2:	d105      	bne.n	d5d00 <__aeabi_dmul+0x234>
   d5cf4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5cf8:	bf1c      	itt	ne
   d5cfa:	4610      	movne	r0, r2
   d5cfc:	4619      	movne	r1, r3
   d5cfe:	d10a      	bne.n	d5d16 <__aeabi_dmul+0x24a>
   d5d00:	ea81 0103 	eor.w	r1, r1, r3
   d5d04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5d0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5d10:	f04f 0000 	mov.w	r0, #0
   d5d14:	bd70      	pop	{r4, r5, r6, pc}
   d5d16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5d1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5d1e:	bd70      	pop	{r4, r5, r6, pc}

000d5d20 <__aeabi_ddiv>:
   d5d20:	b570      	push	{r4, r5, r6, lr}
   d5d22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5d26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5d2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5d2e:	bf1d      	ittte	ne
   d5d30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5d34:	ea94 0f0c 	teqne	r4, ip
   d5d38:	ea95 0f0c 	teqne	r5, ip
   d5d3c:	f000 f8a7 	bleq	d5e8e <__aeabi_ddiv+0x16e>
   d5d40:	eba4 0405 	sub.w	r4, r4, r5
   d5d44:	ea81 0e03 	eor.w	lr, r1, r3
   d5d48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5d4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5d50:	f000 8088 	beq.w	d5e64 <__aeabi_ddiv+0x144>
   d5d54:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5d58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5d5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5d60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5d64:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5d68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5d6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5d70:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5d74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5d78:	429d      	cmp	r5, r3
   d5d7a:	bf08      	it	eq
   d5d7c:	4296      	cmpeq	r6, r2
   d5d7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5d82:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5d86:	d202      	bcs.n	d5d8e <__aeabi_ddiv+0x6e>
   d5d88:	085b      	lsrs	r3, r3, #1
   d5d8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d8e:	1ab6      	subs	r6, r6, r2
   d5d90:	eb65 0503 	sbc.w	r5, r5, r3
   d5d94:	085b      	lsrs	r3, r3, #1
   d5d96:	ea4f 0232 	mov.w	r2, r2, rrx
   d5d9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5d9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5da2:	ebb6 0e02 	subs.w	lr, r6, r2
   d5da6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5daa:	bf22      	ittt	cs
   d5dac:	1ab6      	subcs	r6, r6, r2
   d5dae:	4675      	movcs	r5, lr
   d5db0:	ea40 000c 	orrcs.w	r0, r0, ip
   d5db4:	085b      	lsrs	r3, r3, #1
   d5db6:	ea4f 0232 	mov.w	r2, r2, rrx
   d5dba:	ebb6 0e02 	subs.w	lr, r6, r2
   d5dbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5dc2:	bf22      	ittt	cs
   d5dc4:	1ab6      	subcs	r6, r6, r2
   d5dc6:	4675      	movcs	r5, lr
   d5dc8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5dcc:	085b      	lsrs	r3, r3, #1
   d5dce:	ea4f 0232 	mov.w	r2, r2, rrx
   d5dd2:	ebb6 0e02 	subs.w	lr, r6, r2
   d5dd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5dda:	bf22      	ittt	cs
   d5ddc:	1ab6      	subcs	r6, r6, r2
   d5dde:	4675      	movcs	r5, lr
   d5de0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5de4:	085b      	lsrs	r3, r3, #1
   d5de6:	ea4f 0232 	mov.w	r2, r2, rrx
   d5dea:	ebb6 0e02 	subs.w	lr, r6, r2
   d5dee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5df2:	bf22      	ittt	cs
   d5df4:	1ab6      	subcs	r6, r6, r2
   d5df6:	4675      	movcs	r5, lr
   d5df8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5dfc:	ea55 0e06 	orrs.w	lr, r5, r6
   d5e00:	d018      	beq.n	d5e34 <__aeabi_ddiv+0x114>
   d5e02:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5e06:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5e0a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5e0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5e12:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5e16:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5e1a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5e1e:	d1c0      	bne.n	d5da2 <__aeabi_ddiv+0x82>
   d5e20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5e24:	d10b      	bne.n	d5e3e <__aeabi_ddiv+0x11e>
   d5e26:	ea41 0100 	orr.w	r1, r1, r0
   d5e2a:	f04f 0000 	mov.w	r0, #0
   d5e2e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5e32:	e7b6      	b.n	d5da2 <__aeabi_ddiv+0x82>
   d5e34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5e38:	bf04      	itt	eq
   d5e3a:	4301      	orreq	r1, r0
   d5e3c:	2000      	moveq	r0, #0
   d5e3e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5e42:	bf88      	it	hi
   d5e44:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5e48:	f63f aeaf 	bhi.w	d5baa <__aeabi_dmul+0xde>
   d5e4c:	ebb5 0c03 	subs.w	ip, r5, r3
   d5e50:	bf04      	itt	eq
   d5e52:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5e56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5e5a:	f150 0000 	adcs.w	r0, r0, #0
   d5e5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5e62:	bd70      	pop	{r4, r5, r6, pc}
   d5e64:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5e68:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5e6c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5e70:	bfc2      	ittt	gt
   d5e72:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5e76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5e7a:	bd70      	popgt	{r4, r5, r6, pc}
   d5e7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5e80:	f04f 0e00 	mov.w	lr, #0
   d5e84:	3c01      	subs	r4, #1
   d5e86:	e690      	b.n	d5baa <__aeabi_dmul+0xde>
   d5e88:	ea45 0e06 	orr.w	lr, r5, r6
   d5e8c:	e68d      	b.n	d5baa <__aeabi_dmul+0xde>
   d5e8e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5e92:	ea94 0f0c 	teq	r4, ip
   d5e96:	bf08      	it	eq
   d5e98:	ea95 0f0c 	teqeq	r5, ip
   d5e9c:	f43f af3b 	beq.w	d5d16 <__aeabi_dmul+0x24a>
   d5ea0:	ea94 0f0c 	teq	r4, ip
   d5ea4:	d10a      	bne.n	d5ebc <__aeabi_ddiv+0x19c>
   d5ea6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5eaa:	f47f af34 	bne.w	d5d16 <__aeabi_dmul+0x24a>
   d5eae:	ea95 0f0c 	teq	r5, ip
   d5eb2:	f47f af25 	bne.w	d5d00 <__aeabi_dmul+0x234>
   d5eb6:	4610      	mov	r0, r2
   d5eb8:	4619      	mov	r1, r3
   d5eba:	e72c      	b.n	d5d16 <__aeabi_dmul+0x24a>
   d5ebc:	ea95 0f0c 	teq	r5, ip
   d5ec0:	d106      	bne.n	d5ed0 <__aeabi_ddiv+0x1b0>
   d5ec2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5ec6:	f43f aefd 	beq.w	d5cc4 <__aeabi_dmul+0x1f8>
   d5eca:	4610      	mov	r0, r2
   d5ecc:	4619      	mov	r1, r3
   d5ece:	e722      	b.n	d5d16 <__aeabi_dmul+0x24a>
   d5ed0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5ed4:	bf18      	it	ne
   d5ed6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5eda:	f47f aec5 	bne.w	d5c68 <__aeabi_dmul+0x19c>
   d5ede:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5ee2:	f47f af0d 	bne.w	d5d00 <__aeabi_dmul+0x234>
   d5ee6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5eea:	f47f aeeb 	bne.w	d5cc4 <__aeabi_dmul+0x1f8>
   d5eee:	e712      	b.n	d5d16 <__aeabi_dmul+0x24a>

000d5ef0 <__aeabi_d2iz>:
   d5ef0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5ef4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5ef8:	d215      	bcs.n	d5f26 <__aeabi_d2iz+0x36>
   d5efa:	d511      	bpl.n	d5f20 <__aeabi_d2iz+0x30>
   d5efc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5f00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5f04:	d912      	bls.n	d5f2c <__aeabi_d2iz+0x3c>
   d5f06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5f0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5f0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5f12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5f16:	fa23 f002 	lsr.w	r0, r3, r2
   d5f1a:	bf18      	it	ne
   d5f1c:	4240      	negne	r0, r0
   d5f1e:	4770      	bx	lr
   d5f20:	f04f 0000 	mov.w	r0, #0
   d5f24:	4770      	bx	lr
   d5f26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5f2a:	d105      	bne.n	d5f38 <__aeabi_d2iz+0x48>
   d5f2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d5f30:	bf08      	it	eq
   d5f32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5f36:	4770      	bx	lr
   d5f38:	f04f 0000 	mov.w	r0, #0
   d5f3c:	4770      	bx	lr
   d5f3e:	bf00      	nop

000d5f40 <__cxa_atexit>:
   d5f40:	b510      	push	{r4, lr}
   d5f42:	4c05      	ldr	r4, [pc, #20]	; (d5f58 <__cxa_atexit+0x18>)
   d5f44:	4613      	mov	r3, r2
   d5f46:	b12c      	cbz	r4, d5f54 <__cxa_atexit+0x14>
   d5f48:	460a      	mov	r2, r1
   d5f4a:	4601      	mov	r1, r0
   d5f4c:	2002      	movs	r0, #2
   d5f4e:	f3af 8000 	nop.w
   d5f52:	bd10      	pop	{r4, pc}
   d5f54:	4620      	mov	r0, r4
   d5f56:	e7fc      	b.n	d5f52 <__cxa_atexit+0x12>
   d5f58:	00000000 	.word	0x00000000

000d5f5c <memcpy>:
   d5f5c:	440a      	add	r2, r1
   d5f5e:	4291      	cmp	r1, r2
   d5f60:	f100 33ff 	add.w	r3, r0, #4294967295
   d5f64:	d100      	bne.n	d5f68 <memcpy+0xc>
   d5f66:	4770      	bx	lr
   d5f68:	b510      	push	{r4, lr}
   d5f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5f72:	4291      	cmp	r1, r2
   d5f74:	d1f9      	bne.n	d5f6a <memcpy+0xe>
   d5f76:	bd10      	pop	{r4, pc}

000d5f78 <memset>:
   d5f78:	4402      	add	r2, r0
   d5f7a:	4603      	mov	r3, r0
   d5f7c:	4293      	cmp	r3, r2
   d5f7e:	d100      	bne.n	d5f82 <memset+0xa>
   d5f80:	4770      	bx	lr
   d5f82:	f803 1b01 	strb.w	r1, [r3], #1
   d5f86:	e7f9      	b.n	d5f7c <memset+0x4>

000d5f88 <srand>:
   d5f88:	b538      	push	{r3, r4, r5, lr}
   d5f8a:	4b0d      	ldr	r3, [pc, #52]	; (d5fc0 <srand+0x38>)
   d5f8c:	681d      	ldr	r5, [r3, #0]
   d5f8e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5f90:	4604      	mov	r4, r0
   d5f92:	b97b      	cbnz	r3, d5fb4 <srand+0x2c>
   d5f94:	2018      	movs	r0, #24
   d5f96:	f7fe fe53 	bl	d4c40 <malloc>
   d5f9a:	4a0a      	ldr	r2, [pc, #40]	; (d5fc4 <srand+0x3c>)
   d5f9c:	4b0a      	ldr	r3, [pc, #40]	; (d5fc8 <srand+0x40>)
   d5f9e:	63a8      	str	r0, [r5, #56]	; 0x38
   d5fa0:	e9c0 2300 	strd	r2, r3, [r0]
   d5fa4:	4b09      	ldr	r3, [pc, #36]	; (d5fcc <srand+0x44>)
   d5fa6:	6083      	str	r3, [r0, #8]
   d5fa8:	230b      	movs	r3, #11
   d5faa:	8183      	strh	r3, [r0, #12]
   d5fac:	2201      	movs	r2, #1
   d5fae:	2300      	movs	r3, #0
   d5fb0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5fb4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5fb6:	2200      	movs	r2, #0
   d5fb8:	611c      	str	r4, [r3, #16]
   d5fba:	615a      	str	r2, [r3, #20]
   d5fbc:	bd38      	pop	{r3, r4, r5, pc}
   d5fbe:	bf00      	nop
   d5fc0:	2003e590 	.word	0x2003e590
   d5fc4:	abcd330e 	.word	0xabcd330e
   d5fc8:	e66d1234 	.word	0xe66d1234
   d5fcc:	0005deec 	.word	0x0005deec

000d5fd0 <strlen>:
   d5fd0:	4603      	mov	r3, r0
   d5fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5fd6:	2a00      	cmp	r2, #0
   d5fd8:	d1fb      	bne.n	d5fd2 <strlen+0x2>
   d5fda:	1a18      	subs	r0, r3, r0
   d5fdc:	3801      	subs	r0, #1
   d5fde:	4770      	bx	lr

000d5fe0 <dynalib_user>:
   d5fe0:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d5ff0:	0000 0000 5553 4343 5345 203a 6552 6563     ....SUCCES: Rece
   d6000:	7669 6465 6620 726f 2520 3a73 0920 4520     ived for %s: . E
   d6010:	7078 6365 6574 2064 6425 202c 6552 6563     xpected %d, Rece
   d6020:	7669 6465 2520 2e64 4500 5252 524f 203a     ived %d..ERROR: 
   d6030:	6552 6563 7669 6465 6620 726f 2520 3a73     Received for %s:
   d6040:	0920 4520 7078 6365 6574 2064 6425 202c      . Expected %d, 
   d6050:	6552 6563 7669 6465 2520 2e64 5200 6365     Received %d..Rec
   d6060:	6965 6576 2064 7962 6574 2520 0064 7250     eived byte %d.Pr
   d6070:	6165 626d 6c75 0065 7453 7261 0074 6e45     eambule.Start.En
   d6080:	6574 6574 2820 7974 6570 6c46 6761 2973     tete (typeFlags)
   d6090:	4500 746e 7465 2065 6c28 6e65 7467 2968     .Entete (length)
   d60a0:	5200 6365 6965 6576 2064 6962 2074 756e     .Received bit nu
   d60b0:	626d 7265 2520 0064 6553 6972 6c61 6320     mber %d.Serial c
   d60c0:	6e6f 656e 7463 6465 203a 7473 7261 6974     onnected: starti
   d60d0:	676e 6f00 7475 7570 5474 7268 6165 0064     ng.outputThread.
   d60e0:	4552 4441 203a 0030 4552 4441 203a 0031     READ: 0.READ: 1.
   d60f0:	5245 4f52 3a52 6920 696e 6974 6c61 7320     ERROR: initial s
   d6100:	6174 6574 6720 746f 6c20 6e6f 5067 7265     tate got longPer
   d6110:	6f69 0064 5245 4f52 3a52 6520 7078 6365     iod.ERROR: expec
   d6120:	6574 2064 6873 726f 5074 7265 6f69 2064     ted shortPeriod 
   d6130:	6e69 7720 6961 2074 7473 7461 2065 6f67     in wait state go
   d6140:	2074 2523 0064 4e55 4544 4946 454e 2044     t #%d.UNDEFINED 
   d6150:	6562 6168 6976 756f 2072 6f66 2072 6576     behaviour for ve
   d6160:	7972 6f4c 676e 6550 6972 646f 6920 206e     ryLongPeriod in 
   d6170:	6e69 7570 5374 6174 6574 2720 756f 7074     inputState 'outp
   d6180:	7475 2731 5300 6174 7472 6e69 2067 756f     ut1'.Starting ou
   d6190:	7074 7475 6c20 6f6f 0070 2d2d 2d2d 2d2d     tput loop.------
   d61a0:	2d2d 002d 0001 0000 000a 0000 0064 0000     ---.........d...

000d61b0 <_ZTVN5spark13EthernetClassE>:
	...
   d61b8:	4cef 000d 4ce5 000d 4cdb 000d 4cd1 000d     .L...L...L...L..
   d61c8:	4cc5 000d 4cb9 000d 54c9 000d 54d1 000d     .L...L...T...T..
   d61d8:	4cad 000d 4ca5 000d 4c9b 000d 4c91 000d     .L...L...L...L..
   d61e8:	5501 000d 7061 0070 5925 252d 2d6d 6425     .U..app.%Y-%m-%d
   d61f8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d6208:	6d69 0065                                   ime.

000d620c <_ZTV9IPAddress>:
	...
   d6214:	5055 000d 5045 000d 5047 000d               UP..EP..GP..

000d6220 <_ZTV9USBSerial>:
	...
   d6228:	512b 000d 5193 000d 5169 000d 4db5 000d     +Q...Q..iQ...M..
   d6238:	515b 000d 512d 000d 513d 000d 518d 000d     [Q..-Q..=Q...Q..
   d6248:	514d 000d 5127 000d                         MQ..'Q..

000d6250 <_ZTV11USARTSerial>:
	...
   d6258:	5295 000d 5301 000d 52d9 000d 4db5 000d     .R...S...R...M..
   d6268:	52a9 000d 52c5 000d 52b7 000d 52d3 000d     .R...R...R...R..
   d6278:	5297 000d 529b 000d                         .R...R..

000d6280 <_ZTV7TwoWire>:
	...
   d6288:	5391 000d 53db 000d 53b3 000d 5393 000d     .S...S...S...S..
   d6298:	53bb 000d 53c3 000d 53cb 000d 53d3 000d     .S...S...S...S..

000d62a8 <_ZTVN5spark9WiFiClassE>:
	...
   d62b0:	546b 000d 5461 000d 5457 000d 540d 000d     kT..aT..WT...T..
   d62c0:	544b 000d 543f 000d 54c9 000d 54d1 000d     KT..?T...T...T..
   d62d0:	5433 000d 542b 000d 5421 000d 5417 000d     3T..+T..!T...T..
   d62e0:	5501 000d                                   .U..

000d62e4 <_ZTVN5spark12NetworkClassE>:
	...
   d62ec:	5489 000d 5493 000d 549d 000d 54a7 000d     .T...T...T...T..
   d62fc:	54b1 000d 54bd 000d 54c9 000d 54d1 000d     .T...T...T...T..
   d630c:	54d9 000d 54e5 000d 54ed 000d 54f7 000d     .T...T...T...T..
   d631c:	5501 000d                                   .U..

000d6320 <_ZSt7nothrow>:
	...

000d6321 <link_const_variable_data_end>:
   d6321:	00          	.byte	0x00
	...

000d6324 <link_constructors_location>:
   d6324:	000d4831 	.word	0x000d4831
   d6328:	000d4cf9 	.word	0x000d4cf9
   d632c:	000d4d41 	.word	0x000d4d41
   d6330:	000d4d8d 	.word	0x000d4d8d
   d6334:	000d4ed5 	.word	0x000d4ed5
   d6338:	000d4ee5 	.word	0x000d4ee5
   d633c:	000d4f05 	.word	0x000d4f05
   d6340:	000d5475 	.word	0x000d5475
   d6344:	000d55d5 	.word	0x000d55d5

000d6348 <link_constructors_end>:
	...
